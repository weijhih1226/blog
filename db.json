{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"source/images/avatar1.jpg","path":"images/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":0},{"_id":"source/images/background_dark.jpg","path":"images/background_dark.jpg","modified":1,"renderable":0},{"_id":"source/images/icon/LINE QRcode.jpg","path":"images/icon/LINE QRcode.jpg","modified":1,"renderable":0},{"_id":"source/images/blog/利用JS撈網路資料/CORS.png","path":"images/blog/利用JS撈網路資料/CORS.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_drafts/Python入門.md","hash":"3b7ccc10ea73ef57d37f69e422b001476ac1c0f8","modified":1699288446414},{"_id":"source/_posts/Anaconda安裝套件說明.md","hash":"102855c8b4a07d6b2f6d73a65edcbb07d47972df","modified":1699371748591},{"_id":"source/_posts/Django3架站實戰筆記.md","hash":"54638665de25ebd105a7ca63462554e25b2fd9c8","modified":1699371693415},{"_id":"source/_posts/Docker相關指令.md","hash":"607d9159cf22408dffd63ab8a5e25758a015fdd1","modified":1699371783060},{"_id":"source/_posts/Git相關指令.md","hash":"52bad626f088aa9590a07e6fd8f2da9d7d18bcae","modified":1699371591361},{"_id":"source/_posts/Hexo使用說明.md","hash":"33ecfe621610309295f27b68757b619f863c0886","modified":1699371534429},{"_id":"source/_posts/Hexo簡介.md","hash":"94b8821b8f5f6e162ba7dcc1247e54cd0b3c51d2","modified":1699288446416},{"_id":"source/_posts/Linux相關指令.md","hash":"951e66bede4d40dc3fe25fd12c9f7b763fa4ac6e","modified":1699371819816},{"_id":"source/_posts/MySQL指令.md","hash":"c3848d5b8a2640dce91a1090c174989d7d9e0983","modified":1699371798666},{"_id":"source/_posts/利用JS撈網路資料.md","hash":"3eb9502207b025be7730e7964972d2f0b99e81de","modified":1699371668900},{"_id":"source/about/index.md","hash":"daea6493d4fa2860993baaa4627aaa4ec3283a8f","modified":1699372349431},{"_id":"source/images/icon/LINE QRcode.jpg","hash":"ab98a04b77fad7bbd7a9c70f7fc9bf69d77ec2fd","modified":1699291091883},{"_id":"source/images/blog/利用JS撈網路資料/CORS.png","hash":"e6d1945716417065332a4e5a18e475d97a0d6ba2","modified":1699291314919},{"_id":"source/images/avatar1.jpg","hash":"3d9f1aa1688943a006afa70daee9cce0b74afbe2","modified":1682322474731},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1699290462910},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1699290462881},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1699290462882},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1699290462882},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1699290462883},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1699290462883},{"_id":"themes/fluid/README.md","hash":"4030feb7e301d83570682ea947383cc460e3c36c","modified":1699290462885},{"_id":"themes/fluid/README_en.md","hash":"2633d56de104ff34a2d65abe97d779bc682caa1d","modified":1699290462885},{"_id":"themes/fluid/package.json","hash":"a961e600dd7b9c74c66b91c106cf941a37000b2d","modified":1699290462897},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1699290462887},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1699290462895},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1699290462895},{"_id":"themes/fluid/_config.yml","hash":"60e1f65ec6f63a31528aecc242b7058c34f73a8c","modified":1699290462885},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1699290462896},{"_id":"themes/fluid/layout/index.ejs","hash":"797b70bc7ad15e1adfecde1162230a20ff4f212d","modified":1699290462896},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1699290462896},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1699290462896},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1699290462895},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1699290462896},{"_id":"themes/fluid/layout/post.ejs","hash":"bdea32ca3218938271da064446f2de9b3fcfaa6d","modified":1699290462897},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1699290462897},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1699290462897},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1699290462886},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1699290462885},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1699290462886},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1699290462886},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1699290462886},{"_id":"themes/fluid/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1699290462886},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1699290462886},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1699290462887},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1699290462887},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1699290462882},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1699290462882},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1699290462882},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1699290462883},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1699290462883},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1699290462883},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1699290462883},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1699290462883},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1699290462887},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1699290462887},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1699290462887},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1699290462887},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1699290462890},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1699290462890},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1699290462890},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1699290462883},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1699290462891},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1699290462895},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1699290462890},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1699290462895},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1699290462897},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1699290462899},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1699290462891},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"2d03854aa1d31211bae505bc72c820e761ba357e","modified":1699290462899},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1699290462899},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1699290462899},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1699290462900},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1699290462899},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1699290462900},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1699290462901},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1699290462901},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1699290462901},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1699290462901},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1699290462901},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1699290462901},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1699290462902},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1699290462902},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1699290462902},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1699290462902},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1699290462902},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1699290462902},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1699290462903},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1699290462902},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1699290462910},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1699290462910},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1699290462911},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1699290462911},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1699290462911},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1699290462912},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1699290462913},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1699290462913},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1699290462913},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7e15ce2ef16b0705148306a27c6a79d809c3040b","modified":1699290462913},{"_id":"themes/fluid/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1699290462913},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1699290462913},{"_id":"themes/fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1699290462913},{"_id":"themes/fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1699290462915},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1699290462913},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1699290462915},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1699290462913},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1699290462888},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1699290462889},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1699290462890},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1699290462891},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1699290462890},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1699290462891},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"6e0f0095e1cb1c0d89b6697ebcd33656b4e3e14c","modified":1699290462891},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1699290462892},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1699290462892},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1699290462892},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1699290462892},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1699290462892},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e026955c454ec57bbbb7e9b7d800db90564fc6af","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1699290462893},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1699290462895},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1699290462897},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1699290462898},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1699290462898},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"fb61d936db040f0cdd960ef4e330d0a6c545ed9d","modified":1699290462898},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1699290462898},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1699290462898},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1699290462903},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1699290462899},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1699290462903},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1699290462910},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1699290462910},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1699290462903},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1699290462904},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1699290462907},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"34e3bf07d14f05ccf14716063b969b792f925b58","modified":1699290462907},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1699290462907},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1699290462907},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1699290462907},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1699290462908},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1699290462908},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1699290462908},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1699290462908},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1699290462908},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1699290462909},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1699290462909},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"8cec4b3682a33585ff2e10fade0c6d38772c6469","modified":1699290462909},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1699290462909},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1699290462910},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1699290462904},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1699290462904},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1699290462904},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"5563abb10a40e2f8ece8e521763fe67c6e6bc12b","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1699290462905},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1699290462906},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1699290462909},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1699290462912},{"_id":"source/images/background_dark.jpg","hash":"fa026842a46d8fc9595e5fc2edbd3ea202a77e75","modified":1699291345673},{"_id":"source/images/background.jpg","hash":"9b65b0b0355b26d0d40249db83d841ad10f14142","modified":1682322474747},{"_id":"public/local-search.xml","hash":"7835b1ec2e5c6d17067f207d420eda86e81a7883","modified":1699374150965},{"_id":"public/about/index.html","hash":"8ad08b679d0b6891b54011bb1d81b302db2c5c90","modified":1699374150965},{"_id":"public/2023/04/20/Linux相關指令/index.html","hash":"f2c1b7529b3384a20814d576716587c5812aa139","modified":1699374150965},{"_id":"public/2023/04/20/MySQL指令/index.html","hash":"1f396c4a8028995ef0095bb80a6cf7920ada976d","modified":1699374150965},{"_id":"public/2023/03/31/Docker相關指令/index.html","hash":"e7c63f9cc4bcdae81247f27add6c539b2e15e0df","modified":1699374150965},{"_id":"public/2023/03/16/Anaconda安裝套件說明/index.html","hash":"d31da2803c2d49edd2bf1ef44316004f1acb8052","modified":1699374150965},{"_id":"public/2023/01/18/Django3架站實戰筆記/index.html","hash":"40193439fcd4fe0702efe1d5dff36a0fcb6e07de","modified":1699374150965},{"_id":"public/2022/09/06/利用JS撈網路資料/index.html","hash":"f95d1425da7edc3381de3b7a0f3c9aa54fce23dd","modified":1699374150965},{"_id":"public/2022/08/24/Git相關指令/index.html","hash":"e8f1698791f20eca6bcd5b3ee071bea954735c3d","modified":1699374150965},{"_id":"public/2022/07/21/Hexo簡介/index.html","hash":"10dc214ca4837fb14fa72bb2c53a9bf1240e036c","modified":1699374150965},{"_id":"public/2022/08/23/Hexo使用說明/index.html","hash":"24b417bd9ebcbd23ef8b768709bc86e739d272e1","modified":1699374150965},{"_id":"public/categories/Anaconda/index.html","hash":"9fda28ffe4f5b1b72a45d134833a842b91dc0321","modified":1699374150965},{"_id":"public/categories/Django/index.html","hash":"cd2ac47fc3dcc093abbe1a2738d3814e74cf5209","modified":1699374150965},{"_id":"public/categories/Docker/index.html","hash":"7ba9a2874390749125ef6726f012446c55085eaa","modified":1699374150965},{"_id":"public/categories/Anaconda/Python/index.html","hash":"e840da1cf1a0977e4f6bd81daf82604382687039","modified":1699374150965},{"_id":"public/categories/Django/Python/index.html","hash":"7a425db81eabb8e33e575f0453f56b8f897e7fc7","modified":1699374150965},{"_id":"public/categories/GitHub/index.html","hash":"9f16168edc2d4c74a3ffc2bc84d9e6fbe81c3c4c","modified":1699374150965},{"_id":"public/categories/Linux/index.html","hash":"84461f0c14c5af63cb8cb13a8234c55a3afd966e","modified":1699374150965},{"_id":"public/categories/GitHub/Git/index.html","hash":"c3bb639c5edfbfb92f99b11a1aa82b891bde77f4","modified":1699374150965},{"_id":"public/categories/MySQL/index.html","hash":"b62e9e708ba0fd198ef29f5ba2f354478c47141e","modified":1699374150965},{"_id":"public/categories/GitHub/Hexo/index.html","hash":"e791a75ac5d6bec560c2f023b11b798de89d1d3f","modified":1699374150965},{"_id":"public/categories/MySQL/SQL/index.html","hash":"d8ea2aaa4304502a8271bf2f04ad90e49dae63c8","modified":1699374150965},{"_id":"public/categories/HTML/index.html","hash":"29e477bca8e4896aa83c8b59f61800df8ea12d86","modified":1699374150965},{"_id":"public/categories/HTML/JavaScript/index.html","hash":"d0cdc0379f55450e3b7dbf7658baebf55ba66d5f","modified":1699374150965},{"_id":"public/archives/index.html","hash":"6f2f1311984b710088a25b50ecdcb8b4a4579a29","modified":1699374150965},{"_id":"public/archives/2022/07/index.html","hash":"ffd04d4d5fc049c548ebc7c2cadf1e5952aab2f9","modified":1699374150965},{"_id":"public/archives/2022/index.html","hash":"9d74016c36ff47abc417c6fbdf62fffdfaa1375a","modified":1699374150965},{"_id":"public/archives/2022/09/index.html","hash":"57d86dfab9fe4d9e53bbf9fc9673edb8ada7e614","modified":1699374150965},{"_id":"public/archives/2022/08/index.html","hash":"31c9c3c628a1cc4276e270bef4844334f5b16d20","modified":1699374150965},{"_id":"public/archives/2023/01/index.html","hash":"833776ebbc40657272a98729db6b53245e5997f9","modified":1699374150965},{"_id":"public/archives/2023/03/index.html","hash":"f8586d6d6475715b1e6c6608ddb3ac31986b7027","modified":1699374150965},{"_id":"public/index.html","hash":"e94f080c1fe855dbe5dba55f7c29fc1cebe3ccac","modified":1699374150965},{"_id":"public/archives/2023/index.html","hash":"97a87d059a8ce7bc3fc1d6eb9f76c2b55ad14ee6","modified":1699374150965},{"_id":"public/archives/2023/04/index.html","hash":"9128526d95d7a8a3e238a258aeda88bd0dce05dc","modified":1699374150965},{"_id":"public/tags/Anaconda/index.html","hash":"e7e54093a2d14e402ebdd3e12717963140ce2215","modified":1699374150965},{"_id":"public/tags/Django/index.html","hash":"1978081e50bd6b606a5b1937a15f6cef343307b2","modified":1699374150965},{"_id":"public/tags/Docker/index.html","hash":"52b6c495e369db64ff8b9e4808a768ce93ee4eed","modified":1699374150965},{"_id":"public/tags/Python/index.html","hash":"83b8a59755fed33c4e8addc8fe12fa36221d1e11","modified":1699374150965},{"_id":"public/tags/GitHub/index.html","hash":"54846222af119dbc12e12ad8a8d9c46678cd98c0","modified":1699374150965},{"_id":"public/tags/Git/index.html","hash":"528cee511215fc71c6e066a3085737baa17c3c78","modified":1699374150965},{"_id":"public/tags/Hexo/index.html","hash":"1be455c87fad476ab77dd34749b2bbae328ea528","modified":1699374150965},{"_id":"public/tags/Node-js/index.html","hash":"21df1d082ce5073d5f663051e056cc12b9e3cff2","modified":1699374150965},{"_id":"public/tags/hexo/index.html","hash":"37d94421eff7535de6fca5d616da1902c830b516","modified":1699374150965},{"_id":"public/tags/git/index.html","hash":"91d665b316dd9f23c6fc3479a843209c3f295d59","modified":1699374150965},{"_id":"public/tags/Linux/index.html","hash":"abb9e8b4e59e73f0c77bc7f6bbaec4b8adbc7cff","modified":1699374150965},{"_id":"public/tags/SQL/index.html","hash":"f902dfe7cffe42137aa4b8bd7169e3574eb9fa4f","modified":1699374150965},{"_id":"public/tags/MySQL/index.html","hash":"61349112dab8275fe7ac3d1fccb30d6f6f2d62dd","modified":1699374150965},{"_id":"public/404.html","hash":"584673a40343078288f1260b7a1515b708940329","modified":1699374150965},{"_id":"public/tags/HTML/index.html","hash":"a4102d28827051e95d178d8145b645caaa03b87e","modified":1699374150965},{"_id":"public/tags/JavaScript/index.html","hash":"353b14965b909132a5b352f6254bc4afd5ec5e04","modified":1699374150965},{"_id":"public/tags/index.html","hash":"07655ee2e64674d7849d03a13cfc81520db39530","modified":1699374150965},{"_id":"public/links/index.html","hash":"6674af8164f19d10d8fdd5bf70ab1452bda7b0a1","modified":1699374150965},{"_id":"public/categories/index.html","hash":"68f32f823b01b5dc5f7e05ddb88d9c5f9657f800","modified":1699374150965},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1699374150965},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1699374150965},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1699374150965},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1699374150965},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1699374150965},{"_id":"public/images/icon/LINE QRcode.jpg","hash":"ab98a04b77fad7bbd7a9c70f7fc9bf69d77ec2fd","modified":1699374150965},{"_id":"public/images/blog/利用JS撈網路資料/CORS.png","hash":"e6d1945716417065332a4e5a18e475d97a0d6ba2","modified":1699374150965},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1699374150965},{"_id":"public/css/main.css","hash":"94720222d1e91fbeb5cc95255b39fb3206a481a9","modified":1699374150965},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1699374150965},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1699374150965},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1699374150965},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1699374150965},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1699374150965},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1699374150965},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1699374150965},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1699374150965},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1699374150965},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1699374150965},{"_id":"public/images/avatar1.jpg","hash":"3d9f1aa1688943a006afa70daee9cce0b74afbe2","modified":1699374150965},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1699374150965},{"_id":"public/images/background_dark.jpg","hash":"fa026842a46d8fc9595e5fc2edbd3ea202a77e75","modified":1699374150965},{"_id":"public/images/background.jpg","hash":"9b65b0b0355b26d0d40249db83d841ad10f14142","modified":1699374150965}],"Category":[{"name":"Anaconda","_id":"cloojhr140004v47fdupf4xx3"},{"name":"Django","_id":"cloojhr150007v47f2t5kaavz"},{"name":"Docker","_id":"cloojhr160009v47f1tpm1fon"},{"name":"Python","parent":"cloojhr140004v47fdupf4xx3","_id":"cloojhr16000dv47f8a4l3q93"},{"name":"Python","parent":"cloojhr150007v47f2t5kaavz","_id":"cloojhr17000hv47ffscy8tbi"},{"name":"GitHub","_id":"cloojhr18000rv47f6f3pgs6k"},{"name":"Linux","_id":"cloojhr1a0012v47fblz17kd1"},{"name":"Git","parent":"cloojhr18000rv47f6f3pgs6k","_id":"cloojhr1b0015v47f99z0hwmc"},{"name":"MySQL","_id":"cloojhr1b0018v47fdxt5bzz1"},{"name":"HTML","_id":"cloojhr1b001dv47fhanjcemu"},{"name":"Hexo","parent":"cloojhr18000rv47f6f3pgs6k","_id":"cloojhr1b001hv47f1fdxb7sk"},{"name":"SQL","parent":"cloojhr1b0018v47fdxt5bzz1","_id":"cloojhr1c001ov47f9stvezcl"},{"name":"JavaScript","parent":"cloojhr1b001dv47fhanjcemu","_id":"cloojhr1c001tv47fb8dy3jcm"}],"Data":[],"Page":[{"title":"關於","date":"2022-07-25T03:23:51.000Z","updated":"2023-11-07T15:52:00.000Z","layout":"about","_content":"\n<font size=6>About Me</font>\n\n台大大氣科學碩畢，以雷達氣象的背景專長，在氣象局從事強降雨即時預報研究、天氣監測系統網頁維護及開發，有2年半的工作經驗。從這些工作中漸漸建立對網路爬蟲、資料探勘(Data Mining)以及將數據視覺化的能力，並培養起濃厚的興趣。\n\n## 專長\n\n- 資料科學\n- 網頁開發\n- 雷達氣象\n\n## 學歷\n\n- 國立台灣大學大氣科學研究所\n\n## 經歷\n\n- CIeNET Technologies 軟體工程師 (2023/08 - Now)\n- 中央氣象局氣象衛星中心 助理工程師 (2020/06 - 2023/08)\n\n## 擅長工具\n\n- Python3 (Django4)\n- JavaScript ES6 (Leaflet、Vue.js)\n- Golang\n- HTML5\n- CSS\n- Docker\n- Linux\n- Git\n- MATLAB\n- MySQL\n- Java\n\n## 技能檢定\n\n- TOEIC - Score: 800\n- Java SE 7 Programmer - Certified\n\n## 簡歷\n\n### 助理工程師\n- ### <b>劇烈天氣監測系統(QPEplus)</b> (2022/01 - 2023/08)\n  \n  在維護及開發天氣監測系統中，更熟悉Django框架、SQL語法及各種開發工具，並且在專案計畫一次又一次完成客製化單位的功能需求，體認到前後端及整個團隊溝通的重要性。為了確保系統穩定，資料流的部分也必須不中斷，當出現問題時，從資料流或程式中快速找出中斷點並即時通報或修復，在在鍛鍊自己解決問題的能力。\n\n- ### <b>強對流即時預報系統(TANC)</b> (2020/06 - 2021/12)\n\n  相較於碩班對雷達氣象訊號利用模糊邏輯(Fuzzy Logic)方法分析，在這個工作中我們主要是透過機器學習的「複邏輯斯迴歸(Logistic Regression)」建模，校驗並改善現有強對流即時預報模型。除了從文獻中找尋重要的預報因子並調整參數之外，與不同單位溝通取得資料、轉換格式、挑選個案並濾除不合理值等等，這些前置作業也花了我們不少時間。因此，從中讓我對各種資料特性有更深入的了解，不但學習了跨領域的相關知識，也漸漸培養了跨單位溝通的耐心及能力。\n\n### 講師兼任研究人員\n- ### <b>台大雷達</b> (2021/10 - 2023/07)\n\n  負責臺大X波段氣象雷達資料分析、調校及維護，並與學生們分享經驗，此外也開發GUI以快速分析各參數分布情形與關聯性。\n\n## Portfolio\n\n- https://github.com/weijhih1226/\n- https://gov.tw/eyK - 本土化極短期強對流機率預報系統\n- https://weijhih1226.github.io/weather/ - 氣象產品展示網頁\n- https://github.com/weijhih1226/radar/ - NTU Radar Viewer\n","source":"about/index.md","raw":"---\ntitle: 關於\ndate: 2022/07/25 11:23:51\nupdated: 2023/11/07 23:52\nlayout: about\n---\n\n<font size=6>About Me</font>\n\n台大大氣科學碩畢，以雷達氣象的背景專長，在氣象局從事強降雨即時預報研究、天氣監測系統網頁維護及開發，有2年半的工作經驗。從這些工作中漸漸建立對網路爬蟲、資料探勘(Data Mining)以及將數據視覺化的能力，並培養起濃厚的興趣。\n\n## 專長\n\n- 資料科學\n- 網頁開發\n- 雷達氣象\n\n## 學歷\n\n- 國立台灣大學大氣科學研究所\n\n## 經歷\n\n- CIeNET Technologies 軟體工程師 (2023/08 - Now)\n- 中央氣象局氣象衛星中心 助理工程師 (2020/06 - 2023/08)\n\n## 擅長工具\n\n- Python3 (Django4)\n- JavaScript ES6 (Leaflet、Vue.js)\n- Golang\n- HTML5\n- CSS\n- Docker\n- Linux\n- Git\n- MATLAB\n- MySQL\n- Java\n\n## 技能檢定\n\n- TOEIC - Score: 800\n- Java SE 7 Programmer - Certified\n\n## 簡歷\n\n### 助理工程師\n- ### <b>劇烈天氣監測系統(QPEplus)</b> (2022/01 - 2023/08)\n  \n  在維護及開發天氣監測系統中，更熟悉Django框架、SQL語法及各種開發工具，並且在專案計畫一次又一次完成客製化單位的功能需求，體認到前後端及整個團隊溝通的重要性。為了確保系統穩定，資料流的部分也必須不中斷，當出現問題時，從資料流或程式中快速找出中斷點並即時通報或修復，在在鍛鍊自己解決問題的能力。\n\n- ### <b>強對流即時預報系統(TANC)</b> (2020/06 - 2021/12)\n\n  相較於碩班對雷達氣象訊號利用模糊邏輯(Fuzzy Logic)方法分析，在這個工作中我們主要是透過機器學習的「複邏輯斯迴歸(Logistic Regression)」建模，校驗並改善現有強對流即時預報模型。除了從文獻中找尋重要的預報因子並調整參數之外，與不同單位溝通取得資料、轉換格式、挑選個案並濾除不合理值等等，這些前置作業也花了我們不少時間。因此，從中讓我對各種資料特性有更深入的了解，不但學習了跨領域的相關知識，也漸漸培養了跨單位溝通的耐心及能力。\n\n### 講師兼任研究人員\n- ### <b>台大雷達</b> (2021/10 - 2023/07)\n\n  負責臺大X波段氣象雷達資料分析、調校及維護，並與學生們分享經驗，此外也開發GUI以快速分析各參數分布情形與關聯性。\n\n## Portfolio\n\n- https://github.com/weijhih1226/\n- https://gov.tw/eyK - 本土化極短期強對流機率預報系統\n- https://weijhih1226.github.io/weather/ - 氣象產品展示網頁\n- https://github.com/weijhih1226/radar/ - NTU Radar Viewer\n","path":"about/index.html","comments":1,"_id":"cloojhr100000v47f530u8gyn","content":"<p><font size=6>About Me</font></p>\n<p>台大大氣科學碩畢，以雷達氣象的背景專長，在氣象局從事強降雨即時預報研究、天氣監測系統網頁維護及開發，有2年半的工作經驗。從這些工作中漸漸建立對網路爬蟲、資料探勘(Data Mining)以及將數據視覺化的能力，並培養起濃厚的興趣。</p>\n<h2 id=\"專長\"><a href=\"#專長\" class=\"headerlink\" title=\"專長\"></a>專長</h2><ul>\n<li>資料科學</li>\n<li>網頁開發</li>\n<li>雷達氣象</li>\n</ul>\n<h2 id=\"學歷\"><a href=\"#學歷\" class=\"headerlink\" title=\"學歷\"></a>學歷</h2><ul>\n<li>國立台灣大學大氣科學研究所</li>\n</ul>\n<h2 id=\"經歷\"><a href=\"#經歷\" class=\"headerlink\" title=\"經歷\"></a>經歷</h2><ul>\n<li>CIeNET Technologies 軟體工程師 (2023&#x2F;08 - Now)</li>\n<li>中央氣象局氣象衛星中心 助理工程師 (2020&#x2F;06 - 2023&#x2F;08)</li>\n</ul>\n<h2 id=\"擅長工具\"><a href=\"#擅長工具\" class=\"headerlink\" title=\"擅長工具\"></a>擅長工具</h2><ul>\n<li>Python3 (Django4)</li>\n<li>JavaScript ES6 (Leaflet、Vue.js)</li>\n<li>Golang</li>\n<li>HTML5</li>\n<li>CSS</li>\n<li>Docker</li>\n<li>Linux</li>\n<li>Git</li>\n<li>MATLAB</li>\n<li>MySQL</li>\n<li>Java</li>\n</ul>\n<h2 id=\"技能檢定\"><a href=\"#技能檢定\" class=\"headerlink\" title=\"技能檢定\"></a>技能檢定</h2><ul>\n<li>TOEIC - Score: 800</li>\n<li>Java SE 7 Programmer - Certified</li>\n</ul>\n<h2 id=\"簡歷\"><a href=\"#簡歷\" class=\"headerlink\" title=\"簡歷\"></a>簡歷</h2><h3 id=\"助理工程師\"><a href=\"#助理工程師\" class=\"headerlink\" title=\"助理工程師\"></a>助理工程師</h3><ul>\n<li><h3 id=\"劇烈天氣監測系統-QPEplus-2022-01-2023-08\"><a href=\"#劇烈天氣監測系統-QPEplus-2022-01-2023-08\" class=\"headerlink\" title=\"劇烈天氣監測系統(QPEplus) (2022&#x2F;01 - 2023&#x2F;08)\"></a><b>劇烈天氣監測系統(QPEplus)</b> (2022&#x2F;01 - 2023&#x2F;08)</h3><p>在維護及開發天氣監測系統中，更熟悉Django框架、SQL語法及各種開發工具，並且在專案計畫一次又一次完成客製化單位的功能需求，體認到前後端及整個團隊溝通的重要性。為了確保系統穩定，資料流的部分也必須不中斷，當出現問題時，從資料流或程式中快速找出中斷點並即時通報或修復，在在鍛鍊自己解決問題的能力。</p>\n</li>\n<li><h3 id=\"強對流即時預報系統-TANC-2020-06-2021-12\"><a href=\"#強對流即時預報系統-TANC-2020-06-2021-12\" class=\"headerlink\" title=\"強對流即時預報系統(TANC) (2020&#x2F;06 - 2021&#x2F;12)\"></a><b>強對流即時預報系統(TANC)</b> (2020&#x2F;06 - 2021&#x2F;12)</h3><p>相較於碩班對雷達氣象訊號利用模糊邏輯(Fuzzy Logic)方法分析，在這個工作中我們主要是透過機器學習的「複邏輯斯迴歸(Logistic Regression)」建模，校驗並改善現有強對流即時預報模型。除了從文獻中找尋重要的預報因子並調整參數之外，與不同單位溝通取得資料、轉換格式、挑選個案並濾除不合理值等等，這些前置作業也花了我們不少時間。因此，從中讓我對各種資料特性有更深入的了解，不但學習了跨領域的相關知識，也漸漸培養了跨單位溝通的耐心及能力。</p>\n</li>\n</ul>\n<h3 id=\"講師兼任研究人員\"><a href=\"#講師兼任研究人員\" class=\"headerlink\" title=\"講師兼任研究人員\"></a>講師兼任研究人員</h3><ul>\n<li><h3 id=\"台大雷達-2021-10-2023-07\"><a href=\"#台大雷達-2021-10-2023-07\" class=\"headerlink\" title=\"台大雷達 (2021&#x2F;10 - 2023&#x2F;07)\"></a><b>台大雷達</b> (2021&#x2F;10 - 2023&#x2F;07)</h3>負責臺大X波段氣象雷達資料分析、調校及維護，並與學生們分享經驗，此外也開發GUI以快速分析各參數分布情形與關聯性。</li>\n</ul>\n<h2 id=\"Portfolio\"><a href=\"#Portfolio\" class=\"headerlink\" title=\"Portfolio\"></a>Portfolio</h2><ul>\n<li><a href=\"https://github.com/weijhih1226/\">https://github.com/weijhih1226/</a></li>\n<li><a href=\"https://gov.tw/eyK\">https://gov.tw/eyK</a> - 本土化極短期強對流機率預報系統</li>\n<li><a href=\"https://weijhih1226.github.io/weather/\">https://weijhih1226.github.io/weather/</a> - 氣象產品展示網頁</li>\n<li><a href=\"https://github.com/weijhih1226/radar/\">https://github.com/weijhih1226/radar/</a> - NTU Radar Viewer</li>\n</ul>\n","excerpt":"","more":"<p><font size=6>About Me</font></p>\n<p>台大大氣科學碩畢，以雷達氣象的背景專長，在氣象局從事強降雨即時預報研究、天氣監測系統網頁維護及開發，有2年半的工作經驗。從這些工作中漸漸建立對網路爬蟲、資料探勘(Data Mining)以及將數據視覺化的能力，並培養起濃厚的興趣。</p>\n<h2 id=\"專長\"><a href=\"#專長\" class=\"headerlink\" title=\"專長\"></a>專長</h2><ul>\n<li>資料科學</li>\n<li>網頁開發</li>\n<li>雷達氣象</li>\n</ul>\n<h2 id=\"學歷\"><a href=\"#學歷\" class=\"headerlink\" title=\"學歷\"></a>學歷</h2><ul>\n<li>國立台灣大學大氣科學研究所</li>\n</ul>\n<h2 id=\"經歷\"><a href=\"#經歷\" class=\"headerlink\" title=\"經歷\"></a>經歷</h2><ul>\n<li>CIeNET Technologies 軟體工程師 (2023&#x2F;08 - Now)</li>\n<li>中央氣象局氣象衛星中心 助理工程師 (2020&#x2F;06 - 2023&#x2F;08)</li>\n</ul>\n<h2 id=\"擅長工具\"><a href=\"#擅長工具\" class=\"headerlink\" title=\"擅長工具\"></a>擅長工具</h2><ul>\n<li>Python3 (Django4)</li>\n<li>JavaScript ES6 (Leaflet、Vue.js)</li>\n<li>Golang</li>\n<li>HTML5</li>\n<li>CSS</li>\n<li>Docker</li>\n<li>Linux</li>\n<li>Git</li>\n<li>MATLAB</li>\n<li>MySQL</li>\n<li>Java</li>\n</ul>\n<h2 id=\"技能檢定\"><a href=\"#技能檢定\" class=\"headerlink\" title=\"技能檢定\"></a>技能檢定</h2><ul>\n<li>TOEIC - Score: 800</li>\n<li>Java SE 7 Programmer - Certified</li>\n</ul>\n<h2 id=\"簡歷\"><a href=\"#簡歷\" class=\"headerlink\" title=\"簡歷\"></a>簡歷</h2><h3 id=\"助理工程師\"><a href=\"#助理工程師\" class=\"headerlink\" title=\"助理工程師\"></a>助理工程師</h3><ul>\n<li><h3 id=\"劇烈天氣監測系統-QPEplus-2022-01-2023-08\"><a href=\"#劇烈天氣監測系統-QPEplus-2022-01-2023-08\" class=\"headerlink\" title=\"劇烈天氣監測系統(QPEplus) (2022&#x2F;01 - 2023&#x2F;08)\"></a><b>劇烈天氣監測系統(QPEplus)</b> (2022&#x2F;01 - 2023&#x2F;08)</h3><p>在維護及開發天氣監測系統中，更熟悉Django框架、SQL語法及各種開發工具，並且在專案計畫一次又一次完成客製化單位的功能需求，體認到前後端及整個團隊溝通的重要性。為了確保系統穩定，資料流的部分也必須不中斷，當出現問題時，從資料流或程式中快速找出中斷點並即時通報或修復，在在鍛鍊自己解決問題的能力。</p>\n</li>\n<li><h3 id=\"強對流即時預報系統-TANC-2020-06-2021-12\"><a href=\"#強對流即時預報系統-TANC-2020-06-2021-12\" class=\"headerlink\" title=\"強對流即時預報系統(TANC) (2020&#x2F;06 - 2021&#x2F;12)\"></a><b>強對流即時預報系統(TANC)</b> (2020&#x2F;06 - 2021&#x2F;12)</h3><p>相較於碩班對雷達氣象訊號利用模糊邏輯(Fuzzy Logic)方法分析，在這個工作中我們主要是透過機器學習的「複邏輯斯迴歸(Logistic Regression)」建模，校驗並改善現有強對流即時預報模型。除了從文獻中找尋重要的預報因子並調整參數之外，與不同單位溝通取得資料、轉換格式、挑選個案並濾除不合理值等等，這些前置作業也花了我們不少時間。因此，從中讓我對各種資料特性有更深入的了解，不但學習了跨領域的相關知識，也漸漸培養了跨單位溝通的耐心及能力。</p>\n</li>\n</ul>\n<h3 id=\"講師兼任研究人員\"><a href=\"#講師兼任研究人員\" class=\"headerlink\" title=\"講師兼任研究人員\"></a>講師兼任研究人員</h3><ul>\n<li><h3 id=\"台大雷達-2021-10-2023-07\"><a href=\"#台大雷達-2021-10-2023-07\" class=\"headerlink\" title=\"台大雷達 (2021&#x2F;10 - 2023&#x2F;07)\"></a><b>台大雷達</b> (2021&#x2F;10 - 2023&#x2F;07)</h3>負責臺大X波段氣象雷達資料分析、調校及維護，並與學生們分享經驗，此外也開發GUI以快速分析各參數分布情形與關聯性。</li>\n</ul>\n<h2 id=\"Portfolio\"><a href=\"#Portfolio\" class=\"headerlink\" title=\"Portfolio\"></a>Portfolio</h2><ul>\n<li><a href=\"https://github.com/weijhih1226/\">https://github.com/weijhih1226/</a></li>\n<li><a href=\"https://gov.tw/eyK\">https://gov.tw/eyK</a> - 本土化極短期強對流機率預報系統</li>\n<li><a href=\"https://weijhih1226.github.io/weather/\">https://weijhih1226.github.io/weather/</a> - 氣象產品展示網頁</li>\n<li><a href=\"https://github.com/weijhih1226/radar/\">https://github.com/weijhih1226/radar/</a> - NTU Radar Viewer</li>\n</ul>\n"}],"Post":[{"title":"Python入門","_content":"\n## 物件導向\n\n定義類別(Class)。\n\n```python\n# 人類別\nclass Person:\n    id = 0  # 類別屬性(class attribute)\n\n    # 建構式\n    def __init__(self, name='未命名', age=None, gender='未知'):\n        self.name = name        # 實例／資料屬性(instance/data attribute)\n        self.age = age\n        self.gender = gender\n\n    def set_age(self , age):\n        self.age = age\n\n    def get_age(self):\n        return self.age\n```\n\n物件導向三大特色：封裝、繼承、多型。\n\n## 魔術方法(Magic Method)\n\n利用內建函數`dir()`查詢某個物件的全部屬性，會發現屬性當中很多以`__xxx__`命名，。\n\n```python\n>>> dir(int)\n```\n\nPython在print某物件時，預設為顯示該實體物件所在記憶體位址，是因為其會先呼叫該物件的`__str__()`，若未定義才會再呼叫`__repr__()`，而預設兩者都是該物件的記憶體位址。\n\n```python\nclass NewString:\n    def __repr__(self):\n        return 'representation'\n    def __str__(self):\n        return 'string'\n\nprint([Object Name].__str__())\n```\n\n```python\nclass NewString:\n    def __init__(self):\n        print(self)\n    def __repr__(self):\n        return 'representation'\n    def __str__(self):\n        return 'string'\n```\n\n## 斷言(Assertion)\n\n\n## 參考資料\n- https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit\n- https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit","source":"_drafts/Python入門.md","raw":"---\ntitle: Python入門\ncategories: [Python]\ntags: [Python]\n---\n\n## 物件導向\n\n定義類別(Class)。\n\n```python\n# 人類別\nclass Person:\n    id = 0  # 類別屬性(class attribute)\n\n    # 建構式\n    def __init__(self, name='未命名', age=None, gender='未知'):\n        self.name = name        # 實例／資料屬性(instance/data attribute)\n        self.age = age\n        self.gender = gender\n\n    def set_age(self , age):\n        self.age = age\n\n    def get_age(self):\n        return self.age\n```\n\n物件導向三大特色：封裝、繼承、多型。\n\n## 魔術方法(Magic Method)\n\n利用內建函數`dir()`查詢某個物件的全部屬性，會發現屬性當中很多以`__xxx__`命名，。\n\n```python\n>>> dir(int)\n```\n\nPython在print某物件時，預設為顯示該實體物件所在記憶體位址，是因為其會先呼叫該物件的`__str__()`，若未定義才會再呼叫`__repr__()`，而預設兩者都是該物件的記憶體位址。\n\n```python\nclass NewString:\n    def __repr__(self):\n        return 'representation'\n    def __str__(self):\n        return 'string'\n\nprint([Object Name].__str__())\n```\n\n```python\nclass NewString:\n    def __init__(self):\n        print(self)\n    def __repr__(self):\n        return 'representation'\n    def __str__(self):\n        return 'string'\n```\n\n## 斷言(Assertion)\n\n\n## 參考資料\n- https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit\n- https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit","slug":"Python入門","published":0,"date":"2023-11-06T16:49:45.733Z","updated":"2023-11-06T16:34:06.414Z","comments":1,"layout":"post","photos":[],"_id":"cloojhr110001v47febfq4hx1","content":"<h2 id=\"物件導向\"><a href=\"#物件導向\" class=\"headerlink\" title=\"物件導向\"></a>物件導向</h2><p>定義類別(Class)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 人類別</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:<br>    <span class=\"hljs-built_in\">id</span> = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># 類別屬性(class attribute)</span><br><br>    <span class=\"hljs-comment\"># 建構式</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name=<span class=\"hljs-string\">&#x27;未命名&#x27;</span>, age=<span class=\"hljs-literal\">None</span>, gender=<span class=\"hljs-string\">&#x27;未知&#x27;</span></span>):<br>        self.name = name        <span class=\"hljs-comment\"># 實例／資料屬性(instance/data attribute)</span><br>        self.age = age<br>        self.gender = gender<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_age</span>(<span class=\"hljs-params\">self , age</span>):<br>        self.age = age<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_age</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> self.age<br></code></pre></td></tr></table></figure>\n\n<p>物件導向三大特色：封裝、繼承、多型。</p>\n<h2 id=\"魔術方法-Magic-Method\"><a href=\"#魔術方法-Magic-Method\" class=\"headerlink\" title=\"魔術方法(Magic Method)\"></a>魔術方法(Magic Method)</h2><p>利用內建函數<code>dir()</code>查詢某個物件的全部屬性，會發現屬性當中很多以<code>__xxx__</code>命名，。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>(<span class=\"hljs-built_in\">int</span>)<br></code></pre></td></tr></table></figure>\n\n<p>Python在print某物件時，預設為顯示該實體物件所在記憶體位址，是因為其會先呼叫該物件的<code>__str__()</code>，若未定義才會再呼叫<code>__repr__()</code>，而預設兩者都是該物件的記憶體位址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NewString</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;representation&#x27;</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;string&#x27;</span><br><br><span class=\"hljs-built_in\">print</span>([Object Name].__str__())<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NewString</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(self)<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;representation&#x27;</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"斷言-Assertion\"><a href=\"#斷言-Assertion\" class=\"headerlink\" title=\"斷言(Assertion)\"></a>斷言(Assertion)</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit\">https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit</a></li>\n<li><a href=\"https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit\">https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"物件導向\"><a href=\"#物件導向\" class=\"headerlink\" title=\"物件導向\"></a>物件導向</h2><p>定義類別(Class)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 人類別</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>:<br>    <span class=\"hljs-built_in\">id</span> = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># 類別屬性(class attribute)</span><br><br>    <span class=\"hljs-comment\"># 建構式</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name=<span class=\"hljs-string\">&#x27;未命名&#x27;</span>, age=<span class=\"hljs-literal\">None</span>, gender=<span class=\"hljs-string\">&#x27;未知&#x27;</span></span>):<br>        self.name = name        <span class=\"hljs-comment\"># 實例／資料屬性(instance/data attribute)</span><br>        self.age = age<br>        self.gender = gender<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_age</span>(<span class=\"hljs-params\">self , age</span>):<br>        self.age = age<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_age</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> self.age<br></code></pre></td></tr></table></figure>\n\n<p>物件導向三大特色：封裝、繼承、多型。</p>\n<h2 id=\"魔術方法-Magic-Method\"><a href=\"#魔術方法-Magic-Method\" class=\"headerlink\" title=\"魔術方法(Magic Method)\"></a>魔術方法(Magic Method)</h2><p>利用內建函數<code>dir()</code>查詢某個物件的全部屬性，會發現屬性當中很多以<code>__xxx__</code>命名，。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>(<span class=\"hljs-built_in\">int</span>)<br></code></pre></td></tr></table></figure>\n\n<p>Python在print某物件時，預設為顯示該實體物件所在記憶體位址，是因為其會先呼叫該物件的<code>__str__()</code>，若未定義才會再呼叫<code>__repr__()</code>，而預設兩者都是該物件的記憶體位址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NewString</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;representation&#x27;</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;string&#x27;</span><br><br><span class=\"hljs-built_in\">print</span>([Object Name].__str__())<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NewString</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-built_in\">print</span>(self)<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;representation&#x27;</span><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;string&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"斷言-Assertion\"><a href=\"#斷言-Assertion\" class=\"headerlink\" title=\"斷言(Assertion)\"></a>斷言(Assertion)</h2><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit\">https://docs.google.com/document/d/1QKmxsHHiL-ywRXtzX3cKTQMrPMPZ8KoX_yWwJlyzquo/edit</a></li>\n<li><a href=\"https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit\">https://docs.google.com/document/d/1370fsW9a9YBS6QGaMLqzrY9GnDI9p_f1NXkvjtkbamk/edit</a></li>\n</ul>\n"},{"title":"Anaconda安裝套件說明","date":"2023-03-16T03:04:00.000Z","updated":"2023-03-24T01:30:00.000Z","_content":"\n## 基本指令\n\n裝完後預設工作環境為base。\n\n### 版號說明\n\nMAIN.MINOR.PATCH (e.g., Python 3.11.0, conda 22.9.0)\n\n### conda相關\n```console\n$ conda --version                           # 檢視目前conda版本\n$ conda --help                              # 查看conda指令說明文件\n$ conda info                                # 查看當下工作環境設定\n$ conda config --add channels conda-forge   # 增加套件下載通道至.condarc\n```\n\n### 安裝套件\n\n- 透過conda方式：\n```console\n$ conda install <套件名稱>\n$ conda install <套件名稱> -n <指定環境>\n\n$ conda list -e > <套件列表檔案>                            # 輸出套件列表（非階層式）\n$ conda env export -n <環境名稱> -f <環境名稱>.yml          # 輸出環境套件階層列表\n$ conda env create --name <環境名稱> --file <套件列表檔案>  # 安裝套件列表\n```\n\n- 透過pip方式：\n```console\n$ pip install <套件名稱>\n\n$ pip freeze -l > <套件列表檔案>  # 輸出套件列表\n$ pip install -r <套件列表檔案>   # 安裝套件列表\n  --force-reinstall\n  --ignore-installed\n```\n\n\n### 套件相關\n\n```console\n  -e, --export > 檔案名稱   # 輸出檔案\n  -n, --name 環境名稱\n  -p, --prefix 環境路徑\n  --json                    # 輸出成json檔\n```\n\n```console\n$ conda list                                # 列出當下工作環境下所有套件\n$ conda list -n <環境名稱>                  # 列出該工作環境下所有套件\n$ conda list [正規表示式]                   # 列出當下工作環境下部分套件\n$ conda list -e > <檔案名稱>                # 輸出給conda create --file\n$ conda update <套件名稱>                   # 更新指定套件\n$ conda update --all                        # 更新全部套件\n$ conda remove <套件名稱>                   # 移除當下工作環境下之套件\n$ conda remove -n <環境名稱> <套件名稱>     # 移除指定工作環境下之套件\n```\n\n### 虛擬工作環境相關\n```console\n$ conda create -n <環境名稱> <套件名稱=版本>        # 建立新的工作環境\n$ conda remove -n <環境名稱> <套件名稱>             # 移除指定工作環境下之套件\n$ conda remove -n <環境名稱> --all                  # 移除指定工作環境\n$ conda rename -n <原環境名稱> <新環境名稱>         # 更名指定工作環境\n$ conda env list                                    # 列出有哪些工作環境\n$ conda env export -n <環境名稱> -f <環境名稱>.yml  # 輸出該工作環境套件列表\n$ conda activate [環境名稱]                         # 啟動工作環境，未指定預設為base\n$ conda deactivate                                  # 停用工作環境\n```\n\n建立新的工作環境，可自行指定安裝某Python版本，例如：\n\n```console\n$ conda create -n my_env python=3.9\n```\n\n## 設定proxy\n\n由於氣象局內有專用Proxy設定，如要順利連網下載安裝、更新，必須使用以下設定：\n\n### Linux\n\n```console\n$ export http_proxy=http://proxy.cwb.gov.tw:8888\n$ export https_proxy=http://proxy.cwb.gov.tw:8888\n```\n\n### Windows\n\n```console\n> set http_proxy=http://proxy.cwb.gov.tw:8888\n> set https_proxy=http://proxy.cwb.gov.tw:8888\n```\n\n以上設定僅在該次登入有效，如要在下次登入也能沿用此次設定，必須寫入家目錄下的.bashrc設定（Linux）／環境變數（Windows）。\n\n以Windows 10為例，環境變數設定在：\n\n**控制台>系統及安全性>系統>進階系統設定>進階>環境變數>系統變數>新增**\n\n| 變數          | 值                           |\n| :------------ | :--------------------------- |\n| HTTP_PROXY    | http://proxy.cwb.gov.tw:8888 |\n| HTTPS_PROXY   | http://proxy.cwb.gov.tw:8888 |\n\nWindows系統變數不區分大小寫。\n\n\n## 環境遷移\n### 方式一：打包帶走\n\n首先須先在要打包的環境中安裝conda-pack套件，以使用`conda pack`及`conda unpack`指令來打包及解包。\n\n```console\n$ conda install -c conda-forge conda-pack   # 安裝conda-pack套件\n```\n\n接著選擇要打包的工作環境，打包產生`<環境名稱>.tar.gz`檔。再利用tar在欲放置工作環境之目錄解包。\n\n> 確認來源與目的系統環境同為Windows或Linux。\n\n```console\n$ conda pack -n <環境名稱> --ignore-editable-packages   # 打包／壓縮\n$ mkdir -p <目錄名稱>                           # 新增欲放置工作環境之目錄\n$ tar -xzf <環境名稱>.tar.gz -C <目錄名稱>  # 解壓縮／解包\n```\n\n解包後便可以啟動工作環境了，啟動後還需要再一步`conda unpack`。\n\n```console\n$ conda activate <環境名稱>\n(<環境名稱>) $ conda unpack # 或conda-unpack\n```\n\n這一步非常關鍵，否則會導致遷移失敗。至此，conda環境遷移結束。\n\n### 方式二：從清單安裝\n```console\n$ conda env export -n <環境名稱> -f <套件清單檔案(.yml)>    # 輸出環境套件階層清單yaml檔案\n$ conda env create -n <環境名稱> -f <套件清單檔案(.yml)>    # 從清單安裝套件\n```\n\n## 參考資料\n\n- https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025","source":"_posts/Anaconda安裝套件說明.md","raw":"---\ntitle: Anaconda安裝套件說明\ncategories: [Anaconda , Python]\ntags: [Anaconda , Python]\ndate: 2023/03/16 11:04\nupdated: 2023/03/24 09:30\n---\n\n## 基本指令\n\n裝完後預設工作環境為base。\n\n### 版號說明\n\nMAIN.MINOR.PATCH (e.g., Python 3.11.0, conda 22.9.0)\n\n### conda相關\n```console\n$ conda --version                           # 檢視目前conda版本\n$ conda --help                              # 查看conda指令說明文件\n$ conda info                                # 查看當下工作環境設定\n$ conda config --add channels conda-forge   # 增加套件下載通道至.condarc\n```\n\n### 安裝套件\n\n- 透過conda方式：\n```console\n$ conda install <套件名稱>\n$ conda install <套件名稱> -n <指定環境>\n\n$ conda list -e > <套件列表檔案>                            # 輸出套件列表（非階層式）\n$ conda env export -n <環境名稱> -f <環境名稱>.yml          # 輸出環境套件階層列表\n$ conda env create --name <環境名稱> --file <套件列表檔案>  # 安裝套件列表\n```\n\n- 透過pip方式：\n```console\n$ pip install <套件名稱>\n\n$ pip freeze -l > <套件列表檔案>  # 輸出套件列表\n$ pip install -r <套件列表檔案>   # 安裝套件列表\n  --force-reinstall\n  --ignore-installed\n```\n\n\n### 套件相關\n\n```console\n  -e, --export > 檔案名稱   # 輸出檔案\n  -n, --name 環境名稱\n  -p, --prefix 環境路徑\n  --json                    # 輸出成json檔\n```\n\n```console\n$ conda list                                # 列出當下工作環境下所有套件\n$ conda list -n <環境名稱>                  # 列出該工作環境下所有套件\n$ conda list [正規表示式]                   # 列出當下工作環境下部分套件\n$ conda list -e > <檔案名稱>                # 輸出給conda create --file\n$ conda update <套件名稱>                   # 更新指定套件\n$ conda update --all                        # 更新全部套件\n$ conda remove <套件名稱>                   # 移除當下工作環境下之套件\n$ conda remove -n <環境名稱> <套件名稱>     # 移除指定工作環境下之套件\n```\n\n### 虛擬工作環境相關\n```console\n$ conda create -n <環境名稱> <套件名稱=版本>        # 建立新的工作環境\n$ conda remove -n <環境名稱> <套件名稱>             # 移除指定工作環境下之套件\n$ conda remove -n <環境名稱> --all                  # 移除指定工作環境\n$ conda rename -n <原環境名稱> <新環境名稱>         # 更名指定工作環境\n$ conda env list                                    # 列出有哪些工作環境\n$ conda env export -n <環境名稱> -f <環境名稱>.yml  # 輸出該工作環境套件列表\n$ conda activate [環境名稱]                         # 啟動工作環境，未指定預設為base\n$ conda deactivate                                  # 停用工作環境\n```\n\n建立新的工作環境，可自行指定安裝某Python版本，例如：\n\n```console\n$ conda create -n my_env python=3.9\n```\n\n## 設定proxy\n\n由於氣象局內有專用Proxy設定，如要順利連網下載安裝、更新，必須使用以下設定：\n\n### Linux\n\n```console\n$ export http_proxy=http://proxy.cwb.gov.tw:8888\n$ export https_proxy=http://proxy.cwb.gov.tw:8888\n```\n\n### Windows\n\n```console\n> set http_proxy=http://proxy.cwb.gov.tw:8888\n> set https_proxy=http://proxy.cwb.gov.tw:8888\n```\n\n以上設定僅在該次登入有效，如要在下次登入也能沿用此次設定，必須寫入家目錄下的.bashrc設定（Linux）／環境變數（Windows）。\n\n以Windows 10為例，環境變數設定在：\n\n**控制台>系統及安全性>系統>進階系統設定>進階>環境變數>系統變數>新增**\n\n| 變數          | 值                           |\n| :------------ | :--------------------------- |\n| HTTP_PROXY    | http://proxy.cwb.gov.tw:8888 |\n| HTTPS_PROXY   | http://proxy.cwb.gov.tw:8888 |\n\nWindows系統變數不區分大小寫。\n\n\n## 環境遷移\n### 方式一：打包帶走\n\n首先須先在要打包的環境中安裝conda-pack套件，以使用`conda pack`及`conda unpack`指令來打包及解包。\n\n```console\n$ conda install -c conda-forge conda-pack   # 安裝conda-pack套件\n```\n\n接著選擇要打包的工作環境，打包產生`<環境名稱>.tar.gz`檔。再利用tar在欲放置工作環境之目錄解包。\n\n> 確認來源與目的系統環境同為Windows或Linux。\n\n```console\n$ conda pack -n <環境名稱> --ignore-editable-packages   # 打包／壓縮\n$ mkdir -p <目錄名稱>                           # 新增欲放置工作環境之目錄\n$ tar -xzf <環境名稱>.tar.gz -C <目錄名稱>  # 解壓縮／解包\n```\n\n解包後便可以啟動工作環境了，啟動後還需要再一步`conda unpack`。\n\n```console\n$ conda activate <環境名稱>\n(<環境名稱>) $ conda unpack # 或conda-unpack\n```\n\n這一步非常關鍵，否則會導致遷移失敗。至此，conda環境遷移結束。\n\n### 方式二：從清單安裝\n```console\n$ conda env export -n <環境名稱> -f <套件清單檔案(.yml)>    # 輸出環境套件階層清單yaml檔案\n$ conda env create -n <環境名稱> -f <套件清單檔案(.yml)>    # 從清單安裝套件\n```\n\n## 參考資料\n\n- https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025","slug":"Anaconda安裝套件說明","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr130002v47fg9ivgly0","content":"<h2 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h2><p>裝完後預設工作環境為base。</p>\n<h3 id=\"版號說明\"><a href=\"#版號說明\" class=\"headerlink\" title=\"版號說明\"></a>版號說明</h3><p>MAIN.MINOR.PATCH (e.g., Python 3.11.0, conda 22.9.0)</p>\n<h3 id=\"conda相關\"><a href=\"#conda相關\" class=\"headerlink\" title=\"conda相關\"></a>conda相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda --version                           <span class=\"hljs-comment\"># 檢視目前conda版本</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda --<span class=\"hljs-built_in\">help</span>                              <span class=\"hljs-comment\"># 查看conda指令說明文件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda info                                <span class=\"hljs-comment\"># 查看當下工作環境設定</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda config --add channels conda-forge   <span class=\"hljs-comment\"># 增加套件下載通道至.condarc</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h3><ul>\n<li><p>透過conda方式：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install &lt;套件名稱&gt;</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install &lt;套件名稱&gt; -n &lt;指定環境&gt;</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -e &gt; &lt;套件列表檔案&gt;                            <span class=\"hljs-comment\"># 輸出套件列表（非階層式）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;環境名稱&gt;.yml          <span class=\"hljs-comment\"># 輸出環境套件階層列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> create --name &lt;環境名稱&gt; --file &lt;套件列表檔案&gt;  <span class=\"hljs-comment\"># 安裝套件列表</span></span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>透過pip方式：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install &lt;套件名稱&gt;</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip freeze -l &gt; &lt;套件列表檔案&gt;  <span class=\"hljs-comment\"># 輸出套件列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install -r &lt;套件列表檔案&gt;   <span class=\"hljs-comment\"># 安裝套件列表</span></span><br>  --force-reinstall<br>  --ignore-installed<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"套件相關\"><a href=\"#套件相關\" class=\"headerlink\" title=\"套件相關\"></a>套件相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\">-e, --export &gt; 檔案名稱   # 輸出檔案<br>-n, --name 環境名稱<br>-p, --prefix 環境路徑<br>--json                    # 輸出成json檔<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list                                <span class=\"hljs-comment\"># 列出當下工作環境下所有套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -n &lt;環境名稱&gt;                  <span class=\"hljs-comment\"># 列出該工作環境下所有套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list [正規表示式]                   <span class=\"hljs-comment\"># 列出當下工作環境下部分套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -e &gt; &lt;檔案名稱&gt;                <span class=\"hljs-comment\"># 輸出給conda create --file</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda update &lt;套件名稱&gt;                   <span class=\"hljs-comment\"># 更新指定套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda update --all                        <span class=\"hljs-comment\"># 更新全部套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove &lt;套件名稱&gt;                   <span class=\"hljs-comment\"># 移除當下工作環境下之套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; &lt;套件名稱&gt;     <span class=\"hljs-comment\"># 移除指定工作環境下之套件</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虛擬工作環境相關\"><a href=\"#虛擬工作環境相關\" class=\"headerlink\" title=\"虛擬工作環境相關\"></a>虛擬工作環境相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda create -n &lt;環境名稱&gt; &lt;套件名稱=版本&gt;        <span class=\"hljs-comment\"># 建立新的工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; &lt;套件名稱&gt;             <span class=\"hljs-comment\"># 移除指定工作環境下之套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; --all                  <span class=\"hljs-comment\"># 移除指定工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda rename -n &lt;原環境名稱&gt; &lt;新環境名稱&gt;         <span class=\"hljs-comment\"># 更名指定工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> list                                    <span class=\"hljs-comment\"># 列出有哪些工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;環境名稱&gt;.yml  <span class=\"hljs-comment\"># 輸出該工作環境套件列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda activate [環境名稱]                         <span class=\"hljs-comment\"># 啟動工作環境，未指定預設為base</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda deactivate                                  <span class=\"hljs-comment\"># 停用工作環境</span></span><br></code></pre></td></tr></table></figure>\n\n<p>建立新的工作環境，可自行指定安裝某Python版本，例如：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda create -n my_env python=3.9</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"設定proxy\"><a href=\"#設定proxy\" class=\"headerlink\" title=\"設定proxy\"></a>設定proxy</h2><p>由於氣象局內有專用Proxy設定，如要順利連網下載安裝、更新，必須使用以下設定：</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> http_proxy=http://proxy.cwb.gov.tw:8888</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> https_proxy=http://proxy.cwb.gov.tw:8888</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span> http_proxy=http://proxy.cwb.gov.tw:8888</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span> https_proxy=http://proxy.cwb.gov.tw:8888</span><br></code></pre></td></tr></table></figure>\n\n<p>以上設定僅在該次登入有效，如要在下次登入也能沿用此次設定，必須寫入家目錄下的.bashrc設定（Linux）／環境變數（Windows）。</p>\n<p>以Windows 10為例，環境變數設定在：</p>\n<p><strong>控制台&gt;系統及安全性&gt;系統&gt;進階系統設定&gt;進階&gt;環境變數&gt;系統變數&gt;新增</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">變數</th>\n<th align=\"left\">值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HTTP_PROXY</td>\n<td align=\"left\"><a href=\"http://proxy.cwb.gov.tw:8888/\">http://proxy.cwb.gov.tw:8888</a></td>\n</tr>\n<tr>\n<td align=\"left\">HTTPS_PROXY</td>\n<td align=\"left\"><a href=\"http://proxy.cwb.gov.tw:8888/\">http://proxy.cwb.gov.tw:8888</a></td>\n</tr>\n</tbody></table>\n<p>Windows系統變數不區分大小寫。</p>\n<h2 id=\"環境遷移\"><a href=\"#環境遷移\" class=\"headerlink\" title=\"環境遷移\"></a>環境遷移</h2><h3 id=\"方式一：打包帶走\"><a href=\"#方式一：打包帶走\" class=\"headerlink\" title=\"方式一：打包帶走\"></a>方式一：打包帶走</h3><p>首先須先在要打包的環境中安裝conda-pack套件，以使用<code>conda pack</code>及<code>conda unpack</code>指令來打包及解包。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install -c conda-forge conda-pack   <span class=\"hljs-comment\"># 安裝conda-pack套件</span></span><br></code></pre></td></tr></table></figure>\n\n<p>接著選擇要打包的工作環境，打包產生<code>&lt;環境名稱&gt;.tar.gz</code>檔。再利用tar在欲放置工作環境之目錄解包。</p>\n<blockquote>\n<p>確認來源與目的系統環境同為Windows或Linux。</p>\n</blockquote>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda pack -n &lt;環境名稱&gt; --ignore-editable-packages   <span class=\"hljs-comment\"># 打包／壓縮</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mkdir</span> -p &lt;目錄名稱&gt;                           <span class=\"hljs-comment\"># 新增欲放置工作環境之目錄</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">tar -xzf &lt;環境名稱&gt;.tar.gz -C &lt;目錄名稱&gt;  <span class=\"hljs-comment\"># 解壓縮／解包</span></span><br></code></pre></td></tr></table></figure>\n\n<p>解包後便可以啟動工作環境了，啟動後還需要再一步<code>conda unpack</code>。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda activate &lt;環境名稱&gt;</span><br>(&lt;環境名稱&gt;) $ conda unpack # 或conda-unpack<br></code></pre></td></tr></table></figure>\n\n<p>這一步非常關鍵，否則會導致遷移失敗。至此，conda環境遷移結束。</p>\n<h3 id=\"方式二：從清單安裝\"><a href=\"#方式二：從清單安裝\" class=\"headerlink\" title=\"方式二：從清單安裝\"></a>方式二：從清單安裝</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;套件清單檔案(.yml)&gt;    <span class=\"hljs-comment\"># 輸出環境套件階層清單yaml檔案</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> create -n &lt;環境名稱&gt; -f &lt;套件清單檔案(.yml)&gt;    <span class=\"hljs-comment\"># 從清單安裝套件</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025\">https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"基本指令\"><a href=\"#基本指令\" class=\"headerlink\" title=\"基本指令\"></a>基本指令</h2><p>裝完後預設工作環境為base。</p>\n<h3 id=\"版號說明\"><a href=\"#版號說明\" class=\"headerlink\" title=\"版號說明\"></a>版號說明</h3><p>MAIN.MINOR.PATCH (e.g., Python 3.11.0, conda 22.9.0)</p>\n<h3 id=\"conda相關\"><a href=\"#conda相關\" class=\"headerlink\" title=\"conda相關\"></a>conda相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda --version                           <span class=\"hljs-comment\"># 檢視目前conda版本</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda --<span class=\"hljs-built_in\">help</span>                              <span class=\"hljs-comment\"># 查看conda指令說明文件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda info                                <span class=\"hljs-comment\"># 查看當下工作環境設定</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda config --add channels conda-forge   <span class=\"hljs-comment\"># 增加套件下載通道至.condarc</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h3><ul>\n<li><p>透過conda方式：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install &lt;套件名稱&gt;</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install &lt;套件名稱&gt; -n &lt;指定環境&gt;</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -e &gt; &lt;套件列表檔案&gt;                            <span class=\"hljs-comment\"># 輸出套件列表（非階層式）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;環境名稱&gt;.yml          <span class=\"hljs-comment\"># 輸出環境套件階層列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> create --name &lt;環境名稱&gt; --file &lt;套件列表檔案&gt;  <span class=\"hljs-comment\"># 安裝套件列表</span></span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>透過pip方式：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install &lt;套件名稱&gt;</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip freeze -l &gt; &lt;套件列表檔案&gt;  <span class=\"hljs-comment\"># 輸出套件列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install -r &lt;套件列表檔案&gt;   <span class=\"hljs-comment\"># 安裝套件列表</span></span><br>  --force-reinstall<br>  --ignore-installed<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"套件相關\"><a href=\"#套件相關\" class=\"headerlink\" title=\"套件相關\"></a>套件相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\">-e, --export &gt; 檔案名稱   # 輸出檔案<br>-n, --name 環境名稱<br>-p, --prefix 環境路徑<br>--json                    # 輸出成json檔<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list                                <span class=\"hljs-comment\"># 列出當下工作環境下所有套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -n &lt;環境名稱&gt;                  <span class=\"hljs-comment\"># 列出該工作環境下所有套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list [正規表示式]                   <span class=\"hljs-comment\"># 列出當下工作環境下部分套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda list -e &gt; &lt;檔案名稱&gt;                <span class=\"hljs-comment\"># 輸出給conda create --file</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda update &lt;套件名稱&gt;                   <span class=\"hljs-comment\"># 更新指定套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda update --all                        <span class=\"hljs-comment\"># 更新全部套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove &lt;套件名稱&gt;                   <span class=\"hljs-comment\"># 移除當下工作環境下之套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; &lt;套件名稱&gt;     <span class=\"hljs-comment\"># 移除指定工作環境下之套件</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"虛擬工作環境相關\"><a href=\"#虛擬工作環境相關\" class=\"headerlink\" title=\"虛擬工作環境相關\"></a>虛擬工作環境相關</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda create -n &lt;環境名稱&gt; &lt;套件名稱=版本&gt;        <span class=\"hljs-comment\"># 建立新的工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; &lt;套件名稱&gt;             <span class=\"hljs-comment\"># 移除指定工作環境下之套件</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda remove -n &lt;環境名稱&gt; --all                  <span class=\"hljs-comment\"># 移除指定工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda rename -n &lt;原環境名稱&gt; &lt;新環境名稱&gt;         <span class=\"hljs-comment\"># 更名指定工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> list                                    <span class=\"hljs-comment\"># 列出有哪些工作環境</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;環境名稱&gt;.yml  <span class=\"hljs-comment\"># 輸出該工作環境套件列表</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda activate [環境名稱]                         <span class=\"hljs-comment\"># 啟動工作環境，未指定預設為base</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda deactivate                                  <span class=\"hljs-comment\"># 停用工作環境</span></span><br></code></pre></td></tr></table></figure>\n\n<p>建立新的工作環境，可自行指定安裝某Python版本，例如：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda create -n my_env python=3.9</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"設定proxy\"><a href=\"#設定proxy\" class=\"headerlink\" title=\"設定proxy\"></a>設定proxy</h2><p>由於氣象局內有專用Proxy設定，如要順利連網下載安裝、更新，必須使用以下設定：</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> http_proxy=http://proxy.cwb.gov.tw:8888</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">export</span> https_proxy=http://proxy.cwb.gov.tw:8888</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span> http_proxy=http://proxy.cwb.gov.tw:8888</span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\"><span class=\"hljs-built_in\">set</span> https_proxy=http://proxy.cwb.gov.tw:8888</span><br></code></pre></td></tr></table></figure>\n\n<p>以上設定僅在該次登入有效，如要在下次登入也能沿用此次設定，必須寫入家目錄下的.bashrc設定（Linux）／環境變數（Windows）。</p>\n<p>以Windows 10為例，環境變數設定在：</p>\n<p><strong>控制台&gt;系統及安全性&gt;系統&gt;進階系統設定&gt;進階&gt;環境變數&gt;系統變數&gt;新增</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">變數</th>\n<th align=\"left\">值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">HTTP_PROXY</td>\n<td align=\"left\"><a href=\"http://proxy.cwb.gov.tw:8888/\">http://proxy.cwb.gov.tw:8888</a></td>\n</tr>\n<tr>\n<td align=\"left\">HTTPS_PROXY</td>\n<td align=\"left\"><a href=\"http://proxy.cwb.gov.tw:8888/\">http://proxy.cwb.gov.tw:8888</a></td>\n</tr>\n</tbody></table>\n<p>Windows系統變數不區分大小寫。</p>\n<h2 id=\"環境遷移\"><a href=\"#環境遷移\" class=\"headerlink\" title=\"環境遷移\"></a>環境遷移</h2><h3 id=\"方式一：打包帶走\"><a href=\"#方式一：打包帶走\" class=\"headerlink\" title=\"方式一：打包帶走\"></a>方式一：打包帶走</h3><p>首先須先在要打包的環境中安裝conda-pack套件，以使用<code>conda pack</code>及<code>conda unpack</code>指令來打包及解包。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda install -c conda-forge conda-pack   <span class=\"hljs-comment\"># 安裝conda-pack套件</span></span><br></code></pre></td></tr></table></figure>\n\n<p>接著選擇要打包的工作環境，打包產生<code>&lt;環境名稱&gt;.tar.gz</code>檔。再利用tar在欲放置工作環境之目錄解包。</p>\n<blockquote>\n<p>確認來源與目的系統環境同為Windows或Linux。</p>\n</blockquote>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda pack -n &lt;環境名稱&gt; --ignore-editable-packages   <span class=\"hljs-comment\"># 打包／壓縮</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">mkdir</span> -p &lt;目錄名稱&gt;                           <span class=\"hljs-comment\"># 新增欲放置工作環境之目錄</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">tar -xzf &lt;環境名稱&gt;.tar.gz -C &lt;目錄名稱&gt;  <span class=\"hljs-comment\"># 解壓縮／解包</span></span><br></code></pre></td></tr></table></figure>\n\n<p>解包後便可以啟動工作環境了，啟動後還需要再一步<code>conda unpack</code>。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda activate &lt;環境名稱&gt;</span><br>(&lt;環境名稱&gt;) $ conda unpack # 或conda-unpack<br></code></pre></td></tr></table></figure>\n\n<p>這一步非常關鍵，否則會導致遷移失敗。至此，conda環境遷移結束。</p>\n<h3 id=\"方式二：從清單安裝\"><a href=\"#方式二：從清單安裝\" class=\"headerlink\" title=\"方式二：從清單安裝\"></a>方式二：從清單安裝</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> <span class=\"hljs-built_in\">export</span> -n &lt;環境名稱&gt; -f &lt;套件清單檔案(.yml)&gt;    <span class=\"hljs-comment\"># 輸出環境套件階層清單yaml檔案</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">conda <span class=\"hljs-built_in\">env</span> create -n &lt;環境名稱&gt; -f &lt;套件清單檔案(.yml)&gt;    <span class=\"hljs-comment\"># 從清單安裝套件</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025\">https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025</a></li>\n</ul>\n"},{"title":"Django3架站實戰筆記","date":"2023-01-18T08:45:00.000Z","updated":"2023-07-07T04:00:00.000Z","_content":"\n# 常用指令\n\n```console\n> django-admin startproject <專案名稱>      # 建立專案\n> python manage.py startapp <應用程式名稱>  # 新增應用程式\n> python manage.py makemigrations           # 建立資料檔\n> python manage.py migrate                  # 同步模型與資料庫\n> python manage.py runserver                # 啟動server\n> python manage.py createsuperuser          # 建立superuser\n> python manage.py changepassword admin     # 修改admin密碼\n```\n\n# 安裝與建立專案、應用程式\n\n## 安裝Django套件\n\n```console\n> conda install django\n```\n\n## 建立Django專案\n\n```console\n> django-admin startproject <專案名稱>\n```\n\n建立專案之後，會在該目錄下建立兩層<專案名稱>的目錄，<專案名稱>以project1為例：\n\n- \\project1 - 專案主目錄\n  - manage.py - 專案管理（建立app、啟動server和Shell）\n  - \\project1 - 專案設定\n    - \\_\\_init\\_\\_.py\n    - asgi.py - asgi伺服器和Django介面設定檔\n    - settings.py - 專案設定檔\n    - urls.py - url配置檔\n    - wsgi.py - 網頁伺服器和Django介面設定檔\n\n## 建立Application應用程式\n\n```console\n> python manage.py startapp <應用程式名稱>\n```\n\n建立應用程式之後，會在第一層project1目錄下建立<應用程式名稱>目錄，<應用程式名稱>以app1為例：\n\n- \\project1\n  - manage.py\n  - \\project1\n  - \\app1 - 應用程式\n    - \\migrations - 資料表架構、版本紀錄\n    - admin.py\n    - apps.py\n    - models.py\n    - tests.py\n    - views.py\n\n### 建立必要目錄\n\n- \\project1\n  - manage.py\n  - \\project1\n  - \\app1\n  - \\templates - 放置模板(.html檔)\n  - \\static - 放置靜態檔案\n    - \\css\n    - \\js\n    - \\img\n\n### 建立migration資料檔\n\n```console\n> python manage.py makemigrations\n```\n\n### 模型與資料庫同步\n\n```console\n> python manage.py migrate\n```\n\n會在專案目錄下建立`db.sqlite3`檔。\n\n### 啟動server\n\n```console\n> python manage.py runserver\n```\n\n## 環境設定\n\n```python\nBASE_DIR = Path(__file__).resolve().parent.parent\nDEBUG = True\nALLOWED_HOSTS = []  # 若關閉除錯模式，則需指定該參數\nINSTALLED_APPS = [\n  ...\n  'app1'            # 新增建立的應用程式\n]\nTEMPLATES = [\n  {\n    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n    \"DIRS\": [BASE_DIR / 'templates'],  # 指定模板路徑\n        \"APP_DIRS\": True,\n        ...\n  },\n]\nLANGUAGE_CODE = \"zh-hant\"   # 改為繁體中文\nTIME_ZONE = \"Asia/Taipei\"   # 改為臺北時區\nSTATICFILES_DIRS = [        # 加入static路徑\n    BASE_DIR / \"static\",\n]\n```\n\n### 更改資料庫\n\n可使用PostgreSQL、MariaDB、MySQL或Oracle。\n\n以MySQL為例：\n\n1. [安裝MySQL Server](https://dev.mysql.com/downloads/mysql/)。\n2. [安裝步驟說明](https://blog.hungwin.com.tw/windows-server-mysql-community-install/)。\n\n安裝完請先確定MySQL Server是否有新增至環境變數。\n\n- 登入MySQL：\n\n  ```console\n  > mysql -u 使用者帳號 -p\n  Enter password: ********\n  ```\n\n- 常用SQL指令：\n\n  ```sql\n  mysql> SELECT VERSION();  /* 檢查資料庫版本 */\n  mysql> SELECT USER();     /* 檢查目前登入使用者 */\n  mysql> SHOW ENGINES \\G    /* 顯示目前資料庫支援的儲存引擎 */\n\n  mysql> CREATE DATABASE 資料庫名稱   /* 建立資料庫 */\n  mysql> USE 資料庫名稱               /* 進入資料庫 */\n  mysql> DROP DATABASE 資料庫名稱     /* 移除資料庫 */\n  ```\n\n原有環境資料庫設定為SQLite3：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\", # 預設\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n```\n\n改為MySQL的設定：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": \"資料庫名稱\",\n        \"USER\": \"使用者名稱\",\n        \"PASSWORD\": \"密碼\",\n        \"HOST\": \"localhost\",\n        \"PORT\": \"3306\",\n    }\n}\n```\n\n或使用配置檔：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"OPTIONS\": {\n            \"read_default_file\": \"配置檔路徑(my.cnf)\",\n        },\n    }\n}\n```\n\n```my.cnf\n[client]\nhost = localhost\ndatabase = 資料庫名稱\nuser = 使用者名稱\npassword = 密碼\ndefault-character-set = utf8\nport = 3306\n```\n\n# 參考資料\n\n1. https://blog.hungwin.com.tw/windows-server-mysql-community-install/","source":"_posts/Django3架站實戰筆記.md","raw":"---\ntitle: Django3架站實戰筆記\ncategories: [Django , Python]\ntags: [Django , Python]\ndate: 2023/01/18 16:45\nupdated: 2023/07/07 12:00\n---\n\n# 常用指令\n\n```console\n> django-admin startproject <專案名稱>      # 建立專案\n> python manage.py startapp <應用程式名稱>  # 新增應用程式\n> python manage.py makemigrations           # 建立資料檔\n> python manage.py migrate                  # 同步模型與資料庫\n> python manage.py runserver                # 啟動server\n> python manage.py createsuperuser          # 建立superuser\n> python manage.py changepassword admin     # 修改admin密碼\n```\n\n# 安裝與建立專案、應用程式\n\n## 安裝Django套件\n\n```console\n> conda install django\n```\n\n## 建立Django專案\n\n```console\n> django-admin startproject <專案名稱>\n```\n\n建立專案之後，會在該目錄下建立兩層<專案名稱>的目錄，<專案名稱>以project1為例：\n\n- \\project1 - 專案主目錄\n  - manage.py - 專案管理（建立app、啟動server和Shell）\n  - \\project1 - 專案設定\n    - \\_\\_init\\_\\_.py\n    - asgi.py - asgi伺服器和Django介面設定檔\n    - settings.py - 專案設定檔\n    - urls.py - url配置檔\n    - wsgi.py - 網頁伺服器和Django介面設定檔\n\n## 建立Application應用程式\n\n```console\n> python manage.py startapp <應用程式名稱>\n```\n\n建立應用程式之後，會在第一層project1目錄下建立<應用程式名稱>目錄，<應用程式名稱>以app1為例：\n\n- \\project1\n  - manage.py\n  - \\project1\n  - \\app1 - 應用程式\n    - \\migrations - 資料表架構、版本紀錄\n    - admin.py\n    - apps.py\n    - models.py\n    - tests.py\n    - views.py\n\n### 建立必要目錄\n\n- \\project1\n  - manage.py\n  - \\project1\n  - \\app1\n  - \\templates - 放置模板(.html檔)\n  - \\static - 放置靜態檔案\n    - \\css\n    - \\js\n    - \\img\n\n### 建立migration資料檔\n\n```console\n> python manage.py makemigrations\n```\n\n### 模型與資料庫同步\n\n```console\n> python manage.py migrate\n```\n\n會在專案目錄下建立`db.sqlite3`檔。\n\n### 啟動server\n\n```console\n> python manage.py runserver\n```\n\n## 環境設定\n\n```python\nBASE_DIR = Path(__file__).resolve().parent.parent\nDEBUG = True\nALLOWED_HOSTS = []  # 若關閉除錯模式，則需指定該參數\nINSTALLED_APPS = [\n  ...\n  'app1'            # 新增建立的應用程式\n]\nTEMPLATES = [\n  {\n    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n    \"DIRS\": [BASE_DIR / 'templates'],  # 指定模板路徑\n        \"APP_DIRS\": True,\n        ...\n  },\n]\nLANGUAGE_CODE = \"zh-hant\"   # 改為繁體中文\nTIME_ZONE = \"Asia/Taipei\"   # 改為臺北時區\nSTATICFILES_DIRS = [        # 加入static路徑\n    BASE_DIR / \"static\",\n]\n```\n\n### 更改資料庫\n\n可使用PostgreSQL、MariaDB、MySQL或Oracle。\n\n以MySQL為例：\n\n1. [安裝MySQL Server](https://dev.mysql.com/downloads/mysql/)。\n2. [安裝步驟說明](https://blog.hungwin.com.tw/windows-server-mysql-community-install/)。\n\n安裝完請先確定MySQL Server是否有新增至環境變數。\n\n- 登入MySQL：\n\n  ```console\n  > mysql -u 使用者帳號 -p\n  Enter password: ********\n  ```\n\n- 常用SQL指令：\n\n  ```sql\n  mysql> SELECT VERSION();  /* 檢查資料庫版本 */\n  mysql> SELECT USER();     /* 檢查目前登入使用者 */\n  mysql> SHOW ENGINES \\G    /* 顯示目前資料庫支援的儲存引擎 */\n\n  mysql> CREATE DATABASE 資料庫名稱   /* 建立資料庫 */\n  mysql> USE 資料庫名稱               /* 進入資料庫 */\n  mysql> DROP DATABASE 資料庫名稱     /* 移除資料庫 */\n  ```\n\n原有環境資料庫設定為SQLite3：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\", # 預設\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n```\n\n改為MySQL的設定：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": \"資料庫名稱\",\n        \"USER\": \"使用者名稱\",\n        \"PASSWORD\": \"密碼\",\n        \"HOST\": \"localhost\",\n        \"PORT\": \"3306\",\n    }\n}\n```\n\n或使用配置檔：\n\n```python\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"OPTIONS\": {\n            \"read_default_file\": \"配置檔路徑(my.cnf)\",\n        },\n    }\n}\n```\n\n```my.cnf\n[client]\nhost = localhost\ndatabase = 資料庫名稱\nuser = 使用者名稱\npassword = 密碼\ndefault-character-set = utf8\nport = 3306\n```\n\n# 參考資料\n\n1. https://blog.hungwin.com.tw/windows-server-mysql-community-install/","slug":"Django3架站實戰筆記","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr130003v47fb4y79hjz","content":"<h1 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h1><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">django-admin startproject &lt;專案名稱&gt;      <span class=\"hljs-comment\"># 建立專案</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py startapp &lt;應用程式名稱&gt;  <span class=\"hljs-comment\"># 新增應用程式</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py makemigrations           <span class=\"hljs-comment\"># 建立資料檔</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py migrate                  <span class=\"hljs-comment\"># 同步模型與資料庫</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py runserver                <span class=\"hljs-comment\"># 啟動server</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py createsuperuser          <span class=\"hljs-comment\"># 建立superuser</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py changepassword admin     <span class=\"hljs-comment\"># 修改admin密碼</span></span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"安裝與建立專案、應用程式\"><a href=\"#安裝與建立專案、應用程式\" class=\"headerlink\" title=\"安裝與建立專案、應用程式\"></a>安裝與建立專案、應用程式</h1><h2 id=\"安裝Django套件\"><a href=\"#安裝Django套件\" class=\"headerlink\" title=\"安裝Django套件\"></a>安裝Django套件</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">conda install django</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"建立Django專案\"><a href=\"#建立Django專案\" class=\"headerlink\" title=\"建立Django專案\"></a>建立Django專案</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">django-admin startproject &lt;專案名稱&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立專案之後，會在該目錄下建立兩層&lt;專案名稱&gt;的目錄，&lt;專案名稱&gt;以project1為例：</p>\n<ul>\n<li>\\project1 - 專案主目錄<ul>\n<li>manage.py - 專案管理（建立app、啟動server和Shell）</li>\n<li>\\project1 - 專案設定<ul>\n<li>__init__.py</li>\n<li>asgi.py - asgi伺服器和Django介面設定檔</li>\n<li>settings.py - 專案設定檔</li>\n<li>urls.py - url配置檔</li>\n<li>wsgi.py - 網頁伺服器和Django介面設定檔</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建立Application應用程式\"><a href=\"#建立Application應用程式\" class=\"headerlink\" title=\"建立Application應用程式\"></a>建立Application應用程式</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py startapp &lt;應用程式名稱&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立應用程式之後，會在第一層project1目錄下建立&lt;應用程式名稱&gt;目錄，&lt;應用程式名稱&gt;以app1為例：</p>\n<ul>\n<li>\\project1<ul>\n<li>manage.py</li>\n<li>\\project1</li>\n<li>\\app1 - 應用程式<ul>\n<li>\\migrations - 資料表架構、版本紀錄</li>\n<li>admin.py</li>\n<li>apps.py</li>\n<li>models.py</li>\n<li>tests.py</li>\n<li>views.py</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立必要目錄\"><a href=\"#建立必要目錄\" class=\"headerlink\" title=\"建立必要目錄\"></a>建立必要目錄</h3><ul>\n<li>\\project1<ul>\n<li>manage.py</li>\n<li>\\project1</li>\n<li>\\app1</li>\n<li>\\templates - 放置模板(.html檔)</li>\n<li>\\static - 放置靜態檔案<ul>\n<li>\\css</li>\n<li>\\js</li>\n<li>\\img</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立migration資料檔\"><a href=\"#建立migration資料檔\" class=\"headerlink\" title=\"建立migration資料檔\"></a>建立migration資料檔</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py makemigrations</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"模型與資料庫同步\"><a href=\"#模型與資料庫同步\" class=\"headerlink\" title=\"模型與資料庫同步\"></a>模型與資料庫同步</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py migrate</span><br></code></pre></td></tr></table></figure>\n\n<p>會在專案目錄下建立<code>db.sqlite3</code>檔。</p>\n<h3 id=\"啟動server\"><a href=\"#啟動server\" class=\"headerlink\" title=\"啟動server\"></a>啟動server</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py runserver</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"環境設定\"><a href=\"#環境設定\" class=\"headerlink\" title=\"環境設定\"></a>環境設定</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">BASE_DIR = Path(__file__).resolve().parent.parent<br>DEBUG = <span class=\"hljs-literal\">True</span><br>ALLOWED_HOSTS = []  <span class=\"hljs-comment\"># 若關閉除錯模式，則需指定該參數</span><br>INSTALLED_APPS = [<br>  ...<br>  <span class=\"hljs-string\">&#x27;app1&#x27;</span>            <span class=\"hljs-comment\"># 新增建立的應用程式</span><br>]<br>TEMPLATES = [<br>  &#123;<br>    <span class=\"hljs-string\">&quot;BACKEND&quot;</span>: <span class=\"hljs-string\">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DIRS&quot;</span>: [BASE_DIR / <span class=\"hljs-string\">&#x27;templates&#x27;</span>],  <span class=\"hljs-comment\"># 指定模板路徑</span><br>        <span class=\"hljs-string\">&quot;APP_DIRS&quot;</span>: <span class=\"hljs-literal\">True</span>,<br>        ...<br>  &#125;,<br>]<br>LANGUAGE_CODE = <span class=\"hljs-string\">&quot;zh-hant&quot;</span>   <span class=\"hljs-comment\"># 改為繁體中文</span><br>TIME_ZONE = <span class=\"hljs-string\">&quot;Asia/Taipei&quot;</span>   <span class=\"hljs-comment\"># 改為臺北時區</span><br>STATICFILES_DIRS = [        <span class=\"hljs-comment\"># 加入static路徑</span><br>    BASE_DIR / <span class=\"hljs-string\">&quot;static&quot;</span>,<br>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"更改資料庫\"><a href=\"#更改資料庫\" class=\"headerlink\" title=\"更改資料庫\"></a>更改資料庫</h3><p>可使用PostgreSQL、MariaDB、MySQL或Oracle。</p>\n<p>以MySQL為例：</p>\n<ol>\n<li><a href=\"https://dev.mysql.com/downloads/mysql/\">安裝MySQL Server</a>。</li>\n<li><a href=\"https://blog.hungwin.com.tw/windows-server-mysql-community-install/\">安裝步驟說明</a>。</li>\n</ol>\n<p>安裝完請先確定MySQL Server是否有新增至環境變數。</p>\n<ul>\n<li><p>登入MySQL：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">mysql -u 使用者帳號 -p</span><br>Enter password: ********<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>常用SQL指令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> VERSION();  <span class=\"hljs-comment\">/* 檢查資料庫版本 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">USER</span>();     <span class=\"hljs-comment\">/* 檢查目前登入使用者 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> ENGINES \\G    <span class=\"hljs-comment\">/* 顯示目前資料庫支援的儲存引擎 */</span><br><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> DATABASE 資料庫名稱   <span class=\"hljs-comment\">/* 建立資料庫 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> USE 資料庫名稱               <span class=\"hljs-comment\">/* 進入資料庫 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> DATABASE 資料庫名稱     <span class=\"hljs-comment\">/* 移除資料庫 */</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>原有環境資料庫設定為SQLite3：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.sqlite3&quot;</span>, <span class=\"hljs-comment\"># 預設</span><br>        <span class=\"hljs-string\">&quot;NAME&quot;</span>: BASE_DIR / <span class=\"hljs-string\">&quot;db.sqlite3&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>改為MySQL的設定：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.mysql&quot;</span>,<br>        <span class=\"hljs-string\">&quot;NAME&quot;</span>: <span class=\"hljs-string\">&quot;資料庫名稱&quot;</span>,<br>        <span class=\"hljs-string\">&quot;USER&quot;</span>: <span class=\"hljs-string\">&quot;使用者名稱&quot;</span>,<br>        <span class=\"hljs-string\">&quot;PASSWORD&quot;</span>: <span class=\"hljs-string\">&quot;密碼&quot;</span>,<br>        <span class=\"hljs-string\">&quot;HOST&quot;</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,<br>        <span class=\"hljs-string\">&quot;PORT&quot;</span>: <span class=\"hljs-string\">&quot;3306&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>或使用配置檔：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.mysql&quot;</span>,<br>        <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;read_default_file&quot;</span>: <span class=\"hljs-string\">&quot;配置檔路徑(my.cnf)&quot;</span>,<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs my.cnf\">[client]<br>host = localhost<br>database = 資料庫名稱<br>user = 使用者名稱<br>password = 密碼<br>default-character-set = utf8<br>port = 3306<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ol>\n<li><a href=\"https://blog.hungwin.com.tw/windows-server-mysql-community-install/\">https://blog.hungwin.com.tw/windows-server-mysql-community-install/</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h1><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">django-admin startproject &lt;專案名稱&gt;      <span class=\"hljs-comment\"># 建立專案</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py startapp &lt;應用程式名稱&gt;  <span class=\"hljs-comment\"># 新增應用程式</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py makemigrations           <span class=\"hljs-comment\"># 建立資料檔</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py migrate                  <span class=\"hljs-comment\"># 同步模型與資料庫</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py runserver                <span class=\"hljs-comment\"># 啟動server</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py createsuperuser          <span class=\"hljs-comment\"># 建立superuser</span></span><br><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py changepassword admin     <span class=\"hljs-comment\"># 修改admin密碼</span></span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"安裝與建立專案、應用程式\"><a href=\"#安裝與建立專案、應用程式\" class=\"headerlink\" title=\"安裝與建立專案、應用程式\"></a>安裝與建立專案、應用程式</h1><h2 id=\"安裝Django套件\"><a href=\"#安裝Django套件\" class=\"headerlink\" title=\"安裝Django套件\"></a>安裝Django套件</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">conda install django</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"建立Django專案\"><a href=\"#建立Django專案\" class=\"headerlink\" title=\"建立Django專案\"></a>建立Django專案</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">django-admin startproject &lt;專案名稱&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立專案之後，會在該目錄下建立兩層&lt;專案名稱&gt;的目錄，&lt;專案名稱&gt;以project1為例：</p>\n<ul>\n<li>\\project1 - 專案主目錄<ul>\n<li>manage.py - 專案管理（建立app、啟動server和Shell）</li>\n<li>\\project1 - 專案設定<ul>\n<li>__init__.py</li>\n<li>asgi.py - asgi伺服器和Django介面設定檔</li>\n<li>settings.py - 專案設定檔</li>\n<li>urls.py - url配置檔</li>\n<li>wsgi.py - 網頁伺服器和Django介面設定檔</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建立Application應用程式\"><a href=\"#建立Application應用程式\" class=\"headerlink\" title=\"建立Application應用程式\"></a>建立Application應用程式</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py startapp &lt;應用程式名稱&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>建立應用程式之後，會在第一層project1目錄下建立&lt;應用程式名稱&gt;目錄，&lt;應用程式名稱&gt;以app1為例：</p>\n<ul>\n<li>\\project1<ul>\n<li>manage.py</li>\n<li>\\project1</li>\n<li>\\app1 - 應用程式<ul>\n<li>\\migrations - 資料表架構、版本紀錄</li>\n<li>admin.py</li>\n<li>apps.py</li>\n<li>models.py</li>\n<li>tests.py</li>\n<li>views.py</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立必要目錄\"><a href=\"#建立必要目錄\" class=\"headerlink\" title=\"建立必要目錄\"></a>建立必要目錄</h3><ul>\n<li>\\project1<ul>\n<li>manage.py</li>\n<li>\\project1</li>\n<li>\\app1</li>\n<li>\\templates - 放置模板(.html檔)</li>\n<li>\\static - 放置靜態檔案<ul>\n<li>\\css</li>\n<li>\\js</li>\n<li>\\img</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建立migration資料檔\"><a href=\"#建立migration資料檔\" class=\"headerlink\" title=\"建立migration資料檔\"></a>建立migration資料檔</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py makemigrations</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"模型與資料庫同步\"><a href=\"#模型與資料庫同步\" class=\"headerlink\" title=\"模型與資料庫同步\"></a>模型與資料庫同步</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py migrate</span><br></code></pre></td></tr></table></figure>\n\n<p>會在專案目錄下建立<code>db.sqlite3</code>檔。</p>\n<h3 id=\"啟動server\"><a href=\"#啟動server\" class=\"headerlink\" title=\"啟動server\"></a>啟動server</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">python manage.py runserver</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"環境設定\"><a href=\"#環境設定\" class=\"headerlink\" title=\"環境設定\"></a>環境設定</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">BASE_DIR = Path(__file__).resolve().parent.parent<br>DEBUG = <span class=\"hljs-literal\">True</span><br>ALLOWED_HOSTS = []  <span class=\"hljs-comment\"># 若關閉除錯模式，則需指定該參數</span><br>INSTALLED_APPS = [<br>  ...<br>  <span class=\"hljs-string\">&#x27;app1&#x27;</span>            <span class=\"hljs-comment\"># 新增建立的應用程式</span><br>]<br>TEMPLATES = [<br>  &#123;<br>    <span class=\"hljs-string\">&quot;BACKEND&quot;</span>: <span class=\"hljs-string\">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DIRS&quot;</span>: [BASE_DIR / <span class=\"hljs-string\">&#x27;templates&#x27;</span>],  <span class=\"hljs-comment\"># 指定模板路徑</span><br>        <span class=\"hljs-string\">&quot;APP_DIRS&quot;</span>: <span class=\"hljs-literal\">True</span>,<br>        ...<br>  &#125;,<br>]<br>LANGUAGE_CODE = <span class=\"hljs-string\">&quot;zh-hant&quot;</span>   <span class=\"hljs-comment\"># 改為繁體中文</span><br>TIME_ZONE = <span class=\"hljs-string\">&quot;Asia/Taipei&quot;</span>   <span class=\"hljs-comment\"># 改為臺北時區</span><br>STATICFILES_DIRS = [        <span class=\"hljs-comment\"># 加入static路徑</span><br>    BASE_DIR / <span class=\"hljs-string\">&quot;static&quot;</span>,<br>]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"更改資料庫\"><a href=\"#更改資料庫\" class=\"headerlink\" title=\"更改資料庫\"></a>更改資料庫</h3><p>可使用PostgreSQL、MariaDB、MySQL或Oracle。</p>\n<p>以MySQL為例：</p>\n<ol>\n<li><a href=\"https://dev.mysql.com/downloads/mysql/\">安裝MySQL Server</a>。</li>\n<li><a href=\"https://blog.hungwin.com.tw/windows-server-mysql-community-install/\">安裝步驟說明</a>。</li>\n</ol>\n<p>安裝完請先確定MySQL Server是否有新增至環境變數。</p>\n<ul>\n<li><p>登入MySQL：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">&gt; </span><span class=\"language-bash\">mysql -u 使用者帳號 -p</span><br>Enter password: ********<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>常用SQL指令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> VERSION();  <span class=\"hljs-comment\">/* 檢查資料庫版本 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">USER</span>();     <span class=\"hljs-comment\">/* 檢查目前登入使用者 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> ENGINES \\G    <span class=\"hljs-comment\">/* 顯示目前資料庫支援的儲存引擎 */</span><br><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> DATABASE 資料庫名稱   <span class=\"hljs-comment\">/* 建立資料庫 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> USE 資料庫名稱               <span class=\"hljs-comment\">/* 進入資料庫 */</span><br>mysql<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> DATABASE 資料庫名稱     <span class=\"hljs-comment\">/* 移除資料庫 */</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>原有環境資料庫設定為SQLite3：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.sqlite3&quot;</span>, <span class=\"hljs-comment\"># 預設</span><br>        <span class=\"hljs-string\">&quot;NAME&quot;</span>: BASE_DIR / <span class=\"hljs-string\">&quot;db.sqlite3&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>改為MySQL的設定：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.mysql&quot;</span>,<br>        <span class=\"hljs-string\">&quot;NAME&quot;</span>: <span class=\"hljs-string\">&quot;資料庫名稱&quot;</span>,<br>        <span class=\"hljs-string\">&quot;USER&quot;</span>: <span class=\"hljs-string\">&quot;使用者名稱&quot;</span>,<br>        <span class=\"hljs-string\">&quot;PASSWORD&quot;</span>: <span class=\"hljs-string\">&quot;密碼&quot;</span>,<br>        <span class=\"hljs-string\">&quot;HOST&quot;</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,<br>        <span class=\"hljs-string\">&quot;PORT&quot;</span>: <span class=\"hljs-string\">&quot;3306&quot;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>或使用配置檔：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&quot;default&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;ENGINE&quot;</span>: <span class=\"hljs-string\">&quot;django.db.backends.mysql&quot;</span>,<br>        <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;read_default_file&quot;</span>: <span class=\"hljs-string\">&quot;配置檔路徑(my.cnf)&quot;</span>,<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs my.cnf\">[client]<br>host = localhost<br>database = 資料庫名稱<br>user = 使用者名稱<br>password = 密碼<br>default-character-set = utf8<br>port = 3306<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ol>\n<li><a href=\"https://blog.hungwin.com.tw/windows-server-mysql-community-install/\">https://blog.hungwin.com.tw/windows-server-mysql-community-install/</a></li>\n</ol>\n"},{"title":"Docker常用相關指令","date":"2023-03-31T09:31:00.000Z","updated":"2023-03-31T09:31:00.000Z","_content":"\n# Docker 指令功能全集\n\n```bash\n$ docker inspect <容器ID|名稱>          # 檢查某Container的狀態（進入點、執行狀態及其他詳細資料）\n$ docker stats <容器ID|名稱>            # 查看各Container的CPU、記憶體及網路使用\n$ docker exec <容器ID|名稱> [COMMAND]   # 在外部向Container內執行指令\n$ docker logs <容器ID|名稱>             # 將Container內的輸出顯示到螢幕上\n$ docker service ls                     # 列出Service狀態\n$ docker service logs <服務ID|名稱>     # 將Service內的輸出顯示到螢幕上\n```\n\n- 容器相關\n  \n  ```bash\n  $ docker ps                                       # 查看狀態\n  $ docker ps -a                                    # 查看所有狀態\n  $ docker run -it --name <name> <image> <command>  # 新建、啟動並執行指令\n  $ docker start <container>                        # 啟動\n  $ docker stop <container>                         # 停止\n  $ docker restart <container>                      # 重啟\n  $ docker rm <container>                           # 移除\n  ```\n\n- 映像檔相關\n  ```bash\n  $ docker build -t <image>[:tag] <path>            # 從dockerfile建立\n  $ docker images                                   # 列出\n  $ docker image ls                                 # 列出\n  $ docker image rm                                 # 移除\n  ```\n\n因Docker可能裝在root權限底下，如沒有root使用Docker的權限，請在各指令前加sudo！\n\n## 查看容器使用狀態\n\n```bash\n$ docker ps\n$ docker ps -a  # 查看所有容器使用狀態\nCONTAINER ID    IMAGE                   COMMAND CREATED     STATUS      PORTS                               NAMES\nc7ee35c5de98    127.0.0.1:5000/*:3.3.0  \"/…\"    7 days ago  Up 7 days   0.0.0.0:8002->8000/tcp, :::8002->8000/tcp  qpesums_web\n```\n\nContainer的使用狀態會列出Container ID、所使用的IMAGE（映像檔）位置、啟動容器之後會執行的COMMAND（指令）、哪時候被CREATED、目前的STATUS、對應到的PORTS（連接埠），以及Container的NAMES（名稱）。\n\n若後面不加任何options僅會列出正在運行的Container。\n\n## 查看各Container的CPU、記憶體及網路使用\n\n```bash\n$ docker stats <容器ID|名稱>\n$ docker stats --no-stream          # 不滾動顯示\n```\n\n## 在外部向容器內執行指令\n\n```bash\n$ docker exec\nUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n$ docker exec -it <Container ID|NAME> bash\n```\n\n表示進入Container後第一個執行的是bash介面。\n\n## 列出Docker服務並查詢服務狀態\n### 列出Docker服務\n\n```bash\n$ docker service ls\nID              NAME        MODE    REPLICAS    IMAGE                   PORTS\nzo97osyy73we    qpeplus     global  3/3         127.0.0.1:5000/*:3.3.0  *:8000->8000/tcp\n```\n\n將會列出各個服務的ID、NAME（名稱）、MODE（模式）、REPLICAS（複本）、所使用到的IMAGE（映像檔），以及所對應到的PORTS（連接埠）。\n\n### 查詢服務狀態\n\n```bash\n$ docker service logs <ID|NAME>\n```\n\n## 查看Swarm Nodes\n\n```bash\n$ docker node ls\n```\n\n再利用查到的ID或名稱去查詢該服務狀態。\n\n## 移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)\n\n```console\n$ docker container prune        # 移除未用容器\n$ docker network prune          # 移除未用網路\n$ docker image prune            # 移除未用映像\n$ docker volume prune           # 移除未用數據卷\n$ docker system prune           # 移除所有(Docker 17.06.0前包含數據卷)\n$ docker system prune --volumes # 移除所有包含數據卷\n```\n\n[OPTIONS]有`-a`及`-f`。\n\n## 其他指令\n\n```console\n$ docker pull <映像檔名稱>:<版本號>             # 拉取映像檔（未啟動容器）\n$ docker run <映像檔名稱>:<版本號>              # 從映像檔啟動容器（若本機無該映像檔，則從遠端拉取）\n$ docker rename <舊容器名稱|ID> <新容器名稱>    # 容器更名\n$ docker version                                # 顯示詳細版本\n```\n\n### DOCKER RUN\n\n功能：從映像檔啟動容器。\n\n- `-d` - 在背景運行容器，並列出容器ID\n- `-i` - 保持stdin\n- `-t` - 分配pseudo-TTY\n- `-p <host_port>:<container_port>` - 本機的通訊埠對應到容器的通訊埠\n- `-v, --volume <host_dir>:<container_dir>` - 掛載本機目錄至容器(自動建立)\n- `--mount <type=bind,source=host_dir,target=container_dir>` - 掛載本機目錄至容器\n- `-w, --workdir <container_dir>` - 指定工作目錄\n- `--name <name>` - 指定容器名稱\n\n```console\n$ docker run <image>[:<tag>]                            # 從映像檔啟動容器\n$ docker run --name <name> <image>                      # 指定容器名稱\n$ docker run -dp <host_port>:<container_port> <image>   # 指定通訊埠並在背景運行\n$ docker run -it --name <name> -v <host_dir>:<container_dir> <image> <command> # 從映像檔啟動、掛載目錄並進入容器維持輸入\n```\n\n## DOCKERFILE\n\n若現有的image儲存庫無法滿足功能需求，可以透過dockerfile，在現有的image儲存庫上，構建自己的image。\n\n- Dockerfile關鍵字使用說明\n  ```dockerfile\n  FROM <image>[:<tag>]                          # 映像檔:版號\n  ADD [--chown=<user>:<group>] <src>... <dest>  # 從<src>複製至image的<dest>處(支援從遠端下載，tar.gz檔自動解壓縮)\n  COPY [--chown=<user>:<group>] <src>... <dest> # 從<src>複製至image的<dest>處(僅支援本地複製)\n  WORKDIR <path>                                # 設定工作目錄\n  RUN <command>                                 # 在當前image上再執行指令並提交結果\n  RUN [\"executable\", \"param1\", \"param2\"]        # 在當前image上再執行指令並提交結果\n  CMD <command>                                 # 執行中容器提供初始指令\n  CMD [\"executable\", \"param1\", \"param2\"]        # 2個以上CMD指令只會運行最後1個\n  USER <user>[:<group>]                         # 設定使用者及群組\n  USER <uid>[:<gid>]                            # 設定使用者及群組\n  ```\n\n- Dockerfile其他說明\n  ```dockerfile\n  FROM <base_image> AS <stage_name>             # 命名提高可讀性\n  COPY --from=<stage_name>                      # 可複製image\n  ```\n\n寫完dockerfile之後，再利用`docker build`建立自己的映像檔。\n```console\n$ docker build -t <映像檔名稱>[:<tag>] . --no-cache # 沒有tag時預設為latest，確定Dockerfile有放在同目錄下，--no-cache是避免在build的時候被cache住\n$ docker images                                     # 查看是否有build成功\n```\n\n```dockerfile\nFROM centos:8                   # 使用到image名稱及版本號\nLABEL maintainer=satoshi        # 維護者資訊\n# MAINTAINER satoshi            # 已棄用寫法(維護者資訊)\n\nARG PROXY                       # 只在build時存在的變數(可從內部或外部設值，例如：docker build --build-arg PROXY=http://proxy.xxx.com.tw/:1234 .)\nENV http_proxy=${PROXY}         # 設定環境變數(在build及run時存在的變數)\nENV https_proxy=${PROXY}\n\nADD run.py test.txt /           # 將local檔案複製到image裡(tar.gz檔會自動解壓縮)\n\nRUN yum install -y wget         # 安裝這個image需要的套件\nRUN cd /                        # 切換到根目錄\nCMD [\"/run.py\" , \"test.txt\"]    # docker run時做的指令\n```\n","source":"_posts/Docker相關指令.md","raw":"---\ntitle: Docker常用相關指令\ncategories: [Docker]\ntags: [Docker]\ndate: 2023/03/31 17:31\nupdated: 2023/03/31 17:31\n---\n\n# Docker 指令功能全集\n\n```bash\n$ docker inspect <容器ID|名稱>          # 檢查某Container的狀態（進入點、執行狀態及其他詳細資料）\n$ docker stats <容器ID|名稱>            # 查看各Container的CPU、記憶體及網路使用\n$ docker exec <容器ID|名稱> [COMMAND]   # 在外部向Container內執行指令\n$ docker logs <容器ID|名稱>             # 將Container內的輸出顯示到螢幕上\n$ docker service ls                     # 列出Service狀態\n$ docker service logs <服務ID|名稱>     # 將Service內的輸出顯示到螢幕上\n```\n\n- 容器相關\n  \n  ```bash\n  $ docker ps                                       # 查看狀態\n  $ docker ps -a                                    # 查看所有狀態\n  $ docker run -it --name <name> <image> <command>  # 新建、啟動並執行指令\n  $ docker start <container>                        # 啟動\n  $ docker stop <container>                         # 停止\n  $ docker restart <container>                      # 重啟\n  $ docker rm <container>                           # 移除\n  ```\n\n- 映像檔相關\n  ```bash\n  $ docker build -t <image>[:tag] <path>            # 從dockerfile建立\n  $ docker images                                   # 列出\n  $ docker image ls                                 # 列出\n  $ docker image rm                                 # 移除\n  ```\n\n因Docker可能裝在root權限底下，如沒有root使用Docker的權限，請在各指令前加sudo！\n\n## 查看容器使用狀態\n\n```bash\n$ docker ps\n$ docker ps -a  # 查看所有容器使用狀態\nCONTAINER ID    IMAGE                   COMMAND CREATED     STATUS      PORTS                               NAMES\nc7ee35c5de98    127.0.0.1:5000/*:3.3.0  \"/…\"    7 days ago  Up 7 days   0.0.0.0:8002->8000/tcp, :::8002->8000/tcp  qpesums_web\n```\n\nContainer的使用狀態會列出Container ID、所使用的IMAGE（映像檔）位置、啟動容器之後會執行的COMMAND（指令）、哪時候被CREATED、目前的STATUS、對應到的PORTS（連接埠），以及Container的NAMES（名稱）。\n\n若後面不加任何options僅會列出正在運行的Container。\n\n## 查看各Container的CPU、記憶體及網路使用\n\n```bash\n$ docker stats <容器ID|名稱>\n$ docker stats --no-stream          # 不滾動顯示\n```\n\n## 在外部向容器內執行指令\n\n```bash\n$ docker exec\nUsage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n$ docker exec -it <Container ID|NAME> bash\n```\n\n表示進入Container後第一個執行的是bash介面。\n\n## 列出Docker服務並查詢服務狀態\n### 列出Docker服務\n\n```bash\n$ docker service ls\nID              NAME        MODE    REPLICAS    IMAGE                   PORTS\nzo97osyy73we    qpeplus     global  3/3         127.0.0.1:5000/*:3.3.0  *:8000->8000/tcp\n```\n\n將會列出各個服務的ID、NAME（名稱）、MODE（模式）、REPLICAS（複本）、所使用到的IMAGE（映像檔），以及所對應到的PORTS（連接埠）。\n\n### 查詢服務狀態\n\n```bash\n$ docker service logs <ID|NAME>\n```\n\n## 查看Swarm Nodes\n\n```bash\n$ docker node ls\n```\n\n再利用查到的ID或名稱去查詢該服務狀態。\n\n## 移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)\n\n```console\n$ docker container prune        # 移除未用容器\n$ docker network prune          # 移除未用網路\n$ docker image prune            # 移除未用映像\n$ docker volume prune           # 移除未用數據卷\n$ docker system prune           # 移除所有(Docker 17.06.0前包含數據卷)\n$ docker system prune --volumes # 移除所有包含數據卷\n```\n\n[OPTIONS]有`-a`及`-f`。\n\n## 其他指令\n\n```console\n$ docker pull <映像檔名稱>:<版本號>             # 拉取映像檔（未啟動容器）\n$ docker run <映像檔名稱>:<版本號>              # 從映像檔啟動容器（若本機無該映像檔，則從遠端拉取）\n$ docker rename <舊容器名稱|ID> <新容器名稱>    # 容器更名\n$ docker version                                # 顯示詳細版本\n```\n\n### DOCKER RUN\n\n功能：從映像檔啟動容器。\n\n- `-d` - 在背景運行容器，並列出容器ID\n- `-i` - 保持stdin\n- `-t` - 分配pseudo-TTY\n- `-p <host_port>:<container_port>` - 本機的通訊埠對應到容器的通訊埠\n- `-v, --volume <host_dir>:<container_dir>` - 掛載本機目錄至容器(自動建立)\n- `--mount <type=bind,source=host_dir,target=container_dir>` - 掛載本機目錄至容器\n- `-w, --workdir <container_dir>` - 指定工作目錄\n- `--name <name>` - 指定容器名稱\n\n```console\n$ docker run <image>[:<tag>]                            # 從映像檔啟動容器\n$ docker run --name <name> <image>                      # 指定容器名稱\n$ docker run -dp <host_port>:<container_port> <image>   # 指定通訊埠並在背景運行\n$ docker run -it --name <name> -v <host_dir>:<container_dir> <image> <command> # 從映像檔啟動、掛載目錄並進入容器維持輸入\n```\n\n## DOCKERFILE\n\n若現有的image儲存庫無法滿足功能需求，可以透過dockerfile，在現有的image儲存庫上，構建自己的image。\n\n- Dockerfile關鍵字使用說明\n  ```dockerfile\n  FROM <image>[:<tag>]                          # 映像檔:版號\n  ADD [--chown=<user>:<group>] <src>... <dest>  # 從<src>複製至image的<dest>處(支援從遠端下載，tar.gz檔自動解壓縮)\n  COPY [--chown=<user>:<group>] <src>... <dest> # 從<src>複製至image的<dest>處(僅支援本地複製)\n  WORKDIR <path>                                # 設定工作目錄\n  RUN <command>                                 # 在當前image上再執行指令並提交結果\n  RUN [\"executable\", \"param1\", \"param2\"]        # 在當前image上再執行指令並提交結果\n  CMD <command>                                 # 執行中容器提供初始指令\n  CMD [\"executable\", \"param1\", \"param2\"]        # 2個以上CMD指令只會運行最後1個\n  USER <user>[:<group>]                         # 設定使用者及群組\n  USER <uid>[:<gid>]                            # 設定使用者及群組\n  ```\n\n- Dockerfile其他說明\n  ```dockerfile\n  FROM <base_image> AS <stage_name>             # 命名提高可讀性\n  COPY --from=<stage_name>                      # 可複製image\n  ```\n\n寫完dockerfile之後，再利用`docker build`建立自己的映像檔。\n```console\n$ docker build -t <映像檔名稱>[:<tag>] . --no-cache # 沒有tag時預設為latest，確定Dockerfile有放在同目錄下，--no-cache是避免在build的時候被cache住\n$ docker images                                     # 查看是否有build成功\n```\n\n```dockerfile\nFROM centos:8                   # 使用到image名稱及版本號\nLABEL maintainer=satoshi        # 維護者資訊\n# MAINTAINER satoshi            # 已棄用寫法(維護者資訊)\n\nARG PROXY                       # 只在build時存在的變數(可從內部或外部設值，例如：docker build --build-arg PROXY=http://proxy.xxx.com.tw/:1234 .)\nENV http_proxy=${PROXY}         # 設定環境變數(在build及run時存在的變數)\nENV https_proxy=${PROXY}\n\nADD run.py test.txt /           # 將local檔案複製到image裡(tar.gz檔會自動解壓縮)\n\nRUN yum install -y wget         # 安裝這個image需要的套件\nRUN cd /                        # 切換到根目錄\nCMD [\"/run.py\" , \"test.txt\"]    # docker run時做的指令\n```\n","slug":"Docker相關指令","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr150006v47f0ygk2nw0","content":"<h1 id=\"Docker-指令功能全集\"><a href=\"#Docker-指令功能全集\" class=\"headerlink\" title=\"Docker 指令功能全集\"></a>Docker 指令功能全集</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker inspect &lt;容器ID|名稱&gt;          <span class=\"hljs-comment\"># 檢查某Container的狀態（進入點、執行狀態及其他詳細資料）</span><br>$ docker stats &lt;容器ID|名稱&gt;            <span class=\"hljs-comment\"># 查看各Container的CPU、記憶體及網路使用</span><br>$ docker <span class=\"hljs-built_in\">exec</span> &lt;容器ID|名稱&gt; [COMMAND]   <span class=\"hljs-comment\"># 在外部向Container內執行指令</span><br>$ docker logs &lt;容器ID|名稱&gt;             <span class=\"hljs-comment\"># 將Container內的輸出顯示到螢幕上</span><br>$ docker service <span class=\"hljs-built_in\">ls</span>                     <span class=\"hljs-comment\"># 列出Service狀態</span><br>$ docker service logs &lt;服務ID|名稱&gt;     <span class=\"hljs-comment\"># 將Service內的輸出顯示到螢幕上</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>容器相關</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker ps                                       <span class=\"hljs-comment\"># 查看狀態</span><br>$ docker ps -a                                    <span class=\"hljs-comment\"># 查看所有狀態</span><br>$ docker run -it --name &lt;name&gt; &lt;image&gt; &lt;<span class=\"hljs-built_in\">command</span>&gt;  <span class=\"hljs-comment\"># 新建、啟動並執行指令</span><br>$ docker start &lt;container&gt;                        <span class=\"hljs-comment\"># 啟動</span><br>$ docker stop &lt;container&gt;                         <span class=\"hljs-comment\"># 停止</span><br>$ docker restart &lt;container&gt;                      <span class=\"hljs-comment\"># 重啟</span><br>$ docker <span class=\"hljs-built_in\">rm</span> &lt;container&gt;                           <span class=\"hljs-comment\"># 移除</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>映像檔相關</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker build -t &lt;image&gt;[:tag] &lt;path&gt;            <span class=\"hljs-comment\"># 從dockerfile建立</span><br>$ docker images                                   <span class=\"hljs-comment\"># 列出</span><br>$ docker image <span class=\"hljs-built_in\">ls</span>                                 <span class=\"hljs-comment\"># 列出</span><br>$ docker image <span class=\"hljs-built_in\">rm</span>                                 <span class=\"hljs-comment\"># 移除</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>因Docker可能裝在root權限底下，如沒有root使用Docker的權限，請在各指令前加sudo！</p>\n<h2 id=\"查看容器使用狀態\"><a href=\"#查看容器使用狀態\" class=\"headerlink\" title=\"查看容器使用狀態\"></a>查看容器使用狀態</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker ps<br>$ docker ps -a  <span class=\"hljs-comment\"># 查看所有容器使用狀態</span><br>CONTAINER ID    IMAGE                   COMMAND CREATED     STATUS      PORTS                               NAMES<br>c7ee35c5de98    127.0.0.1:5000/*:3.3.0  <span class=\"hljs-string\">&quot;/…&quot;</span>    7 days ago  Up 7 days   0.0.0.0:8002-&gt;8000/tcp, :::8002-&gt;8000/tcp  qpesums_web<br></code></pre></td></tr></table></figure>\n\n<p>Container的使用狀態會列出Container ID、所使用的IMAGE（映像檔）位置、啟動容器之後會執行的COMMAND（指令）、哪時候被CREATED、目前的STATUS、對應到的PORTS（連接埠），以及Container的NAMES（名稱）。</p>\n<p>若後面不加任何options僅會列出正在運行的Container。</p>\n<h2 id=\"查看各Container的CPU、記憶體及網路使用\"><a href=\"#查看各Container的CPU、記憶體及網路使用\" class=\"headerlink\" title=\"查看各Container的CPU、記憶體及網路使用\"></a>查看各Container的CPU、記憶體及網路使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker stats &lt;容器ID|名稱&gt;<br>$ docker stats --no-stream          <span class=\"hljs-comment\"># 不滾動顯示</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在外部向容器內執行指令\"><a href=\"#在外部向容器內執行指令\" class=\"headerlink\" title=\"在外部向容器內執行指令\"></a>在外部向容器內執行指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker <span class=\"hljs-built_in\">exec</span><br>Usage: docker <span class=\"hljs-built_in\">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]<br>$ docker <span class=\"hljs-built_in\">exec</span> -it &lt;Container ID|NAME&gt; bash<br></code></pre></td></tr></table></figure>\n\n<p>表示進入Container後第一個執行的是bash介面。</p>\n<h2 id=\"列出Docker服務並查詢服務狀態\"><a href=\"#列出Docker服務並查詢服務狀態\" class=\"headerlink\" title=\"列出Docker服務並查詢服務狀態\"></a>列出Docker服務並查詢服務狀態</h2><h3 id=\"列出Docker服務\"><a href=\"#列出Docker服務\" class=\"headerlink\" title=\"列出Docker服務\"></a>列出Docker服務</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker service <span class=\"hljs-built_in\">ls</span><br>ID              NAME        MODE    REPLICAS    IMAGE                   PORTS<br>zo97osyy73we    qpeplus     global  3/3         127.0.0.1:5000/*:3.3.0  *:8000-&gt;8000/tcp<br></code></pre></td></tr></table></figure>\n\n<p>將會列出各個服務的ID、NAME（名稱）、MODE（模式）、REPLICAS（複本）、所使用到的IMAGE（映像檔），以及所對應到的PORTS（連接埠）。</p>\n<h3 id=\"查詢服務狀態\"><a href=\"#查詢服務狀態\" class=\"headerlink\" title=\"查詢服務狀態\"></a>查詢服務狀態</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker service logs &lt;ID|NAME&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看Swarm-Nodes\"><a href=\"#查看Swarm-Nodes\" class=\"headerlink\" title=\"查看Swarm Nodes\"></a>查看Swarm Nodes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker node <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p>再利用查到的ID或名稱去查詢該服務狀態。</p>\n<h2 id=\"移除多餘容器-container-、網路-network-、映像-image-、數據卷-volume\"><a href=\"#移除多餘容器-container-、網路-network-、映像-image-、數據卷-volume\" class=\"headerlink\" title=\"移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)\"></a>移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker container prune        <span class=\"hljs-comment\"># 移除未用容器</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker network prune          <span class=\"hljs-comment\"># 移除未用網路</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker image prune            <span class=\"hljs-comment\"># 移除未用映像</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker volume prune           <span class=\"hljs-comment\"># 移除未用數據卷</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker system prune           <span class=\"hljs-comment\"># 移除所有(Docker 17.06.0前包含數據卷)</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker system prune --volumes <span class=\"hljs-comment\"># 移除所有包含數據卷</span></span><br></code></pre></td></tr></table></figure>\n\n<p>[OPTIONS]有<code>-a</code>及<code>-f</code>。</p>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker pull &lt;映像檔名稱&gt;:&lt;版本號&gt;             <span class=\"hljs-comment\"># 拉取映像檔（未啟動容器）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run &lt;映像檔名稱&gt;:&lt;版本號&gt;              <span class=\"hljs-comment\"># 從映像檔啟動容器（若本機無該映像檔，則從遠端拉取）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker rename &lt;舊容器名稱|ID&gt; &lt;新容器名稱&gt;    <span class=\"hljs-comment\"># 容器更名</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker version                                <span class=\"hljs-comment\"># 顯示詳細版本</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DOCKER-RUN\"><a href=\"#DOCKER-RUN\" class=\"headerlink\" title=\"DOCKER RUN\"></a>DOCKER RUN</h3><p>功能：從映像檔啟動容器。</p>\n<ul>\n<li><code>-d</code> - 在背景運行容器，並列出容器ID</li>\n<li><code>-i</code> - 保持stdin</li>\n<li><code>-t</code> - 分配pseudo-TTY</li>\n<li><code>-p &lt;host_port&gt;:&lt;container_port&gt;</code> - 本機的通訊埠對應到容器的通訊埠</li>\n<li><code>-v, --volume &lt;host_dir&gt;:&lt;container_dir&gt;</code> - 掛載本機目錄至容器(自動建立)</li>\n<li><code>--mount &lt;type=bind,source=host_dir,target=container_dir&gt;</code> - 掛載本機目錄至容器</li>\n<li><code>-w, --workdir &lt;container_dir&gt;</code> - 指定工作目錄</li>\n<li><code>--name &lt;name&gt;</code> - 指定容器名稱</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run &lt;image&gt;[:&lt;tag&gt;]                            <span class=\"hljs-comment\"># 從映像檔啟動容器</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run --name &lt;name&gt; &lt;image&gt;                      <span class=\"hljs-comment\"># 指定容器名稱</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -dp &lt;host_port&gt;:&lt;container_port&gt; &lt;image&gt;   <span class=\"hljs-comment\"># 指定通訊埠並在背景運行</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -it --name &lt;name&gt; -v &lt;host_dir&gt;:&lt;container_dir&gt; &lt;image&gt; &lt;<span class=\"hljs-built_in\">command</span>&gt; <span class=\"hljs-comment\"># 從映像檔啟動、掛載目錄並進入容器維持輸入</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"DOCKERFILE\"><a href=\"#DOCKERFILE\" class=\"headerlink\" title=\"DOCKERFILE\"></a>DOCKERFILE</h2><p>若現有的image儲存庫無法滿足功能需求，可以透過dockerfile，在現有的image儲存庫上，構建自己的image。</p>\n<ul>\n<li><p>Dockerfile關鍵字使用說明</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> &lt;image&gt;[:&lt;tag&gt;]                          <span class=\"hljs-comment\"># 映像檔:版號</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> [--<span class=\"hljs-built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;  <span class=\"hljs-comment\"># 從&lt;src&gt;複製至image的&lt;dest&gt;處(支援從遠端下載，tar.gz檔自動解壓縮)</span></span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> [--<span class=\"hljs-built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt; <span class=\"hljs-comment\"># 從&lt;src&gt;複製至image的&lt;dest&gt;處(僅支援本地複製)</span></span><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> &lt;path&gt;                                <span class=\"hljs-comment\"># 設定工作目錄</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> &lt;<span class=\"hljs-built_in\">command</span>&gt;                                 <span class=\"hljs-comment\"># 在當前image上再執行指令並提交結果</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;executable&quot;</span>, <span class=\"hljs-string\">&quot;param1&quot;</span>, <span class=\"hljs-string\">&quot;param2&quot;</span>]        <span class=\"hljs-comment\"># 在當前image上再執行指令並提交結果</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> &lt;<span class=\"hljs-built_in\">command</span>&gt;                                 <span class=\"hljs-comment\"># 執行中容器提供初始指令</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;executable&quot;</span>, <span class=\"hljs-string\">&quot;param1&quot;</span>, <span class=\"hljs-string\">&quot;param2&quot;</span>]        <span class=\"hljs-comment\"># 2個以上CMD指令只會運行最後1個</span></span><br><span class=\"hljs-keyword\">USER</span> &lt;<span class=\"hljs-keyword\">user</span>&gt;[:&lt;group&gt;]                         <span class=\"hljs-comment\"># 設定使用者及群組</span><br><span class=\"hljs-keyword\">USER</span> &lt;uid&gt;[:&lt;gid&gt;]                            <span class=\"hljs-comment\"># 設定使用者及群組</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Dockerfile其他說明</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> &lt;base_image&gt; AS &lt;stage_name&gt;             <span class=\"hljs-comment\"># 命名提高可讀性</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=&lt;stage_name&gt;                      <span class=\"hljs-comment\"># 可複製image</span></span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>寫完dockerfile之後，再利用<code>docker build</code>建立自己的映像檔。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -t &lt;映像檔名稱&gt;[:&lt;tag&gt;] . --no-cache <span class=\"hljs-comment\"># 沒有tag時預設為latest，確定Dockerfile有放在同目錄下，--no-cache是避免在build的時候被cache住</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images                                     <span class=\"hljs-comment\"># 查看是否有build成功</span></span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> centos:<span class=\"hljs-number\">8</span>                   <span class=\"hljs-comment\"># 使用到image名稱及版本號</span><br><span class=\"hljs-keyword\">LABEL</span><span class=\"language-bash\"> maintainer=satoshi        <span class=\"hljs-comment\"># 維護者資訊</span></span><br><span class=\"hljs-comment\"># MAINTAINER satoshi            # 已棄用寫法(維護者資訊)</span><br><br><span class=\"hljs-keyword\">ARG</span> PROXY                       <span class=\"hljs-comment\"># 只在build時存在的變數(可從內部或外部設值，例如：docker build --build-arg PROXY=http://proxy.xxx.com.tw/:1234 .)</span><br><span class=\"hljs-keyword\">ENV</span> http_proxy=$&#123;PROXY&#125;         <span class=\"hljs-comment\"># 設定環境變數(在build及run時存在的變數)</span><br><span class=\"hljs-keyword\">ENV</span> https_proxy=$&#123;PROXY&#125;<br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.py test.txt /           <span class=\"hljs-comment\"># 將local檔案複製到image裡(tar.gz檔會自動解壓縮)</span></span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> yum install -y wget         <span class=\"hljs-comment\"># 安裝這個image需要的套件</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">cd</span> /                        <span class=\"hljs-comment\"># 切換到根目錄</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.py&quot;</span> , <span class=\"hljs-string\">&quot;test.txt&quot;</span>]    <span class=\"hljs-comment\"># docker run時做的指令</span></span><br></code></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Docker-指令功能全集\"><a href=\"#Docker-指令功能全集\" class=\"headerlink\" title=\"Docker 指令功能全集\"></a>Docker 指令功能全集</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker inspect &lt;容器ID|名稱&gt;          <span class=\"hljs-comment\"># 檢查某Container的狀態（進入點、執行狀態及其他詳細資料）</span><br>$ docker stats &lt;容器ID|名稱&gt;            <span class=\"hljs-comment\"># 查看各Container的CPU、記憶體及網路使用</span><br>$ docker <span class=\"hljs-built_in\">exec</span> &lt;容器ID|名稱&gt; [COMMAND]   <span class=\"hljs-comment\"># 在外部向Container內執行指令</span><br>$ docker logs &lt;容器ID|名稱&gt;             <span class=\"hljs-comment\"># 將Container內的輸出顯示到螢幕上</span><br>$ docker service <span class=\"hljs-built_in\">ls</span>                     <span class=\"hljs-comment\"># 列出Service狀態</span><br>$ docker service logs &lt;服務ID|名稱&gt;     <span class=\"hljs-comment\"># 將Service內的輸出顯示到螢幕上</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>容器相關</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker ps                                       <span class=\"hljs-comment\"># 查看狀態</span><br>$ docker ps -a                                    <span class=\"hljs-comment\"># 查看所有狀態</span><br>$ docker run -it --name &lt;name&gt; &lt;image&gt; &lt;<span class=\"hljs-built_in\">command</span>&gt;  <span class=\"hljs-comment\"># 新建、啟動並執行指令</span><br>$ docker start &lt;container&gt;                        <span class=\"hljs-comment\"># 啟動</span><br>$ docker stop &lt;container&gt;                         <span class=\"hljs-comment\"># 停止</span><br>$ docker restart &lt;container&gt;                      <span class=\"hljs-comment\"># 重啟</span><br>$ docker <span class=\"hljs-built_in\">rm</span> &lt;container&gt;                           <span class=\"hljs-comment\"># 移除</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>映像檔相關</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker build -t &lt;image&gt;[:tag] &lt;path&gt;            <span class=\"hljs-comment\"># 從dockerfile建立</span><br>$ docker images                                   <span class=\"hljs-comment\"># 列出</span><br>$ docker image <span class=\"hljs-built_in\">ls</span>                                 <span class=\"hljs-comment\"># 列出</span><br>$ docker image <span class=\"hljs-built_in\">rm</span>                                 <span class=\"hljs-comment\"># 移除</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>因Docker可能裝在root權限底下，如沒有root使用Docker的權限，請在各指令前加sudo！</p>\n<h2 id=\"查看容器使用狀態\"><a href=\"#查看容器使用狀態\" class=\"headerlink\" title=\"查看容器使用狀態\"></a>查看容器使用狀態</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker ps<br>$ docker ps -a  <span class=\"hljs-comment\"># 查看所有容器使用狀態</span><br>CONTAINER ID    IMAGE                   COMMAND CREATED     STATUS      PORTS                               NAMES<br>c7ee35c5de98    127.0.0.1:5000/*:3.3.0  <span class=\"hljs-string\">&quot;/…&quot;</span>    7 days ago  Up 7 days   0.0.0.0:8002-&gt;8000/tcp, :::8002-&gt;8000/tcp  qpesums_web<br></code></pre></td></tr></table></figure>\n\n<p>Container的使用狀態會列出Container ID、所使用的IMAGE（映像檔）位置、啟動容器之後會執行的COMMAND（指令）、哪時候被CREATED、目前的STATUS、對應到的PORTS（連接埠），以及Container的NAMES（名稱）。</p>\n<p>若後面不加任何options僅會列出正在運行的Container。</p>\n<h2 id=\"查看各Container的CPU、記憶體及網路使用\"><a href=\"#查看各Container的CPU、記憶體及網路使用\" class=\"headerlink\" title=\"查看各Container的CPU、記憶體及網路使用\"></a>查看各Container的CPU、記憶體及網路使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker stats &lt;容器ID|名稱&gt;<br>$ docker stats --no-stream          <span class=\"hljs-comment\"># 不滾動顯示</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在外部向容器內執行指令\"><a href=\"#在外部向容器內執行指令\" class=\"headerlink\" title=\"在外部向容器內執行指令\"></a>在外部向容器內執行指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker <span class=\"hljs-built_in\">exec</span><br>Usage: docker <span class=\"hljs-built_in\">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]<br>$ docker <span class=\"hljs-built_in\">exec</span> -it &lt;Container ID|NAME&gt; bash<br></code></pre></td></tr></table></figure>\n\n<p>表示進入Container後第一個執行的是bash介面。</p>\n<h2 id=\"列出Docker服務並查詢服務狀態\"><a href=\"#列出Docker服務並查詢服務狀態\" class=\"headerlink\" title=\"列出Docker服務並查詢服務狀態\"></a>列出Docker服務並查詢服務狀態</h2><h3 id=\"列出Docker服務\"><a href=\"#列出Docker服務\" class=\"headerlink\" title=\"列出Docker服務\"></a>列出Docker服務</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker service <span class=\"hljs-built_in\">ls</span><br>ID              NAME        MODE    REPLICAS    IMAGE                   PORTS<br>zo97osyy73we    qpeplus     global  3/3         127.0.0.1:5000/*:3.3.0  *:8000-&gt;8000/tcp<br></code></pre></td></tr></table></figure>\n\n<p>將會列出各個服務的ID、NAME（名稱）、MODE（模式）、REPLICAS（複本）、所使用到的IMAGE（映像檔），以及所對應到的PORTS（連接埠）。</p>\n<h3 id=\"查詢服務狀態\"><a href=\"#查詢服務狀態\" class=\"headerlink\" title=\"查詢服務狀態\"></a>查詢服務狀態</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker service logs &lt;ID|NAME&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看Swarm-Nodes\"><a href=\"#查看Swarm-Nodes\" class=\"headerlink\" title=\"查看Swarm Nodes\"></a>查看Swarm Nodes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ docker node <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p>再利用查到的ID或名稱去查詢該服務狀態。</p>\n<h2 id=\"移除多餘容器-container-、網路-network-、映像-image-、數據卷-volume\"><a href=\"#移除多餘容器-container-、網路-network-、映像-image-、數據卷-volume\" class=\"headerlink\" title=\"移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)\"></a>移除多餘容器(container)、網路(network)、映像(image)、數據卷(volume)</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker container prune        <span class=\"hljs-comment\"># 移除未用容器</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker network prune          <span class=\"hljs-comment\"># 移除未用網路</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker image prune            <span class=\"hljs-comment\"># 移除未用映像</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker volume prune           <span class=\"hljs-comment\"># 移除未用數據卷</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker system prune           <span class=\"hljs-comment\"># 移除所有(Docker 17.06.0前包含數據卷)</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker system prune --volumes <span class=\"hljs-comment\"># 移除所有包含數據卷</span></span><br></code></pre></td></tr></table></figure>\n\n<p>[OPTIONS]有<code>-a</code>及<code>-f</code>。</p>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker pull &lt;映像檔名稱&gt;:&lt;版本號&gt;             <span class=\"hljs-comment\"># 拉取映像檔（未啟動容器）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run &lt;映像檔名稱&gt;:&lt;版本號&gt;              <span class=\"hljs-comment\"># 從映像檔啟動容器（若本機無該映像檔，則從遠端拉取）</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker rename &lt;舊容器名稱|ID&gt; &lt;新容器名稱&gt;    <span class=\"hljs-comment\"># 容器更名</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker version                                <span class=\"hljs-comment\"># 顯示詳細版本</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DOCKER-RUN\"><a href=\"#DOCKER-RUN\" class=\"headerlink\" title=\"DOCKER RUN\"></a>DOCKER RUN</h3><p>功能：從映像檔啟動容器。</p>\n<ul>\n<li><code>-d</code> - 在背景運行容器，並列出容器ID</li>\n<li><code>-i</code> - 保持stdin</li>\n<li><code>-t</code> - 分配pseudo-TTY</li>\n<li><code>-p &lt;host_port&gt;:&lt;container_port&gt;</code> - 本機的通訊埠對應到容器的通訊埠</li>\n<li><code>-v, --volume &lt;host_dir&gt;:&lt;container_dir&gt;</code> - 掛載本機目錄至容器(自動建立)</li>\n<li><code>--mount &lt;type=bind,source=host_dir,target=container_dir&gt;</code> - 掛載本機目錄至容器</li>\n<li><code>-w, --workdir &lt;container_dir&gt;</code> - 指定工作目錄</li>\n<li><code>--name &lt;name&gt;</code> - 指定容器名稱</li>\n</ul>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run &lt;image&gt;[:&lt;tag&gt;]                            <span class=\"hljs-comment\"># 從映像檔啟動容器</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run --name &lt;name&gt; &lt;image&gt;                      <span class=\"hljs-comment\"># 指定容器名稱</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -dp &lt;host_port&gt;:&lt;container_port&gt; &lt;image&gt;   <span class=\"hljs-comment\"># 指定通訊埠並在背景運行</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker run -it --name &lt;name&gt; -v &lt;host_dir&gt;:&lt;container_dir&gt; &lt;image&gt; &lt;<span class=\"hljs-built_in\">command</span>&gt; <span class=\"hljs-comment\"># 從映像檔啟動、掛載目錄並進入容器維持輸入</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"DOCKERFILE\"><a href=\"#DOCKERFILE\" class=\"headerlink\" title=\"DOCKERFILE\"></a>DOCKERFILE</h2><p>若現有的image儲存庫無法滿足功能需求，可以透過dockerfile，在現有的image儲存庫上，構建自己的image。</p>\n<ul>\n<li><p>Dockerfile關鍵字使用說明</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> &lt;image&gt;[:&lt;tag&gt;]                          <span class=\"hljs-comment\"># 映像檔:版號</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> [--<span class=\"hljs-built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;  <span class=\"hljs-comment\"># 從&lt;src&gt;複製至image的&lt;dest&gt;處(支援從遠端下載，tar.gz檔自動解壓縮)</span></span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> [--<span class=\"hljs-built_in\">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt; <span class=\"hljs-comment\"># 從&lt;src&gt;複製至image的&lt;dest&gt;處(僅支援本地複製)</span></span><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> &lt;path&gt;                                <span class=\"hljs-comment\"># 設定工作目錄</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> &lt;<span class=\"hljs-built_in\">command</span>&gt;                                 <span class=\"hljs-comment\"># 在當前image上再執行指令並提交結果</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;executable&quot;</span>, <span class=\"hljs-string\">&quot;param1&quot;</span>, <span class=\"hljs-string\">&quot;param2&quot;</span>]        <span class=\"hljs-comment\"># 在當前image上再執行指令並提交結果</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> &lt;<span class=\"hljs-built_in\">command</span>&gt;                                 <span class=\"hljs-comment\"># 執行中容器提供初始指令</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;executable&quot;</span>, <span class=\"hljs-string\">&quot;param1&quot;</span>, <span class=\"hljs-string\">&quot;param2&quot;</span>]        <span class=\"hljs-comment\"># 2個以上CMD指令只會運行最後1個</span></span><br><span class=\"hljs-keyword\">USER</span> &lt;<span class=\"hljs-keyword\">user</span>&gt;[:&lt;group&gt;]                         <span class=\"hljs-comment\"># 設定使用者及群組</span><br><span class=\"hljs-keyword\">USER</span> &lt;uid&gt;[:&lt;gid&gt;]                            <span class=\"hljs-comment\"># 設定使用者及群組</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Dockerfile其他說明</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> &lt;base_image&gt; AS &lt;stage_name&gt;             <span class=\"hljs-comment\"># 命名提高可讀性</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=&lt;stage_name&gt;                      <span class=\"hljs-comment\"># 可複製image</span></span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>寫完dockerfile之後，再利用<code>docker build</code>建立自己的映像檔。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs console\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker build -t &lt;映像檔名稱&gt;[:&lt;tag&gt;] . --no-cache <span class=\"hljs-comment\"># 沒有tag時預設為latest，確定Dockerfile有放在同目錄下，--no-cache是避免在build的時候被cache住</span></span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">docker images                                     <span class=\"hljs-comment\"># 查看是否有build成功</span></span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> centos:<span class=\"hljs-number\">8</span>                   <span class=\"hljs-comment\"># 使用到image名稱及版本號</span><br><span class=\"hljs-keyword\">LABEL</span><span class=\"language-bash\"> maintainer=satoshi        <span class=\"hljs-comment\"># 維護者資訊</span></span><br><span class=\"hljs-comment\"># MAINTAINER satoshi            # 已棄用寫法(維護者資訊)</span><br><br><span class=\"hljs-keyword\">ARG</span> PROXY                       <span class=\"hljs-comment\"># 只在build時存在的變數(可從內部或外部設值，例如：docker build --build-arg PROXY=http://proxy.xxx.com.tw/:1234 .)</span><br><span class=\"hljs-keyword\">ENV</span> http_proxy=$&#123;PROXY&#125;         <span class=\"hljs-comment\"># 設定環境變數(在build及run時存在的變數)</span><br><span class=\"hljs-keyword\">ENV</span> https_proxy=$&#123;PROXY&#125;<br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> run.py test.txt /           <span class=\"hljs-comment\"># 將local檔案複製到image裡(tar.gz檔會自動解壓縮)</span></span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> yum install -y wget         <span class=\"hljs-comment\"># 安裝這個image需要的套件</span></span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">cd</span> /                        <span class=\"hljs-comment\"># 切換到根目錄</span></span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/run.py&quot;</span> , <span class=\"hljs-string\">&quot;test.txt&quot;</span>]    <span class=\"hljs-comment\"># docker run時做的指令</span></span><br></code></pre></td></tr></table></figure>\n"},{"title":"Git一二三，同步真簡單","date":"2022-08-24T06:07:00.000Z","updated":"2023-07-07T04:00:00.000Z","_content":"\nGit是一個多工團隊協作版控的好用工具，雖然一開始的概念有點小複雜，我也是花了好一陣子才漸漸搞懂它，因此。對於初學者而言，在了解Git指令之前，先要有local（本地）與remote（遠端）repository（儲存庫）的概念，以及各自的branch（分支）之後，或許會比較好入手。\n\n# Git指令全集\n## 概念\n0. 初始化git工作目錄\n\n   狀態：未初始化\n\n   ```bash\n   $ git init\n   ```\n\n   初始化後，目錄下新增.git目錄。\n\n1. 工作區（Working Directory）\n\n   狀態：未追蹤（Untracked files，對於新加入檔案或提交後新建立檔案）、已更改（Changes not staged for commit，對於提交後再被修改之檔案）\n\n   直接編輯的地方，在桌機上可直接操作檔案。\n\n   ```bash\n   # 工作區 -> 暫存區\n   $ git add .    # 將檔案從工作目錄加入至暫存區\n   ```\n\n2. 暫存區（Staging Area）\n\n   狀態：等待提交（Changes to be committed）\n\n   數據暫時存放的區域，介於工作區與儲存庫之間。\n\n   ```bash\n   # 暫存區 -> 儲存庫\n   $ git commit                   # 新開編輯器編輯提交訊息\n   $ git commit -m \"提交訊息\"     # 將暫存區內容移至儲存區\n   $ git commit -am \"提交訊息\"    # 從工作區移至儲存庫，對已在儲存庫的檔案有效\n   ```\n\n3. 儲存庫／數據庫（Repository）\n\n   狀態：已提交（Committed）\n\n   存放已經提交的數據。\n\n   1) 本地端儲存庫（Local）\n\n      為了方便自己使用的儲存庫，通常是個人開發的電腦或機台。\n\n      ```bash\n      # 本地端 -> 遠端儲存庫\n      $ git push        # 推送到遠端儲存庫\n\n      # 本地端複製\n      $ git clone <本地目錄名稱> <新本地目錄名稱|路徑>  # 複製本地儲存庫至指定目錄\n      ```\n\n   2) 遠端儲存庫（Remote）\n\n      為了讓多人共享而建立的儲存庫，通常是一個共用的伺服器。\n\n      ```bash\n      # 遠端 -> 本地端儲存庫\n      $ git fetch <遠端名稱> <遠端分支名稱>     # 下載遠端指定分支\n      $ git fetch --all                         # 下載遠端所有分支\n      $ git clone <遠端名稱>                    # 下載遠端預設分支\n      $ git clone <遠端名稱> -b <本地分支名稱>  # 下載遠端預設分支至指定本地分支\n      $ git clone <遠端名稱> <目錄名稱|路徑>    # 下載遠端預設分支至指定目錄\n\n      # 遠端儲存庫 -> 工作區\n      $ git pull <遠端名稱> <遠端分支名稱>:<本地分支名稱>   # git fetch + git merge\n      \n      ```\n\n\n## 常用指令\n\n```bash\n$ git init                  # 進行版本控制（此時就會有.git目錄產生）\n$ git status                # git狀態\n$ git add .                 # 將檔案加至暫存區\n$ git commit -m \"提交訊息\"  # 提交檔案至儲存庫\n$ git filter-branch --tree-filter \"rm -f config/database.yml\"   # 針對過去的提交批次修改紀錄並提交\n```\n\n## 將存放庫初始化\n\n首先必須要先將Git本地的存放庫初始化啦！\n\n到了想要透過Git監控的目錄git init，此時在目錄下會多出.git的隱藏目錄，這就相當於在VS code下在原始檔控制中的「將存放庫初始化」的功能。\n\n```bash\n$ git init  # 在當前目錄下創建.git以監控版更\n```\n\n## 查看當前git狀態\n\n先透過git status來查看當前git狀態。\n\n```bash\n$ git status  # 查看當前git狀態\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .gitignore\n```\n\n從輸出的內容，可以看到目前本地的分支名稱為master、沒有任何commit（提交），以及哪些檔案還沒被add（加入）追蹤（untracked）。\n\n目錄下可加入.gitignore檔案，裡面的內容可以加入不想同步追蹤的檔案名稱，以將這些檔案排除在git的檢查之外。\n\n目錄下加入.gitkeep則是強制git在檢查時，將空目錄也涵蓋進來。\n\n## 一、add（加入）untracked（未追蹤）檔案至暫存的變更\n\n當在目錄當中新增的檔案，只要是非空目錄、未被.gitignore排除檢查的檔案，或者並非是另一個含有.git的目錄，都會被列為檢查對象。\n\n利用VS code的原始檔控制，會自動偵測已變更的檔案（新增的檔案右方會顯示A(Add)、新增後變更的檔案會顯示M(Modified)），在「變更」欄的右方「+」號則可以將新增或變更的檔案加入到暫存的變更；在「暫存的變更」右方「-」號則是可以選擇取消變更的檔案，等修改好再加進去。\n\n如果利用指令列，則須透過git status來看各個檔案的情況。\n\n假設我們先新增一個test.md檔，這時候git status會列在untracked，於是我們git add：\n\n```bash\n$ git add test.md\n```\n\n這時候再git status，會看到檔案已被加入：\n\n```bash\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   test.md\n```\n\n如果再修改test.md檔案中的文字，再次git status則會看到：\n\n```bash\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   test.md\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   \"test.md\"\n```\n\n代表有一個版本已經加入暫存的變更等待提交，而另一個則是因為我們後來的修改而產生的版本，尚未加入提交的行列。\n\n> 若是目錄中含有其他git監測的目錄，則無法加入追蹤。\n\n```bash\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        themes/fluid/\n```\n\n像是Hexo部分目錄本身即含有git版控功能，因此部分目錄無法同步加入追蹤。\n\n## 二、新增訊息並commit（提交）\n\n當我們新增檔案或修改某些檔案裡的文字時，可以利用git commit分批提交更新訊息，把每一次的更新訊息記錄下來：\n\n```bash\n$ git commit -m \"add test.md\"\n[github 1da2962] revise Git相關指令.md\n 0 file changed, 1 insertions(+)\n create mode 100644 \"test.md\"\n```\n\n提交之後會顯示提交的分支名稱、提交ID、提交訊息、幾個檔案新增或者被改變。\n\n每次修改檔案之後，都要記得將檔案再度git add到要提交的行列當中。\n\n在提交之後，會發現本地端也新增了master分支，代表我們提交的內容會在我們本地的master分支裡。每修改某個檔案都可以在訊息欄做備註。但我們要推送的是遠端分支，而不是本地分支，要確定要提交上去的是哪一個分支。\n\n## 三、push（推送）至remote repository（遠端儲存庫）\n\n緊接著，你在工作目錄中陸陸續續新增的檔案，要放到遠端儲存庫供他人使用，就必須先將遠端儲存庫加入路徑之中。Github儲存庫URL在頁面右上角的「code」當中，使用HTTPS或SSH都可以，將想要放置檔案的Github儲存庫URL透過git remote add加入即可。\n\n```bash\n$ git remote add <遠端名稱> <遠端儲存庫URL>   # 將該遠端加入fetch跟push的路徑\n$ git remote -v                               # 查看遠端分支名稱及路徑\n$ git remote remove <遠端名稱>                # 對應之移除指令\n$ git remote rename <原遠端名稱> <新遠端名稱> # 更改遠端名稱\n```\n\n以遠端名稱為github為例：\n\n```bash\n$ git remote add github https://github.com/weijhih1226/blog.git\n$ git remote -v\ngithub    https://github.com/weijhih1226/blog.git (fetch)\ngithub    https://github.com/weijhih1226/blog.git (push)\n\n$ git branch -l               # 查看分支名稱（本地）\n$ git branch -a               # 查看所有分支名稱（本地及遠端）\n* master                      # 本地分支（目前的分支）\n  remotes/github/gh-pages     # 遠端分支\n  remotes/github/main         # 遠端分支\n```\n\n從上面git branch -a當中，可以看到因為目前本地端是在master分支底下，而遠端則在github底下有自動抓到2個分支。\n\n利用git checkout則可以切換分支。\n\n```bash\n$ git checkout <分支名稱>\n$ git checkout -b <新的分支名稱>\n```\n\n例如我們如果想將本地端的檔案同步到遠端的main分支上：\n\n```bash\n$ git checkout main\n```\n\n```bash\n$ git push <遠端名稱> <分支名稱>\n```\n\n例如：\n\n```bash\n$ git push github main\n```\n\n## 其他常用指令\n\n```bash\n$ git branch <分支名稱>                               # 建立本地分支\n$ git branch -d <分支名稱>                            # 刪除本地分支\n$ git branch <-m|--move> [<舊分支>] <新分支>          # 移動／更名分支\n$ git branch <-M|--move --force> [<舊分支>] <新分支>  # 強制移動／更名分支\n$ git push <遠端名稱> --delete <遠端分支名稱>         # 刪除遠端分支\n$ git push <遠端名稱> :<遠端分支名稱>                 # 刪除遠端分支\n$ git clone <遠端專案URL> -b <分支名稱>               # 複製遠端分支\n$ git pull <遠端名稱> <遠端分支名稱>:<本地分支名稱>   # git fetch + git merge\n```\n\n### 關於git組態\n\n```bash\n$ git config --global core.autocrlf true      # 自動轉換CRLF\n$ git config --global user.name \"xxx\"         # 使用者名稱\n$ git config --global user.email \"xxx@xx.com\" # 使用者電子郵件\n```\n\n### git忽略追蹤\n- 狀況一：新增過濾條件**後新增的檔案**\n  - 符合規則 Git 就不會去追蹤。\n- 狀況二：新增過濾條件**前新增的檔案**\n  - 沒有額外處理還是會被追蹤。\n  1. 於專案根目錄新增 `.gitignore` 檔案。\n  2. 於檔案內新增需要忽略的檔案、目錄等，例如：\n     ```yaml\n     *.conf          # 檔案\n     __pycache__/    # 目錄\n     ```\n  3. 若以 git status 查看，會發現記錄只有新增一個檔案而已，而這就是因為先有 Git 記錄才新增 .gitignore 檔案，因此進行以下步驟清除快取並重新加入追蹤，才會套用新的 .gitignore 設定：\n     ```bash\n     # 清除本機 Git 的快取，就是將所有檔案移除 Git 的追蹤，但沒有刪除檔案\n     $ git rm -r --cached .\n     # 重新加入 Git 追蹤，這時就會重新套入 .gitignore 設定\n     $ git add .\n     # 重新 commit ，並會忽略設定在 .gitignore 的檔案\n     $ git commit -m 'update .gitignore'\n     ```\n\n## 參考資料\n- https://shichia.medium.com/gitignore-忽略那些不該上傳的-git-檔案-2031ac4dc679","source":"_posts/Git相關指令.md","raw":"---\ntitle: Git一二三，同步真簡單\ncategories: [GitHub , Git]\ntags: [GitHub , Git]\ndate: 2022/08/24 14:07\nupdated: 2023/07/07 12:00\n---\n\nGit是一個多工團隊協作版控的好用工具，雖然一開始的概念有點小複雜，我也是花了好一陣子才漸漸搞懂它，因此。對於初學者而言，在了解Git指令之前，先要有local（本地）與remote（遠端）repository（儲存庫）的概念，以及各自的branch（分支）之後，或許會比較好入手。\n\n# Git指令全集\n## 概念\n0. 初始化git工作目錄\n\n   狀態：未初始化\n\n   ```bash\n   $ git init\n   ```\n\n   初始化後，目錄下新增.git目錄。\n\n1. 工作區（Working Directory）\n\n   狀態：未追蹤（Untracked files，對於新加入檔案或提交後新建立檔案）、已更改（Changes not staged for commit，對於提交後再被修改之檔案）\n\n   直接編輯的地方，在桌機上可直接操作檔案。\n\n   ```bash\n   # 工作區 -> 暫存區\n   $ git add .    # 將檔案從工作目錄加入至暫存區\n   ```\n\n2. 暫存區（Staging Area）\n\n   狀態：等待提交（Changes to be committed）\n\n   數據暫時存放的區域，介於工作區與儲存庫之間。\n\n   ```bash\n   # 暫存區 -> 儲存庫\n   $ git commit                   # 新開編輯器編輯提交訊息\n   $ git commit -m \"提交訊息\"     # 將暫存區內容移至儲存區\n   $ git commit -am \"提交訊息\"    # 從工作區移至儲存庫，對已在儲存庫的檔案有效\n   ```\n\n3. 儲存庫／數據庫（Repository）\n\n   狀態：已提交（Committed）\n\n   存放已經提交的數據。\n\n   1) 本地端儲存庫（Local）\n\n      為了方便自己使用的儲存庫，通常是個人開發的電腦或機台。\n\n      ```bash\n      # 本地端 -> 遠端儲存庫\n      $ git push        # 推送到遠端儲存庫\n\n      # 本地端複製\n      $ git clone <本地目錄名稱> <新本地目錄名稱|路徑>  # 複製本地儲存庫至指定目錄\n      ```\n\n   2) 遠端儲存庫（Remote）\n\n      為了讓多人共享而建立的儲存庫，通常是一個共用的伺服器。\n\n      ```bash\n      # 遠端 -> 本地端儲存庫\n      $ git fetch <遠端名稱> <遠端分支名稱>     # 下載遠端指定分支\n      $ git fetch --all                         # 下載遠端所有分支\n      $ git clone <遠端名稱>                    # 下載遠端預設分支\n      $ git clone <遠端名稱> -b <本地分支名稱>  # 下載遠端預設分支至指定本地分支\n      $ git clone <遠端名稱> <目錄名稱|路徑>    # 下載遠端預設分支至指定目錄\n\n      # 遠端儲存庫 -> 工作區\n      $ git pull <遠端名稱> <遠端分支名稱>:<本地分支名稱>   # git fetch + git merge\n      \n      ```\n\n\n## 常用指令\n\n```bash\n$ git init                  # 進行版本控制（此時就會有.git目錄產生）\n$ git status                # git狀態\n$ git add .                 # 將檔案加至暫存區\n$ git commit -m \"提交訊息\"  # 提交檔案至儲存庫\n$ git filter-branch --tree-filter \"rm -f config/database.yml\"   # 針對過去的提交批次修改紀錄並提交\n```\n\n## 將存放庫初始化\n\n首先必須要先將Git本地的存放庫初始化啦！\n\n到了想要透過Git監控的目錄git init，此時在目錄下會多出.git的隱藏目錄，這就相當於在VS code下在原始檔控制中的「將存放庫初始化」的功能。\n\n```bash\n$ git init  # 在當前目錄下創建.git以監控版更\n```\n\n## 查看當前git狀態\n\n先透過git status來查看當前git狀態。\n\n```bash\n$ git status  # 查看當前git狀態\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        .gitignore\n```\n\n從輸出的內容，可以看到目前本地的分支名稱為master、沒有任何commit（提交），以及哪些檔案還沒被add（加入）追蹤（untracked）。\n\n目錄下可加入.gitignore檔案，裡面的內容可以加入不想同步追蹤的檔案名稱，以將這些檔案排除在git的檢查之外。\n\n目錄下加入.gitkeep則是強制git在檢查時，將空目錄也涵蓋進來。\n\n## 一、add（加入）untracked（未追蹤）檔案至暫存的變更\n\n當在目錄當中新增的檔案，只要是非空目錄、未被.gitignore排除檢查的檔案，或者並非是另一個含有.git的目錄，都會被列為檢查對象。\n\n利用VS code的原始檔控制，會自動偵測已變更的檔案（新增的檔案右方會顯示A(Add)、新增後變更的檔案會顯示M(Modified)），在「變更」欄的右方「+」號則可以將新增或變更的檔案加入到暫存的變更；在「暫存的變更」右方「-」號則是可以選擇取消變更的檔案，等修改好再加進去。\n\n如果利用指令列，則須透過git status來看各個檔案的情況。\n\n假設我們先新增一個test.md檔，這時候git status會列在untracked，於是我們git add：\n\n```bash\n$ git add test.md\n```\n\n這時候再git status，會看到檔案已被加入：\n\n```bash\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   test.md\n```\n\n如果再修改test.md檔案中的文字，再次git status則會看到：\n\n```bash\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   test.md\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   \"test.md\"\n```\n\n代表有一個版本已經加入暫存的變更等待提交，而另一個則是因為我們後來的修改而產生的版本，尚未加入提交的行列。\n\n> 若是目錄中含有其他git監測的目錄，則無法加入追蹤。\n\n```bash\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        themes/fluid/\n```\n\n像是Hexo部分目錄本身即含有git版控功能，因此部分目錄無法同步加入追蹤。\n\n## 二、新增訊息並commit（提交）\n\n當我們新增檔案或修改某些檔案裡的文字時，可以利用git commit分批提交更新訊息，把每一次的更新訊息記錄下來：\n\n```bash\n$ git commit -m \"add test.md\"\n[github 1da2962] revise Git相關指令.md\n 0 file changed, 1 insertions(+)\n create mode 100644 \"test.md\"\n```\n\n提交之後會顯示提交的分支名稱、提交ID、提交訊息、幾個檔案新增或者被改變。\n\n每次修改檔案之後，都要記得將檔案再度git add到要提交的行列當中。\n\n在提交之後，會發現本地端也新增了master分支，代表我們提交的內容會在我們本地的master分支裡。每修改某個檔案都可以在訊息欄做備註。但我們要推送的是遠端分支，而不是本地分支，要確定要提交上去的是哪一個分支。\n\n## 三、push（推送）至remote repository（遠端儲存庫）\n\n緊接著，你在工作目錄中陸陸續續新增的檔案，要放到遠端儲存庫供他人使用，就必須先將遠端儲存庫加入路徑之中。Github儲存庫URL在頁面右上角的「code」當中，使用HTTPS或SSH都可以，將想要放置檔案的Github儲存庫URL透過git remote add加入即可。\n\n```bash\n$ git remote add <遠端名稱> <遠端儲存庫URL>   # 將該遠端加入fetch跟push的路徑\n$ git remote -v                               # 查看遠端分支名稱及路徑\n$ git remote remove <遠端名稱>                # 對應之移除指令\n$ git remote rename <原遠端名稱> <新遠端名稱> # 更改遠端名稱\n```\n\n以遠端名稱為github為例：\n\n```bash\n$ git remote add github https://github.com/weijhih1226/blog.git\n$ git remote -v\ngithub    https://github.com/weijhih1226/blog.git (fetch)\ngithub    https://github.com/weijhih1226/blog.git (push)\n\n$ git branch -l               # 查看分支名稱（本地）\n$ git branch -a               # 查看所有分支名稱（本地及遠端）\n* master                      # 本地分支（目前的分支）\n  remotes/github/gh-pages     # 遠端分支\n  remotes/github/main         # 遠端分支\n```\n\n從上面git branch -a當中，可以看到因為目前本地端是在master分支底下，而遠端則在github底下有自動抓到2個分支。\n\n利用git checkout則可以切換分支。\n\n```bash\n$ git checkout <分支名稱>\n$ git checkout -b <新的分支名稱>\n```\n\n例如我們如果想將本地端的檔案同步到遠端的main分支上：\n\n```bash\n$ git checkout main\n```\n\n```bash\n$ git push <遠端名稱> <分支名稱>\n```\n\n例如：\n\n```bash\n$ git push github main\n```\n\n## 其他常用指令\n\n```bash\n$ git branch <分支名稱>                               # 建立本地分支\n$ git branch -d <分支名稱>                            # 刪除本地分支\n$ git branch <-m|--move> [<舊分支>] <新分支>          # 移動／更名分支\n$ git branch <-M|--move --force> [<舊分支>] <新分支>  # 強制移動／更名分支\n$ git push <遠端名稱> --delete <遠端分支名稱>         # 刪除遠端分支\n$ git push <遠端名稱> :<遠端分支名稱>                 # 刪除遠端分支\n$ git clone <遠端專案URL> -b <分支名稱>               # 複製遠端分支\n$ git pull <遠端名稱> <遠端分支名稱>:<本地分支名稱>   # git fetch + git merge\n```\n\n### 關於git組態\n\n```bash\n$ git config --global core.autocrlf true      # 自動轉換CRLF\n$ git config --global user.name \"xxx\"         # 使用者名稱\n$ git config --global user.email \"xxx@xx.com\" # 使用者電子郵件\n```\n\n### git忽略追蹤\n- 狀況一：新增過濾條件**後新增的檔案**\n  - 符合規則 Git 就不會去追蹤。\n- 狀況二：新增過濾條件**前新增的檔案**\n  - 沒有額外處理還是會被追蹤。\n  1. 於專案根目錄新增 `.gitignore` 檔案。\n  2. 於檔案內新增需要忽略的檔案、目錄等，例如：\n     ```yaml\n     *.conf          # 檔案\n     __pycache__/    # 目錄\n     ```\n  3. 若以 git status 查看，會發現記錄只有新增一個檔案而已，而這就是因為先有 Git 記錄才新增 .gitignore 檔案，因此進行以下步驟清除快取並重新加入追蹤，才會套用新的 .gitignore 設定：\n     ```bash\n     # 清除本機 Git 的快取，就是將所有檔案移除 Git 的追蹤，但沒有刪除檔案\n     $ git rm -r --cached .\n     # 重新加入 Git 追蹤，這時就會重新套入 .gitignore 設定\n     $ git add .\n     # 重新 commit ，並會忽略設定在 .gitignore 的檔案\n     $ git commit -m 'update .gitignore'\n     ```\n\n## 參考資料\n- https://shichia.medium.com/gitignore-忽略那些不該上傳的-git-檔案-2031ac4dc679","slug":"Git相關指令","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr18000pv47fajzi4xw7","content":"<p>Git是一個多工團隊協作版控的好用工具，雖然一開始的概念有點小複雜，我也是花了好一陣子才漸漸搞懂它，因此。對於初學者而言，在了解Git指令之前，先要有local（本地）與remote（遠端）repository（儲存庫）的概念，以及各自的branch（分支）之後，或許會比較好入手。</p>\n<h1 id=\"Git指令全集\"><a href=\"#Git指令全集\" class=\"headerlink\" title=\"Git指令全集\"></a>Git指令全集</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol start=\"0\">\n<li><p>初始化git工作目錄</p>\n<p>狀態：未初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init<br></code></pre></td></tr></table></figure>\n\n<p>初始化後，目錄下新增.git目錄。</p>\n</li>\n<li><p>工作區（Working Directory）</p>\n<p>狀態：未追蹤（Untracked files，對於新加入檔案或提交後新建立檔案）、已更改（Changes not staged for commit，對於提交後再被修改之檔案）</p>\n<p>直接編輯的地方，在桌機上可直接操作檔案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 工作區 -&gt; 暫存區</span><br>$ git add .    <span class=\"hljs-comment\"># 將檔案從工作目錄加入至暫存區</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>暫存區（Staging Area）</p>\n<p>狀態：等待提交（Changes to be committed）</p>\n<p>數據暫時存放的區域，介於工作區與儲存庫之間。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 暫存區 -&gt; 儲存庫</span><br>$ git commit                   <span class=\"hljs-comment\"># 新開編輯器編輯提交訊息</span><br>$ git commit -m <span class=\"hljs-string\">&quot;提交訊息&quot;</span>     <span class=\"hljs-comment\"># 將暫存區內容移至儲存區</span><br>$ git commit -am <span class=\"hljs-string\">&quot;提交訊息&quot;</span>    <span class=\"hljs-comment\"># 從工作區移至儲存庫，對已在儲存庫的檔案有效</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>儲存庫／數據庫（Repository）</p>\n<p>狀態：已提交（Committed）</p>\n<p>存放已經提交的數據。</p>\n<ol>\n<li><p>本地端儲存庫（Local）</p>\n<p>為了方便自己使用的儲存庫，通常是個人開發的電腦或機台。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 本地端 -&gt; 遠端儲存庫</span><br>$ git push        <span class=\"hljs-comment\"># 推送到遠端儲存庫</span><br><br><span class=\"hljs-comment\"># 本地端複製</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;本地目錄名稱&gt; &lt;新本地目錄名稱|路徑&gt;  <span class=\"hljs-comment\"># 複製本地儲存庫至指定目錄</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>遠端儲存庫（Remote）</p>\n<p>為了讓多人共享而建立的儲存庫，通常是一個共用的伺服器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 遠端 -&gt; 本地端儲存庫</span><br>$ git fetch &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;     <span class=\"hljs-comment\"># 下載遠端指定分支</span><br>$ git fetch --all                         <span class=\"hljs-comment\"># 下載遠端所有分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt;                    <span class=\"hljs-comment\"># 下載遠端預設分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt; -b &lt;本地分支名稱&gt;  <span class=\"hljs-comment\"># 下載遠端預設分支至指定本地分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt; &lt;目錄名稱|路徑&gt;    <span class=\"hljs-comment\"># 下載遠端預設分支至指定目錄</span><br><br><span class=\"hljs-comment\"># 遠端儲存庫 -&gt; 工作區</span><br>$ git pull &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;:&lt;本地分支名稱&gt;   <span class=\"hljs-comment\"># git fetch + git merge</span><br><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init                  <span class=\"hljs-comment\"># 進行版本控制（此時就會有.git目錄產生）</span><br>$ git status                <span class=\"hljs-comment\"># git狀態</span><br>$ git add .                 <span class=\"hljs-comment\"># 將檔案加至暫存區</span><br>$ git commit -m <span class=\"hljs-string\">&quot;提交訊息&quot;</span>  <span class=\"hljs-comment\"># 提交檔案至儲存庫</span><br>$ git filter-branch --tree-filter <span class=\"hljs-string\">&quot;rm -f config/database.yml&quot;</span>   <span class=\"hljs-comment\"># 針對過去的提交批次修改紀錄並提交</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"將存放庫初始化\"><a href=\"#將存放庫初始化\" class=\"headerlink\" title=\"將存放庫初始化\"></a>將存放庫初始化</h2><p>首先必須要先將Git本地的存放庫初始化啦！</p>\n<p>到了想要透過Git監控的目錄git init，此時在目錄下會多出.git的隱藏目錄，這就相當於在VS code下在原始檔控制中的「將存放庫初始化」的功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init  <span class=\"hljs-comment\"># 在當前目錄下創建.git以監控版更</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看當前git狀態\"><a href=\"#查看當前git狀態\" class=\"headerlink\" title=\"查看當前git狀態\"></a>查看當前git狀態</h2><p>先透過git status來查看當前git狀態。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git status  <span class=\"hljs-comment\"># 查看當前git狀態</span><br>On branch master<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)<br>        .gitignore<br></code></pre></td></tr></table></figure>\n\n<p>從輸出的內容，可以看到目前本地的分支名稱為master、沒有任何commit（提交），以及哪些檔案還沒被add（加入）追蹤（untracked）。</p>\n<p>目錄下可加入.gitignore檔案，裡面的內容可以加入不想同步追蹤的檔案名稱，以將這些檔案排除在git的檢查之外。</p>\n<p>目錄下加入.gitkeep則是強制git在檢查時，將空目錄也涵蓋進來。</p>\n<h2 id=\"一、add（加入）untracked（未追蹤）檔案至暫存的變更\"><a href=\"#一、add（加入）untracked（未追蹤）檔案至暫存的變更\" class=\"headerlink\" title=\"一、add（加入）untracked（未追蹤）檔案至暫存的變更\"></a>一、add（加入）untracked（未追蹤）檔案至暫存的變更</h2><p>當在目錄當中新增的檔案，只要是非空目錄、未被.gitignore排除檢查的檔案，或者並非是另一個含有.git的目錄，都會被列為檢查對象。</p>\n<p>利用VS code的原始檔控制，會自動偵測已變更的檔案（新增的檔案右方會顯示A(Add)、新增後變更的檔案會顯示M(Modified)），在「變更」欄的右方「+」號則可以將新增或變更的檔案加入到暫存的變更；在「暫存的變更」右方「-」號則是可以選擇取消變更的檔案，等修改好再加進去。</p>\n<p>如果利用指令列，則須透過git status來看各個檔案的情況。</p>\n<p>假設我們先新增一個test.md檔，這時候git status會列在untracked，於是我們git add：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git add test.md<br></code></pre></td></tr></table></figure>\n\n<p>這時候再git status，會看到檔案已被加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Changes to be committed:<br>  (use <span class=\"hljs-string\">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   test.md<br></code></pre></td></tr></table></figure>\n\n<p>如果再修改test.md檔案中的文字，再次git status則會看到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Changes to be committed:<br>  (use <span class=\"hljs-string\">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   test.md<br><br>Changes not staged <span class=\"hljs-keyword\">for</span> commit:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class=\"hljs-string\">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class=\"hljs-keyword\">in</span> working directory)<br>        modified:   <span class=\"hljs-string\">&quot;test.md&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>代表有一個版本已經加入暫存的變更等待提交，而另一個則是因為我們後來的修改而產生的版本，尚未加入提交的行列。</p>\n<blockquote>\n<p>若是目錄中含有其他git監測的目錄，則無法加入追蹤。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Untracked files:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)<br>        themes/fluid/<br></code></pre></td></tr></table></figure>\n\n<p>像是Hexo部分目錄本身即含有git版控功能，因此部分目錄無法同步加入追蹤。</p>\n<h2 id=\"二、新增訊息並commit（提交）\"><a href=\"#二、新增訊息並commit（提交）\" class=\"headerlink\" title=\"二、新增訊息並commit（提交）\"></a>二、新增訊息並commit（提交）</h2><p>當我們新增檔案或修改某些檔案裡的文字時，可以利用git commit分批提交更新訊息，把每一次的更新訊息記錄下來：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git commit -m <span class=\"hljs-string\">&quot;add test.md&quot;</span><br>[github 1da2962] revise Git相關指令.md<br> 0 file changed, 1 insertions(+)<br> create mode 100644 <span class=\"hljs-string\">&quot;test.md&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>提交之後會顯示提交的分支名稱、提交ID、提交訊息、幾個檔案新增或者被改變。</p>\n<p>每次修改檔案之後，都要記得將檔案再度git add到要提交的行列當中。</p>\n<p>在提交之後，會發現本地端也新增了master分支，代表我們提交的內容會在我們本地的master分支裡。每修改某個檔案都可以在訊息欄做備註。但我們要推送的是遠端分支，而不是本地分支，要確定要提交上去的是哪一個分支。</p>\n<h2 id=\"三、push（推送）至remote-repository（遠端儲存庫）\"><a href=\"#三、push（推送）至remote-repository（遠端儲存庫）\" class=\"headerlink\" title=\"三、push（推送）至remote repository（遠端儲存庫）\"></a>三、push（推送）至remote repository（遠端儲存庫）</h2><p>緊接著，你在工作目錄中陸陸續續新增的檔案，要放到遠端儲存庫供他人使用，就必須先將遠端儲存庫加入路徑之中。Github儲存庫URL在頁面右上角的「code」當中，使用HTTPS或SSH都可以，將想要放置檔案的Github儲存庫URL透過git remote add加入即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git remote add &lt;遠端名稱&gt; &lt;遠端儲存庫URL&gt;   <span class=\"hljs-comment\"># 將該遠端加入fetch跟push的路徑</span><br>$ git remote -v                               <span class=\"hljs-comment\"># 查看遠端分支名稱及路徑</span><br>$ git remote remove &lt;遠端名稱&gt;                <span class=\"hljs-comment\"># 對應之移除指令</span><br>$ git remote rename &lt;原遠端名稱&gt; &lt;新遠端名稱&gt; <span class=\"hljs-comment\"># 更改遠端名稱</span><br></code></pre></td></tr></table></figure>\n\n<p>以遠端名稱為github為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git remote add github https://github.com/weijhih1226/blog.git<br>$ git remote -v<br>github    https://github.com/weijhih1226/blog.git (fetch)<br>github    https://github.com/weijhih1226/blog.git (push)<br><br>$ git branch -l               <span class=\"hljs-comment\"># 查看分支名稱（本地）</span><br>$ git branch -a               <span class=\"hljs-comment\"># 查看所有分支名稱（本地及遠端）</span><br>* master                      <span class=\"hljs-comment\"># 本地分支（目前的分支）</span><br>  remotes/github/gh-pages     <span class=\"hljs-comment\"># 遠端分支</span><br>  remotes/github/main         <span class=\"hljs-comment\"># 遠端分支</span><br></code></pre></td></tr></table></figure>\n\n<p>從上面git branch -a當中，可以看到因為目前本地端是在master分支底下，而遠端則在github底下有自動抓到2個分支。</p>\n<p>利用git checkout則可以切換分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git checkout &lt;分支名稱&gt;<br>$ git checkout -b &lt;新的分支名稱&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如我們如果想將本地端的檔案同步到遠端的main分支上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git checkout main<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git push &lt;遠端名稱&gt; &lt;分支名稱&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git push github main<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git branch &lt;分支名稱&gt;                               <span class=\"hljs-comment\"># 建立本地分支</span><br>$ git branch -d &lt;分支名稱&gt;                            <span class=\"hljs-comment\"># 刪除本地分支</span><br>$ git branch &lt;-m|--move&gt; [&lt;舊分支&gt;] &lt;新分支&gt;          <span class=\"hljs-comment\"># 移動／更名分支</span><br>$ git branch &lt;-M|--move --force&gt; [&lt;舊分支&gt;] &lt;新分支&gt;  <span class=\"hljs-comment\"># 強制移動／更名分支</span><br>$ git push &lt;遠端名稱&gt; --delete &lt;遠端分支名稱&gt;         <span class=\"hljs-comment\"># 刪除遠端分支</span><br>$ git push &lt;遠端名稱&gt; :&lt;遠端分支名稱&gt;                 <span class=\"hljs-comment\"># 刪除遠端分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端專案URL&gt; -b &lt;分支名稱&gt;               <span class=\"hljs-comment\"># 複製遠端分支</span><br>$ git pull &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;:&lt;本地分支名稱&gt;   <span class=\"hljs-comment\"># git fetch + git merge</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"關於git組態\"><a href=\"#關於git組態\" class=\"headerlink\" title=\"關於git組態\"></a>關於git組態</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git config --global core.autocrlf <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\"># 自動轉換CRLF</span><br>$ git config --global user.name <span class=\"hljs-string\">&quot;xxx&quot;</span>         <span class=\"hljs-comment\"># 使用者名稱</span><br>$ git config --global user.email <span class=\"hljs-string\">&quot;xxx@xx.com&quot;</span> <span class=\"hljs-comment\"># 使用者電子郵件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"git忽略追蹤\"><a href=\"#git忽略追蹤\" class=\"headerlink\" title=\"git忽略追蹤\"></a>git忽略追蹤</h3><ul>\n<li>狀況一：新增過濾條件<strong>後新增的檔案</strong><ul>\n<li>符合規則 Git 就不會去追蹤。</li>\n</ul>\n</li>\n<li>狀況二：新增過濾條件<strong>前新增的檔案</strong><ul>\n<li>沒有額外處理還是會被追蹤。</li>\n</ul>\n<ol>\n<li>於專案根目錄新增 <code>.gitignore</code> 檔案。</li>\n<li>於檔案內新增需要忽略的檔案、目錄等，例如：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">*.conf</span>          <span class=\"hljs-comment\"># 檔案</span><br><span class=\"hljs-string\">__pycache__/</span>    <span class=\"hljs-comment\"># 目錄</span><br></code></pre></td></tr></table></figure></li>\n<li>若以 git status 查看，會發現記錄只有新增一個檔案而已，而這就是因為先有 Git 記錄才新增 .gitignore 檔案，因此進行以下步驟清除快取並重新加入追蹤，才會套用新的 .gitignore 設定：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 清除本機 Git 的快取，就是將所有檔案移除 Git 的追蹤，但沒有刪除檔案</span><br>$ git <span class=\"hljs-built_in\">rm</span> -r --cached .<br><span class=\"hljs-comment\"># 重新加入 Git 追蹤，這時就會重新套入 .gitignore 設定</span><br>$ git add .<br><span class=\"hljs-comment\"># 重新 commit ，並會忽略設定在 .gitignore 的檔案</span><br>$ git commit -m <span class=\"hljs-string\">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://shichia.medium.com/gitignore-%E5%BF%BD%E7%95%A5%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%A9%B2%E4%B8%8A%E5%82%B3%E7%9A%84-git-%E6%AA%94%E6%A1%88-2031ac4dc679\">https://shichia.medium.com/gitignore-忽略那些不該上傳的-git-檔案-2031ac4dc679</a></li>\n</ul>\n","excerpt":"","more":"<p>Git是一個多工團隊協作版控的好用工具，雖然一開始的概念有點小複雜，我也是花了好一陣子才漸漸搞懂它，因此。對於初學者而言，在了解Git指令之前，先要有local（本地）與remote（遠端）repository（儲存庫）的概念，以及各自的branch（分支）之後，或許會比較好入手。</p>\n<h1 id=\"Git指令全集\"><a href=\"#Git指令全集\" class=\"headerlink\" title=\"Git指令全集\"></a>Git指令全集</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol start=\"0\">\n<li><p>初始化git工作目錄</p>\n<p>狀態：未初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init<br></code></pre></td></tr></table></figure>\n\n<p>初始化後，目錄下新增.git目錄。</p>\n</li>\n<li><p>工作區（Working Directory）</p>\n<p>狀態：未追蹤（Untracked files，對於新加入檔案或提交後新建立檔案）、已更改（Changes not staged for commit，對於提交後再被修改之檔案）</p>\n<p>直接編輯的地方，在桌機上可直接操作檔案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 工作區 -&gt; 暫存區</span><br>$ git add .    <span class=\"hljs-comment\"># 將檔案從工作目錄加入至暫存區</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>暫存區（Staging Area）</p>\n<p>狀態：等待提交（Changes to be committed）</p>\n<p>數據暫時存放的區域，介於工作區與儲存庫之間。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 暫存區 -&gt; 儲存庫</span><br>$ git commit                   <span class=\"hljs-comment\"># 新開編輯器編輯提交訊息</span><br>$ git commit -m <span class=\"hljs-string\">&quot;提交訊息&quot;</span>     <span class=\"hljs-comment\"># 將暫存區內容移至儲存區</span><br>$ git commit -am <span class=\"hljs-string\">&quot;提交訊息&quot;</span>    <span class=\"hljs-comment\"># 從工作區移至儲存庫，對已在儲存庫的檔案有效</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>儲存庫／數據庫（Repository）</p>\n<p>狀態：已提交（Committed）</p>\n<p>存放已經提交的數據。</p>\n<ol>\n<li><p>本地端儲存庫（Local）</p>\n<p>為了方便自己使用的儲存庫，通常是個人開發的電腦或機台。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 本地端 -&gt; 遠端儲存庫</span><br>$ git push        <span class=\"hljs-comment\"># 推送到遠端儲存庫</span><br><br><span class=\"hljs-comment\"># 本地端複製</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;本地目錄名稱&gt; &lt;新本地目錄名稱|路徑&gt;  <span class=\"hljs-comment\"># 複製本地儲存庫至指定目錄</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>遠端儲存庫（Remote）</p>\n<p>為了讓多人共享而建立的儲存庫，通常是一個共用的伺服器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 遠端 -&gt; 本地端儲存庫</span><br>$ git fetch &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;     <span class=\"hljs-comment\"># 下載遠端指定分支</span><br>$ git fetch --all                         <span class=\"hljs-comment\"># 下載遠端所有分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt;                    <span class=\"hljs-comment\"># 下載遠端預設分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt; -b &lt;本地分支名稱&gt;  <span class=\"hljs-comment\"># 下載遠端預設分支至指定本地分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端名稱&gt; &lt;目錄名稱|路徑&gt;    <span class=\"hljs-comment\"># 下載遠端預設分支至指定目錄</span><br><br><span class=\"hljs-comment\"># 遠端儲存庫 -&gt; 工作區</span><br>$ git pull &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;:&lt;本地分支名稱&gt;   <span class=\"hljs-comment\"># git fetch + git merge</span><br><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init                  <span class=\"hljs-comment\"># 進行版本控制（此時就會有.git目錄產生）</span><br>$ git status                <span class=\"hljs-comment\"># git狀態</span><br>$ git add .                 <span class=\"hljs-comment\"># 將檔案加至暫存區</span><br>$ git commit -m <span class=\"hljs-string\">&quot;提交訊息&quot;</span>  <span class=\"hljs-comment\"># 提交檔案至儲存庫</span><br>$ git filter-branch --tree-filter <span class=\"hljs-string\">&quot;rm -f config/database.yml&quot;</span>   <span class=\"hljs-comment\"># 針對過去的提交批次修改紀錄並提交</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"將存放庫初始化\"><a href=\"#將存放庫初始化\" class=\"headerlink\" title=\"將存放庫初始化\"></a>將存放庫初始化</h2><p>首先必須要先將Git本地的存放庫初始化啦！</p>\n<p>到了想要透過Git監控的目錄git init，此時在目錄下會多出.git的隱藏目錄，這就相當於在VS code下在原始檔控制中的「將存放庫初始化」的功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git init  <span class=\"hljs-comment\"># 在當前目錄下創建.git以監控版更</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看當前git狀態\"><a href=\"#查看當前git狀態\" class=\"headerlink\" title=\"查看當前git狀態\"></a>查看當前git狀態</h2><p>先透過git status來查看當前git狀態。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git status  <span class=\"hljs-comment\"># 查看當前git狀態</span><br>On branch master<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)<br>        .gitignore<br></code></pre></td></tr></table></figure>\n\n<p>從輸出的內容，可以看到目前本地的分支名稱為master、沒有任何commit（提交），以及哪些檔案還沒被add（加入）追蹤（untracked）。</p>\n<p>目錄下可加入.gitignore檔案，裡面的內容可以加入不想同步追蹤的檔案名稱，以將這些檔案排除在git的檢查之外。</p>\n<p>目錄下加入.gitkeep則是強制git在檢查時，將空目錄也涵蓋進來。</p>\n<h2 id=\"一、add（加入）untracked（未追蹤）檔案至暫存的變更\"><a href=\"#一、add（加入）untracked（未追蹤）檔案至暫存的變更\" class=\"headerlink\" title=\"一、add（加入）untracked（未追蹤）檔案至暫存的變更\"></a>一、add（加入）untracked（未追蹤）檔案至暫存的變更</h2><p>當在目錄當中新增的檔案，只要是非空目錄、未被.gitignore排除檢查的檔案，或者並非是另一個含有.git的目錄，都會被列為檢查對象。</p>\n<p>利用VS code的原始檔控制，會自動偵測已變更的檔案（新增的檔案右方會顯示A(Add)、新增後變更的檔案會顯示M(Modified)），在「變更」欄的右方「+」號則可以將新增或變更的檔案加入到暫存的變更；在「暫存的變更」右方「-」號則是可以選擇取消變更的檔案，等修改好再加進去。</p>\n<p>如果利用指令列，則須透過git status來看各個檔案的情況。</p>\n<p>假設我們先新增一個test.md檔，這時候git status會列在untracked，於是我們git add：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git add test.md<br></code></pre></td></tr></table></figure>\n\n<p>這時候再git status，會看到檔案已被加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Changes to be committed:<br>  (use <span class=\"hljs-string\">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   test.md<br></code></pre></td></tr></table></figure>\n\n<p>如果再修改test.md檔案中的文字，再次git status則會看到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Changes to be committed:<br>  (use <span class=\"hljs-string\">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   test.md<br><br>Changes not staged <span class=\"hljs-keyword\">for</span> commit:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)<br>  (use <span class=\"hljs-string\">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class=\"hljs-keyword\">in</span> working directory)<br>        modified:   <span class=\"hljs-string\">&quot;test.md&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>代表有一個版本已經加入暫存的變更等待提交，而另一個則是因為我們後來的修改而產生的版本，尚未加入提交的行列。</p>\n<blockquote>\n<p>若是目錄中含有其他git監測的目錄，則無法加入追蹤。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Untracked files:<br>  (use <span class=\"hljs-string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"hljs-keyword\">in</span> what will be committed)<br>        themes/fluid/<br></code></pre></td></tr></table></figure>\n\n<p>像是Hexo部分目錄本身即含有git版控功能，因此部分目錄無法同步加入追蹤。</p>\n<h2 id=\"二、新增訊息並commit（提交）\"><a href=\"#二、新增訊息並commit（提交）\" class=\"headerlink\" title=\"二、新增訊息並commit（提交）\"></a>二、新增訊息並commit（提交）</h2><p>當我們新增檔案或修改某些檔案裡的文字時，可以利用git commit分批提交更新訊息，把每一次的更新訊息記錄下來：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git commit -m <span class=\"hljs-string\">&quot;add test.md&quot;</span><br>[github 1da2962] revise Git相關指令.md<br> 0 file changed, 1 insertions(+)<br> create mode 100644 <span class=\"hljs-string\">&quot;test.md&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>提交之後會顯示提交的分支名稱、提交ID、提交訊息、幾個檔案新增或者被改變。</p>\n<p>每次修改檔案之後，都要記得將檔案再度git add到要提交的行列當中。</p>\n<p>在提交之後，會發現本地端也新增了master分支，代表我們提交的內容會在我們本地的master分支裡。每修改某個檔案都可以在訊息欄做備註。但我們要推送的是遠端分支，而不是本地分支，要確定要提交上去的是哪一個分支。</p>\n<h2 id=\"三、push（推送）至remote-repository（遠端儲存庫）\"><a href=\"#三、push（推送）至remote-repository（遠端儲存庫）\" class=\"headerlink\" title=\"三、push（推送）至remote repository（遠端儲存庫）\"></a>三、push（推送）至remote repository（遠端儲存庫）</h2><p>緊接著，你在工作目錄中陸陸續續新增的檔案，要放到遠端儲存庫供他人使用，就必須先將遠端儲存庫加入路徑之中。Github儲存庫URL在頁面右上角的「code」當中，使用HTTPS或SSH都可以，將想要放置檔案的Github儲存庫URL透過git remote add加入即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git remote add &lt;遠端名稱&gt; &lt;遠端儲存庫URL&gt;   <span class=\"hljs-comment\"># 將該遠端加入fetch跟push的路徑</span><br>$ git remote -v                               <span class=\"hljs-comment\"># 查看遠端分支名稱及路徑</span><br>$ git remote remove &lt;遠端名稱&gt;                <span class=\"hljs-comment\"># 對應之移除指令</span><br>$ git remote rename &lt;原遠端名稱&gt; &lt;新遠端名稱&gt; <span class=\"hljs-comment\"># 更改遠端名稱</span><br></code></pre></td></tr></table></figure>\n\n<p>以遠端名稱為github為例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git remote add github https://github.com/weijhih1226/blog.git<br>$ git remote -v<br>github    https://github.com/weijhih1226/blog.git (fetch)<br>github    https://github.com/weijhih1226/blog.git (push)<br><br>$ git branch -l               <span class=\"hljs-comment\"># 查看分支名稱（本地）</span><br>$ git branch -a               <span class=\"hljs-comment\"># 查看所有分支名稱（本地及遠端）</span><br>* master                      <span class=\"hljs-comment\"># 本地分支（目前的分支）</span><br>  remotes/github/gh-pages     <span class=\"hljs-comment\"># 遠端分支</span><br>  remotes/github/main         <span class=\"hljs-comment\"># 遠端分支</span><br></code></pre></td></tr></table></figure>\n\n<p>從上面git branch -a當中，可以看到因為目前本地端是在master分支底下，而遠端則在github底下有自動抓到2個分支。</p>\n<p>利用git checkout則可以切換分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git checkout &lt;分支名稱&gt;<br>$ git checkout -b &lt;新的分支名稱&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如我們如果想將本地端的檔案同步到遠端的main分支上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git checkout main<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git push &lt;遠端名稱&gt; &lt;分支名稱&gt;<br></code></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git push github main<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git branch &lt;分支名稱&gt;                               <span class=\"hljs-comment\"># 建立本地分支</span><br>$ git branch -d &lt;分支名稱&gt;                            <span class=\"hljs-comment\"># 刪除本地分支</span><br>$ git branch &lt;-m|--move&gt; [&lt;舊分支&gt;] &lt;新分支&gt;          <span class=\"hljs-comment\"># 移動／更名分支</span><br>$ git branch &lt;-M|--move --force&gt; [&lt;舊分支&gt;] &lt;新分支&gt;  <span class=\"hljs-comment\"># 強制移動／更名分支</span><br>$ git push &lt;遠端名稱&gt; --delete &lt;遠端分支名稱&gt;         <span class=\"hljs-comment\"># 刪除遠端分支</span><br>$ git push &lt;遠端名稱&gt; :&lt;遠端分支名稱&gt;                 <span class=\"hljs-comment\"># 刪除遠端分支</span><br>$ git <span class=\"hljs-built_in\">clone</span> &lt;遠端專案URL&gt; -b &lt;分支名稱&gt;               <span class=\"hljs-comment\"># 複製遠端分支</span><br>$ git pull &lt;遠端名稱&gt; &lt;遠端分支名稱&gt;:&lt;本地分支名稱&gt;   <span class=\"hljs-comment\"># git fetch + git merge</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"關於git組態\"><a href=\"#關於git組態\" class=\"headerlink\" title=\"關於git組態\"></a>關於git組態</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git config --global core.autocrlf <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\"># 自動轉換CRLF</span><br>$ git config --global user.name <span class=\"hljs-string\">&quot;xxx&quot;</span>         <span class=\"hljs-comment\"># 使用者名稱</span><br>$ git config --global user.email <span class=\"hljs-string\">&quot;xxx@xx.com&quot;</span> <span class=\"hljs-comment\"># 使用者電子郵件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"git忽略追蹤\"><a href=\"#git忽略追蹤\" class=\"headerlink\" title=\"git忽略追蹤\"></a>git忽略追蹤</h3><ul>\n<li>狀況一：新增過濾條件<strong>後新增的檔案</strong><ul>\n<li>符合規則 Git 就不會去追蹤。</li>\n</ul>\n</li>\n<li>狀況二：新增過濾條件<strong>前新增的檔案</strong><ul>\n<li>沒有額外處理還是會被追蹤。</li>\n</ul>\n<ol>\n<li>於專案根目錄新增 <code>.gitignore</code> 檔案。</li>\n<li>於檔案內新增需要忽略的檔案、目錄等，例如：<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">*.conf</span>          <span class=\"hljs-comment\"># 檔案</span><br><span class=\"hljs-string\">__pycache__/</span>    <span class=\"hljs-comment\"># 目錄</span><br></code></pre></td></tr></table></figure></li>\n<li>若以 git status 查看，會發現記錄只有新增一個檔案而已，而這就是因為先有 Git 記錄才新增 .gitignore 檔案，因此進行以下步驟清除快取並重新加入追蹤，才會套用新的 .gitignore 設定：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 清除本機 Git 的快取，就是將所有檔案移除 Git 的追蹤，但沒有刪除檔案</span><br>$ git <span class=\"hljs-built_in\">rm</span> -r --cached .<br><span class=\"hljs-comment\"># 重新加入 Git 追蹤，這時就會重新套入 .gitignore 設定</span><br>$ git add .<br><span class=\"hljs-comment\"># 重新 commit ，並會忽略設定在 .gitignore 的檔案</span><br>$ git commit -m <span class=\"hljs-string\">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://shichia.medium.com/gitignore-%E5%BF%BD%E7%95%A5%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%A9%B2%E4%B8%8A%E5%82%B3%E7%9A%84-git-%E6%AA%94%E6%A1%88-2031ac4dc679\">https://shichia.medium.com/gitignore-忽略那些不該上傳的-git-檔案-2031ac4dc679</a></li>\n</ul>\n"},{"title":"利用「Hexo」架設個人部落格","date":"2022-07-21T06:25:00.000Z","updated":"2022-07-25T06:52:00.000Z","_content":"\n<font size=6>自</font>從進入職場、學習不同的程式語言或工具以來，發現累積的說明文件愈來愈多，但卻又沒有一套系統性的整理，遇到問題一時要找就開始有點麻煩了😓另外，很久也沒藉由寫點東西，來反思自己的生活了。希望可以經營一個可以累積過往的程式經驗，又可順便記錄生活種種點點滴滴的部落格，而且重點是要方便記錄跟找尋！於是找到了Hexo。「[Hexo](https://hexo.io/zh-tw/)」是一個讓你很容易上手部署自己個人部落格，以及發佈程式類說明文章的套件工具。而且[主題](https://hexo.io/themes/)及[外掛](https://hexo.io/plugins/)超多任你選擇，只需要懂得一些語法架構，即可做出美美的、與眾不同的網頁！\n\n## 安裝及設定 Hexo\n\n### 利用 npm 安裝 Hexo \n\n在安裝Hexo之前，須先安裝[Node.js](https://nodejs.org/zh-tw/)，以利用npm來安裝Hexo。\n\n另外也須安裝[Git](https://git-scm.com/)。\n\n``` bash\nnpm install hexo-cli -g\nnpm list # 檢查是否成功安裝套件\n```\n\n### 建立並複製公開儲存庫（repository；repo）至本地端\n\n在欲放置儲存庫的專案目錄下，複製GitHub上的公開儲存庫至此。\n\n``` bash\ngit clone https://github.com/使用者名稱/使用者名稱.github.io\n```\n\n### 設定 Hexo\n\n1. 從[Hexo的GitHub上](https://github.com/hexojs/hexo-starter)下載所需設定文件：\n\n    ``` bash\n    hexo init blog # 在當前目錄建立blog資料夾（可自訂名稱）\n    cp blog/* <本地儲存庫> # 範例：D:\\xxx.github.io\n    ```\n\n2. 根據複製檔案中的「package.json」自動安裝需要的套件：\n\n    ``` bash\n    cd <本地儲存庫>\n    npm install # 依據當前目錄package.json\n    ```\n\n3. 安裝hexo-deployer-git，以一鍵部署：\n\n    ``` bash\n    npm install hexo-deployer-git --save # 無此套件後續deploy可能出錯\n    ```\n\n4. 修改設定檔_config.yml：\n\n    主要設定網站內容的檔案。\n\n    設定網站標題、作者、以及網站的URL等基本設定。\n\n    加入以下程式碼，以自動部署到GitHub Pages：\n \n    ``` yaml\n    deploy:\n      type: git\n      repo: <儲存庫URL>\n      branch: [branch]\n      message: [message]\n    ```\n\n### 部署網頁\n\n- 將目前資料夾中所有靜態網頁清除：\n\n    ``` bash\n    hexo clean\n    ```\n\n- 按照當前設定檔，產生對應的靜態網頁：（可省略）\n\n    ``` bash\n    hexo generate\n    ```\n\n- 在本地端產生網頁，確認當前設計（預設127.0.0.1:4000）：（可省略）\n\n    ``` bash\n    hexo server\n    ```\n\n- 將目前本地端靜態網頁自動部署至GitHub Pages：\n\n    ``` bash\n    hexo deploy\n    ```\n\n### Hexo 目錄架構\n\n1. node_module：\n\n    這個專案所需要的套件（剛剛透過npm install所安裝）。\n\n2. public：\n      \n    存放網頁中的文章、圖片、標籤等資料。\n\n3. scaffolds：\n\n    存放網站的內容模板。\n    \n4. themes：\n\n    存放網站的主題。\n\n<br>\n\n## 參考來源\n\n1. [文件 | Hexo](https://hexo.io/zh-tw/docs/)\n  \n2. [建立一個屬於自己的(程式)部落格！. 透過 Github Page + Hexo來免費建立自己的Bl | by 吳明倫 MingLun Wu | Medium](https://minglun-wu.medium.com/%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E5%B1%AC%E6%96%BC%E8%87%AA%E5%B7%B1%E7%9A%84-%E7%A8%8B%E5%BC%8F-%E9%83%A8%E8%90%BD%E6%A0%BC-4d295ed96236)\n  \n3. [nodejs-tw/nodejs-wiki-book/zh-tw/node_npm.rst:Node.js Taiwan 社群協作中文電子書](https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst)\n","source":"_posts/Hexo簡介.md","raw":"---\ntitle: 利用「Hexo」架設個人部落格\ncategories: [GitHub , Hexo]\ntags: [GitHub , Hexo , Node.js]\ndate: 2022/07/21 14:25\nupdated: 2022/07/25 14:52\n---\n\n<font size=6>自</font>從進入職場、學習不同的程式語言或工具以來，發現累積的說明文件愈來愈多，但卻又沒有一套系統性的整理，遇到問題一時要找就開始有點麻煩了😓另外，很久也沒藉由寫點東西，來反思自己的生活了。希望可以經營一個可以累積過往的程式經驗，又可順便記錄生活種種點點滴滴的部落格，而且重點是要方便記錄跟找尋！於是找到了Hexo。「[Hexo](https://hexo.io/zh-tw/)」是一個讓你很容易上手部署自己個人部落格，以及發佈程式類說明文章的套件工具。而且[主題](https://hexo.io/themes/)及[外掛](https://hexo.io/plugins/)超多任你選擇，只需要懂得一些語法架構，即可做出美美的、與眾不同的網頁！\n\n## 安裝及設定 Hexo\n\n### 利用 npm 安裝 Hexo \n\n在安裝Hexo之前，須先安裝[Node.js](https://nodejs.org/zh-tw/)，以利用npm來安裝Hexo。\n\n另外也須安裝[Git](https://git-scm.com/)。\n\n``` bash\nnpm install hexo-cli -g\nnpm list # 檢查是否成功安裝套件\n```\n\n### 建立並複製公開儲存庫（repository；repo）至本地端\n\n在欲放置儲存庫的專案目錄下，複製GitHub上的公開儲存庫至此。\n\n``` bash\ngit clone https://github.com/使用者名稱/使用者名稱.github.io\n```\n\n### 設定 Hexo\n\n1. 從[Hexo的GitHub上](https://github.com/hexojs/hexo-starter)下載所需設定文件：\n\n    ``` bash\n    hexo init blog # 在當前目錄建立blog資料夾（可自訂名稱）\n    cp blog/* <本地儲存庫> # 範例：D:\\xxx.github.io\n    ```\n\n2. 根據複製檔案中的「package.json」自動安裝需要的套件：\n\n    ``` bash\n    cd <本地儲存庫>\n    npm install # 依據當前目錄package.json\n    ```\n\n3. 安裝hexo-deployer-git，以一鍵部署：\n\n    ``` bash\n    npm install hexo-deployer-git --save # 無此套件後續deploy可能出錯\n    ```\n\n4. 修改設定檔_config.yml：\n\n    主要設定網站內容的檔案。\n\n    設定網站標題、作者、以及網站的URL等基本設定。\n\n    加入以下程式碼，以自動部署到GitHub Pages：\n \n    ``` yaml\n    deploy:\n      type: git\n      repo: <儲存庫URL>\n      branch: [branch]\n      message: [message]\n    ```\n\n### 部署網頁\n\n- 將目前資料夾中所有靜態網頁清除：\n\n    ``` bash\n    hexo clean\n    ```\n\n- 按照當前設定檔，產生對應的靜態網頁：（可省略）\n\n    ``` bash\n    hexo generate\n    ```\n\n- 在本地端產生網頁，確認當前設計（預設127.0.0.1:4000）：（可省略）\n\n    ``` bash\n    hexo server\n    ```\n\n- 將目前本地端靜態網頁自動部署至GitHub Pages：\n\n    ``` bash\n    hexo deploy\n    ```\n\n### Hexo 目錄架構\n\n1. node_module：\n\n    這個專案所需要的套件（剛剛透過npm install所安裝）。\n\n2. public：\n      \n    存放網頁中的文章、圖片、標籤等資料。\n\n3. scaffolds：\n\n    存放網站的內容模板。\n    \n4. themes：\n\n    存放網站的主題。\n\n<br>\n\n## 參考來源\n\n1. [文件 | Hexo](https://hexo.io/zh-tw/docs/)\n  \n2. [建立一個屬於自己的(程式)部落格！. 透過 Github Page + Hexo來免費建立自己的Bl | by 吳明倫 MingLun Wu | Medium](https://minglun-wu.medium.com/%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E5%B1%AC%E6%96%BC%E8%87%AA%E5%B7%B1%E7%9A%84-%E7%A8%8B%E5%BC%8F-%E9%83%A8%E8%90%BD%E6%A0%BC-4d295ed96236)\n  \n3. [nodejs-tw/nodejs-wiki-book/zh-tw/node_npm.rst:Node.js Taiwan 社群協作中文電子書](https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst)\n","slug":"Hexo簡介","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr18000qv47fb7lld8jr","content":"<p><font size=6>自</font>從進入職場、學習不同的程式語言或工具以來，發現累積的說明文件愈來愈多，但卻又沒有一套系統性的整理，遇到問題一時要找就開始有點麻煩了😓另外，很久也沒藉由寫點東西，來反思自己的生活了。希望可以經營一個可以累積過往的程式經驗，又可順便記錄生活種種點點滴滴的部落格，而且重點是要方便記錄跟找尋！於是找到了Hexo。「<a href=\"https://hexo.io/zh-tw/\">Hexo</a>」是一個讓你很容易上手部署自己個人部落格，以及發佈程式類說明文章的套件工具。而且<a href=\"https://hexo.io/themes/\">主題</a>及<a href=\"https://hexo.io/plugins/\">外掛</a>超多任你選擇，只需要懂得一些語法架構，即可做出美美的、與眾不同的網頁！</p>\n<h2 id=\"安裝及設定-Hexo\"><a href=\"#安裝及設定-Hexo\" class=\"headerlink\" title=\"安裝及設定 Hexo\"></a>安裝及設定 Hexo</h2><h3 id=\"利用-npm-安裝-Hexo\"><a href=\"#利用-npm-安裝-Hexo\" class=\"headerlink\" title=\"利用 npm 安裝 Hexo\"></a>利用 npm 安裝 Hexo</h3><p>在安裝Hexo之前，須先安裝<a href=\"https://nodejs.org/zh-tw/\">Node.js</a>，以利用npm來安裝Hexo。</p>\n<p>另外也須安裝<a href=\"https://git-scm.com/\">Git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-cli -g<br>npm list <span class=\"hljs-comment\"># 檢查是否成功安裝套件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立並複製公開儲存庫（repository；repo）至本地端\"><a href=\"#建立並複製公開儲存庫（repository；repo）至本地端\" class=\"headerlink\" title=\"建立並複製公開儲存庫（repository；repo）至本地端\"></a>建立並複製公開儲存庫（repository；repo）至本地端</h3><p>在欲放置儲存庫的專案目錄下，複製GitHub上的公開儲存庫至此。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/使用者名稱/使用者名稱.github.io<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"設定-Hexo\"><a href=\"#設定-Hexo\" class=\"headerlink\" title=\"設定 Hexo\"></a>設定 Hexo</h3><ol>\n<li><p>從<a href=\"https://github.com/hexojs/hexo-starter\">Hexo的GitHub上</a>下載所需設定文件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo init blog <span class=\"hljs-comment\"># 在當前目錄建立blog資料夾（可自訂名稱）</span><br><span class=\"hljs-built_in\">cp</span> blog/* &lt;本地儲存庫&gt; <span class=\"hljs-comment\"># 範例：D:\\xxx.github.io</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>根據複製檔案中的「package.json」自動安裝需要的套件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> &lt;本地儲存庫&gt;<br>npm install <span class=\"hljs-comment\"># 依據當前目錄package.json</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安裝hexo-deployer-git，以一鍵部署：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-deployer-git --save <span class=\"hljs-comment\"># 無此套件後續deploy可能出錯</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改設定檔_config.yml：</p>\n<p> 主要設定網站內容的檔案。</p>\n<p> 設定網站標題、作者、以及網站的URL等基本設定。</p>\n<p> 加入以下程式碼，以自動部署到GitHub Pages：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">&lt;儲存庫URL&gt;</span><br>  <span class=\"hljs-attr\">branch:</span> [<span class=\"hljs-string\">branch</span>]<br>  <span class=\"hljs-attr\">message:</span> [<span class=\"hljs-string\">message</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"部署網頁\"><a href=\"#部署網頁\" class=\"headerlink\" title=\"部署網頁\"></a>部署網頁</h3><ul>\n<li><p>將目前資料夾中所有靜態網頁清除：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo clean<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按照當前設定檔，產生對應的靜態網頁：（可省略）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo generate<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在本地端產生網頁，確認當前設計（預設127.0.0.1:4000）：（可省略）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo server<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>將目前本地端靜態網頁自動部署至GitHub Pages：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo deploy<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Hexo-目錄架構\"><a href=\"#Hexo-目錄架構\" class=\"headerlink\" title=\"Hexo 目錄架構\"></a>Hexo 目錄架構</h3><ol>\n<li><p>node_module：</p>\n<p> 這個專案所需要的套件（剛剛透過npm install所安裝）。</p>\n</li>\n<li><p>public：</p>\n<p> 存放網頁中的文章、圖片、標籤等資料。</p>\n</li>\n<li><p>scaffolds：</p>\n<p> 存放網站的內容模板。</p>\n</li>\n<li><p>themes：</p>\n<p> 存放網站的主題。</p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"參考來源\"><a href=\"#參考來源\" class=\"headerlink\" title=\"參考來源\"></a>參考來源</h2><ol>\n<li><p><a href=\"https://hexo.io/zh-tw/docs/\">文件 | Hexo</a></p>\n</li>\n<li><p><a href=\"https://minglun-wu.medium.com/%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E5%B1%AC%E6%96%BC%E8%87%AA%E5%B7%B1%E7%9A%84-%E7%A8%8B%E5%BC%8F-%E9%83%A8%E8%90%BD%E6%A0%BC-4d295ed96236\">建立一個屬於自己的(程式)部落格！. 透過 Github Page + Hexo來免費建立自己的Bl | by 吳明倫 MingLun Wu | Medium</a></p>\n</li>\n<li><p><a href=\"https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst\">nodejs-tw&#x2F;nodejs-wiki-book&#x2F;zh-tw&#x2F;node_npm.rst:Node.js Taiwan 社群協作中文電子書</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<p><font size=6>自</font>從進入職場、學習不同的程式語言或工具以來，發現累積的說明文件愈來愈多，但卻又沒有一套系統性的整理，遇到問題一時要找就開始有點麻煩了😓另外，很久也沒藉由寫點東西，來反思自己的生活了。希望可以經營一個可以累積過往的程式經驗，又可順便記錄生活種種點點滴滴的部落格，而且重點是要方便記錄跟找尋！於是找到了Hexo。「<a href=\"https://hexo.io/zh-tw/\">Hexo</a>」是一個讓你很容易上手部署自己個人部落格，以及發佈程式類說明文章的套件工具。而且<a href=\"https://hexo.io/themes/\">主題</a>及<a href=\"https://hexo.io/plugins/\">外掛</a>超多任你選擇，只需要懂得一些語法架構，即可做出美美的、與眾不同的網頁！</p>\n<h2 id=\"安裝及設定-Hexo\"><a href=\"#安裝及設定-Hexo\" class=\"headerlink\" title=\"安裝及設定 Hexo\"></a>安裝及設定 Hexo</h2><h3 id=\"利用-npm-安裝-Hexo\"><a href=\"#利用-npm-安裝-Hexo\" class=\"headerlink\" title=\"利用 npm 安裝 Hexo\"></a>利用 npm 安裝 Hexo</h3><p>在安裝Hexo之前，須先安裝<a href=\"https://nodejs.org/zh-tw/\">Node.js</a>，以利用npm來安裝Hexo。</p>\n<p>另外也須安裝<a href=\"https://git-scm.com/\">Git</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-cli -g<br>npm list <span class=\"hljs-comment\"># 檢查是否成功安裝套件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建立並複製公開儲存庫（repository；repo）至本地端\"><a href=\"#建立並複製公開儲存庫（repository；repo）至本地端\" class=\"headerlink\" title=\"建立並複製公開儲存庫（repository；repo）至本地端\"></a>建立並複製公開儲存庫（repository；repo）至本地端</h3><p>在欲放置儲存庫的專案目錄下，複製GitHub上的公開儲存庫至此。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/使用者名稱/使用者名稱.github.io<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"設定-Hexo\"><a href=\"#設定-Hexo\" class=\"headerlink\" title=\"設定 Hexo\"></a>設定 Hexo</h3><ol>\n<li><p>從<a href=\"https://github.com/hexojs/hexo-starter\">Hexo的GitHub上</a>下載所需設定文件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo init blog <span class=\"hljs-comment\"># 在當前目錄建立blog資料夾（可自訂名稱）</span><br><span class=\"hljs-built_in\">cp</span> blog/* &lt;本地儲存庫&gt; <span class=\"hljs-comment\"># 範例：D:\\xxx.github.io</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>根據複製檔案中的「package.json」自動安裝需要的套件：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> &lt;本地儲存庫&gt;<br>npm install <span class=\"hljs-comment\"># 依據當前目錄package.json</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安裝hexo-deployer-git，以一鍵部署：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install hexo-deployer-git --save <span class=\"hljs-comment\"># 無此套件後續deploy可能出錯</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改設定檔_config.yml：</p>\n<p> 主要設定網站內容的檔案。</p>\n<p> 設定網站標題、作者、以及網站的URL等基本設定。</p>\n<p> 加入以下程式碼，以自動部署到GitHub Pages：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">&lt;儲存庫URL&gt;</span><br>  <span class=\"hljs-attr\">branch:</span> [<span class=\"hljs-string\">branch</span>]<br>  <span class=\"hljs-attr\">message:</span> [<span class=\"hljs-string\">message</span>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"部署網頁\"><a href=\"#部署網頁\" class=\"headerlink\" title=\"部署網頁\"></a>部署網頁</h3><ul>\n<li><p>將目前資料夾中所有靜態網頁清除：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo clean<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按照當前設定檔，產生對應的靜態網頁：（可省略）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo generate<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在本地端產生網頁，確認當前設計（預設127.0.0.1:4000）：（可省略）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo server<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>將目前本地端靜態網頁自動部署至GitHub Pages：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">hexo deploy<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Hexo-目錄架構\"><a href=\"#Hexo-目錄架構\" class=\"headerlink\" title=\"Hexo 目錄架構\"></a>Hexo 目錄架構</h3><ol>\n<li><p>node_module：</p>\n<p> 這個專案所需要的套件（剛剛透過npm install所安裝）。</p>\n</li>\n<li><p>public：</p>\n<p> 存放網頁中的文章、圖片、標籤等資料。</p>\n</li>\n<li><p>scaffolds：</p>\n<p> 存放網站的內容模板。</p>\n</li>\n<li><p>themes：</p>\n<p> 存放網站的主題。</p>\n</li>\n</ol>\n<br>\n\n<h2 id=\"參考來源\"><a href=\"#參考來源\" class=\"headerlink\" title=\"參考來源\"></a>參考來源</h2><ol>\n<li><p><a href=\"https://hexo.io/zh-tw/docs/\">文件 | Hexo</a></p>\n</li>\n<li><p><a href=\"https://minglun-wu.medium.com/%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E5%B1%AC%E6%96%BC%E8%87%AA%E5%B7%B1%E7%9A%84-%E7%A8%8B%E5%BC%8F-%E9%83%A8%E8%90%BD%E6%A0%BC-4d295ed96236\">建立一個屬於自己的(程式)部落格！. 透過 Github Page + Hexo來免費建立自己的Bl | by 吳明倫 MingLun Wu | Medium</a></p>\n</li>\n<li><p><a href=\"https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst\">nodejs-tw&#x2F;nodejs-wiki-book&#x2F;zh-tw&#x2F;node_npm.rst:Node.js Taiwan 社群協作中文電子書</a></p>\n</li>\n</ol>\n"},{"title":"Hexo使用說明","date":"2022-08-23T04:10:00.000Z","updated":"2022-08-24T06:04:00.000Z","_content":"\n## Hexo初始化\n\n使用hexo init初始化Hexo的目錄架構。\n```bash\nD:\\>hexo init [自訂目錄名稱]\n```\n或是到自訂名稱目錄內使用hexo init指令。\n```bash\nD:\\[自訂目錄名稱]>hexo init\n```\n後面[自訂目錄名稱]以blog為例。\n\n## 更換主題\n\n1. 到 https://hexo.io/themes/ 選擇想要的主題。\n2. 複製該主題的Github網址到本地端。\n\n   ```bash\n   D:\\blog\\themes>git clone [該主題的Github網址]\n   ```\n\n3. 修改themes目錄上一層的_config.yml：\n\n   修改_config.yml中themes項目的主題名稱為剛下載下來的目錄名稱。\n\n   ```yaml\n   # Extensions\n   themes: fluid\n\n   # Deployment\n   deploy:\n     type: git\n     repo: https://github.com/weijhih1226/blog.git\n     branch: gh-pages\n   ```\n\n4. 接著執行hexo clean、generate及server，即可看到更換後的主題了。\n\n   ```bash\n   > hexo clean\n   > hexo generate  # hexo g\n   > hexo server    # hexo s\n   ```\n  ","source":"_posts/Hexo使用說明.md","raw":"---\ntitle: Hexo使用說明\ncategories: [GitHub, Hexo]\ntags: [hexo, git]\ndate: 2022/08/23 12:10\nupdated: 2022/08/24 14:04\n---\n\n## Hexo初始化\n\n使用hexo init初始化Hexo的目錄架構。\n```bash\nD:\\>hexo init [自訂目錄名稱]\n```\n或是到自訂名稱目錄內使用hexo init指令。\n```bash\nD:\\[自訂目錄名稱]>hexo init\n```\n後面[自訂目錄名稱]以blog為例。\n\n## 更換主題\n\n1. 到 https://hexo.io/themes/ 選擇想要的主題。\n2. 複製該主題的Github網址到本地端。\n\n   ```bash\n   D:\\blog\\themes>git clone [該主題的Github網址]\n   ```\n\n3. 修改themes目錄上一層的_config.yml：\n\n   修改_config.yml中themes項目的主題名稱為剛下載下來的目錄名稱。\n\n   ```yaml\n   # Extensions\n   themes: fluid\n\n   # Deployment\n   deploy:\n     type: git\n     repo: https://github.com/weijhih1226/blog.git\n     branch: gh-pages\n   ```\n\n4. 接著執行hexo clean、generate及server，即可看到更換後的主題了。\n\n   ```bash\n   > hexo clean\n   > hexo generate  # hexo g\n   > hexo server    # hexo s\n   ```\n  ","slug":"Hexo使用說明","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr19000tv47f95k046u5","content":"<h2 id=\"Hexo初始化\"><a href=\"#Hexo初始化\" class=\"headerlink\" title=\"Hexo初始化\"></a>Hexo初始化</h2><p>使用hexo init初始化Hexo的目錄架構。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\&gt;hexo init [自訂目錄名稱]<br></code></pre></td></tr></table></figure>\n<p>或是到自訂名稱目錄內使用hexo init指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\[自訂目錄名稱]&gt;hexo init<br></code></pre></td></tr></table></figure>\n<p>後面[自訂目錄名稱]以blog為例。</p>\n<h2 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h2><ol>\n<li><p>到 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> 選擇想要的主題。</p>\n</li>\n<li><p>複製該主題的Github網址到本地端。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\blog\\themes&gt;git <span class=\"hljs-built_in\">clone</span> [該主題的Github網址]<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes目錄上一層的_config.yml：</p>\n<p>修改_config.yml中themes項目的主題名稱為剛下載下來的目錄名稱。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-attr\">themes:</span> <span class=\"hljs-string\">fluid</span><br><br><span class=\"hljs-comment\"># Deployment</span><br><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">https://github.com/weijhih1226/blog.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>接著執行hexo clean、generate及server，即可看到更換後的主題了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">&gt; hexo clean<br>&gt; hexo generate  <span class=\"hljs-comment\"># hexo g</span><br>&gt; hexo server    <span class=\"hljs-comment\"># hexo s</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Hexo初始化\"><a href=\"#Hexo初始化\" class=\"headerlink\" title=\"Hexo初始化\"></a>Hexo初始化</h2><p>使用hexo init初始化Hexo的目錄架構。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\&gt;hexo init [自訂目錄名稱]<br></code></pre></td></tr></table></figure>\n<p>或是到自訂名稱目錄內使用hexo init指令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\[自訂目錄名稱]&gt;hexo init<br></code></pre></td></tr></table></figure>\n<p>後面[自訂目錄名稱]以blog為例。</p>\n<h2 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h2><ol>\n<li><p>到 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> 選擇想要的主題。</p>\n</li>\n<li><p>複製該主題的Github網址到本地端。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">D:\\blog\\themes&gt;git <span class=\"hljs-built_in\">clone</span> [該主題的Github網址]<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes目錄上一層的_config.yml：</p>\n<p>修改_config.yml中themes項目的主題名稱為剛下載下來的目錄名稱。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Extensions</span><br><span class=\"hljs-attr\">themes:</span> <span class=\"hljs-string\">fluid</span><br><br><span class=\"hljs-comment\"># Deployment</span><br><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">https://github.com/weijhih1226/blog.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">gh-pages</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>接著執行hexo clean、generate及server，即可看到更換後的主題了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">&gt; hexo clean<br>&gt; hexo generate  <span class=\"hljs-comment\"># hexo g</span><br>&gt; hexo server    <span class=\"hljs-comment\"># hexo s</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Linux常用相關指令","date":"2023-04-20T09:04:00.000Z","updated":"2023-07-07T04:00:00.000Z","_content":"\n# Linux 指令功能全集\n\n## 系統啟動、管理、監看\n### Systemctl：管理systemd服務\n\n管理Systemd的各種服務，可利用 `systemctl` 來操作。\n\n```bash\n$ systemctl 操作指令 服務名稱[.service]\n$ systemctl                           # 查詢目前運行中服務\n$ systemctl -n --lines=整數           # 顯示列數\n$ systemctl start <服務名稱>          # 啟動服務\n$ systemctl stop <服務名稱>           # 停止服務\n$ systemctl restart <服務名稱>        # 重新啟動服務\n$ systemctl status <服務名稱>         # 顯示服務狀態\n$ systemctl reload <服務名稱>         # 重新載入服務配置(.conf)\n$ systemctl daemon-reload <服務名稱>  # 重新載入systemd服務配置(.service)\n$ systemctl enable <服務名稱>         # 開機自動啟動服務\n$ systemctl disable <服務名稱>        # 開機不自動啟動服務\n$ systemctl is-active <服務名稱>      # 目前是否執行服務\n$ systemctl is-enabled <服務名稱>     # 開機是否自動啟動服務\n```\n\n```bash\n$ systemctl list-unit-files --type service --all   # 列出所有服務\n```\n\n### Journalctl：查詢systemd日誌\n\n```bash\n$ systemctl status systemd-journald.service   # 顯示journal service狀態\n```\n\n```bash\n$ journalctl -u <服務名稱>                      # 只顯示指定systemd單元的訊息\n$ journalctl _SYSTEMD_UNIT=<服務名稱>           # 等同-u\n$ journalctl -f                                 # 顯示並更新最近的日誌訊息\n$ journalctl -p <0~7>                           # 要查看log的最高層級\n$ journalctl --since <YYYY-MM-DD[ HH:MM[:SS]]>  # 列出自某時間點之日誌訊息\n```\n\n- log層級：\n  - 0 - emerg\n  - 1 - alert\n  - 2 - crit\n  - 3 - err\n  - 4 - warning\n  - 5 - notice\n  - 6 - info\n  - 7 - debug\n\n### Systemd設定\n\n- 功能：\n  - `.service` - 處理服務\n  - `.target` - 處理runlevel\n  - `.mount` - 處理檔案系統掛載\n  - `.timer` - 處理工作排程\n\n- 目錄：\n  - /etc/systemd/system - 權限最高\n  - /run/systemd/system - 權限中等\n  - /lib/systemd/system或/usr/lib/systemd/system - 權限最低\n\n- 範例：\n  ```conf\n  [Unit]\n  Description=A description for this service unit.  # 該systemd服務單元設定檔案的描述\n  After=network.target  # 指定systemd目標單元，確保本單元在systemd目標單元運行後運行。本範例指在網路功能啟用後啟用，以讓本服務單元可正常聯網。\n  \n  [Timer]\n  OnStartupSec=5ms\n  OnUnitInactiveSec=10s\n  OnCalendar=*-*-* *:*:00                 # 每分鐘0秒執行\n  Unit=<指定服務>                         # 指定的服務\n\n  [Service]\n  User=user                               # 使用者名稱\n  Group=group                             # 使用者群組\n  WorkingDirectory=/path/to/folder        # 工作目錄\n  Environment=\"VARIABLE_1=VALUE_1\" \"VARIABLE_2=VALUE_2\" # 直接定義多重環境變數\n  EnvironmentFile=/path/to/environment    # 環境變數\n  ExecStart=/path/to/program [arguments]  # 本服務單元啟動時要執行的應用程式\n  Restart=always                          # 設定執行程式在怎樣情況關閉時，再執行相同指令\n  RestartSec=3s                           # 關閉後到重啟間隔時間，預設100ms\n  \n  [Install]\n  WantedBy=multi-user.target              # 運行該systemd目標單元時，會同時運行本單元\n  ```\n  - `Restart`可設定為：\n    - `no`：不重啟。(預設值)\n    - `always`：不管什麼原因都會重啟。\n    - `on-success`：只在成功運行結束後(也就是行程回傳的Exit Status為0的時候)才進行重啟。(這蠻少用)\n    - `on-failure`：在運行失敗後(行程回傳的Exit Status非為0、被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。\n    - `on-abnormal`：在意外地運行失敗後(被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。\n    - `on-abort`：被使用Kill信號強制關閉時才進行重啟。\n    - `on-watchdog`：餵狗沒反應時才進行重啟。\n\n\n## 修改自動登出時間\n\n```bash\n$ echo $TMOUT     # 查詢自動登出時間\n```\n\n修改`/etc/profile`或`/etc/bashrc`或`~/.bash_profile`或`~/.bashrc`：\n\n```bash\nTMOUT=600   # 表示10分鐘之後自動登出\nTMOUT=      # 表示關閉自動登出\n```\n\n重新啟動bash配置：\n\n```\n$ source ~/.bash_profile\n```\n\n## 更換Shell\n\n```bash\n$ sudo apt install fish\n$ curl -L https://get.oh-my.fish | fish\n$ omf install bobthefish\n```\n\n```bash\n$ printf \"%s\\n\" $SHELL    # 印出當前shell\n$ cat /etc/shells         # 列出所有可用shell\n$ yum install zsh\n$ chsh -s $(which zsh) $(whoami)\n\n$ git config --global core.autocrlf false  # github儲存庫為Unix格式，若要離線安裝下載至Windows再上傳至Linux server，須取消自動轉換CRLF\n$ git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh     # 下載Oh-my-zsh獲得更多zsh樣式\n\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n修改主題，例如：\n\n```bash\n# ZSH_THEME=\"robbyrussell\"\nZSH_THEME=\"agnoster\"\n```\n\n## 效能分析\n\n```bash\n$ top           # 查看CPU、執行緒狀態\n$ uptime        # 僅顯示目前時間、主機開機時間、登入使用者數、負載情況\n$ w             # 顯示目前登入使用者相關資訊\n```\n\n- top按鍵功能\n  - 1：顯示單一/多cpu使用情形切換\n- load average\n  - 系統每1分鐘、5分鐘、15分鐘的負載情況\n  - 須除以邏輯CPU數量(`cat /proc/cpuinfo | grep \"processor\" | wc -l`)\n  - 數值1為飽和、0.7以上須注意\n- Tasks\n  - total - 行程總數\n  - running - 正在執行\n  - sleeping - 休眠狀態\n  - stopped - 已停止\n  - zombie - 僵屍狀態\n- CPU\n  - us - 用戶空間佔用CPU的百分比\n  - sy - 內核空間佔用CPU的百分比\n  - ni - 改變過優先順序的進程佔用CPU的百分比\n  - wa - IO等待佔用CPU的百分比\n  - hi - 硬中斷（Hardware IRQ）佔用CPU的百分比\n  - si - 軟中斷（Software Interrupts）佔用CPU的百分比\n- KiB Mem\n  - total - 實體記憶體容量\n  - free - 剩餘記憶體容量\n  - used - 已使用的記憶體容量\n  - buff/cache - 暫存記憶體容量\n- KiB Swap\n  - total - swap總容量\n  - free - 剩餘swap容量\n  - used - 已使用的swap容量\n  - avail Mem - 暫存記憶體容量\n- Process\n  - PID - 行程id（Process ID）\n  - USER - 使用者\n  - PR - 優先順序\n  - NI - nice值（值越小優先權越高）\n  - VIRT - 該行程使用的虛擬記憶體總量（單位：KB(VIRT=SWAP+RES)）\n  - RES - 該行程使用的、未被使用的實體記憶體大小（單位：KB(RES=CODE+DATA)）\n  - SHR - 共用記憶體大小（單位：KB）\n  - S - 行程狀態（D：不可中斷的睡眠狀態、R：運行、S：睡眠、T：跟蹤/停止、Z：僵屍進程）\n  - %CPU - 上次更新到現在的CPU時間佔用百分比\n  - %MEM - 行程使用的實體記憶體百分比\n  - TIME+ - 行程使用的CPU時間總計（單位：1/100秒）\n  - COMMAND - 行程名稱\n\n## Linux系統根目錄介紹\n\n- /bin\n  - binary程式所在目錄\n\n- /boot\n  - 系統啟動核心文件\n\n- /dev\n  - 系統設備文件\n\n- /etc\n  - 系統及應用軟體的配置文件\n  - /etc/passwd - 記錄用戶訊息\n\n- /home\n  - 所有使用者的個人文件\n\n- /lib\n  - 共享函式庫\n  - 類似Windows系統之動態函式庫(.dll)\n\n- /lib64\n  - 64位元系統之共享函式庫\n\n- /lost+found\n  - 保存遺失文件\n\n- /media\n  - 可移動設備的掛載目錄\n\n- /mnt\n  - 掛載設備目錄\n\n- /opt\n   - option - 目錄是給第三方的軟體放置的目錄，也就是給那些自行額外安裝的軟體放的目錄。\n\n# 參考資料\n- https://magiclen.org/linux-init-application-service/\n- https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A\n- https://blog.xuite.net/zerofirst/blog/147985077","source":"_posts/Linux相關指令.md","raw":"---\ntitle: Linux常用相關指令\ncategories: [Linux]\ntags: [Linux]\ndate: 2023/04/20 17:04\nupdated: 2023/07/07 12:00\n---\n\n# Linux 指令功能全集\n\n## 系統啟動、管理、監看\n### Systemctl：管理systemd服務\n\n管理Systemd的各種服務，可利用 `systemctl` 來操作。\n\n```bash\n$ systemctl 操作指令 服務名稱[.service]\n$ systemctl                           # 查詢目前運行中服務\n$ systemctl -n --lines=整數           # 顯示列數\n$ systemctl start <服務名稱>          # 啟動服務\n$ systemctl stop <服務名稱>           # 停止服務\n$ systemctl restart <服務名稱>        # 重新啟動服務\n$ systemctl status <服務名稱>         # 顯示服務狀態\n$ systemctl reload <服務名稱>         # 重新載入服務配置(.conf)\n$ systemctl daemon-reload <服務名稱>  # 重新載入systemd服務配置(.service)\n$ systemctl enable <服務名稱>         # 開機自動啟動服務\n$ systemctl disable <服務名稱>        # 開機不自動啟動服務\n$ systemctl is-active <服務名稱>      # 目前是否執行服務\n$ systemctl is-enabled <服務名稱>     # 開機是否自動啟動服務\n```\n\n```bash\n$ systemctl list-unit-files --type service --all   # 列出所有服務\n```\n\n### Journalctl：查詢systemd日誌\n\n```bash\n$ systemctl status systemd-journald.service   # 顯示journal service狀態\n```\n\n```bash\n$ journalctl -u <服務名稱>                      # 只顯示指定systemd單元的訊息\n$ journalctl _SYSTEMD_UNIT=<服務名稱>           # 等同-u\n$ journalctl -f                                 # 顯示並更新最近的日誌訊息\n$ journalctl -p <0~7>                           # 要查看log的最高層級\n$ journalctl --since <YYYY-MM-DD[ HH:MM[:SS]]>  # 列出自某時間點之日誌訊息\n```\n\n- log層級：\n  - 0 - emerg\n  - 1 - alert\n  - 2 - crit\n  - 3 - err\n  - 4 - warning\n  - 5 - notice\n  - 6 - info\n  - 7 - debug\n\n### Systemd設定\n\n- 功能：\n  - `.service` - 處理服務\n  - `.target` - 處理runlevel\n  - `.mount` - 處理檔案系統掛載\n  - `.timer` - 處理工作排程\n\n- 目錄：\n  - /etc/systemd/system - 權限最高\n  - /run/systemd/system - 權限中等\n  - /lib/systemd/system或/usr/lib/systemd/system - 權限最低\n\n- 範例：\n  ```conf\n  [Unit]\n  Description=A description for this service unit.  # 該systemd服務單元設定檔案的描述\n  After=network.target  # 指定systemd目標單元，確保本單元在systemd目標單元運行後運行。本範例指在網路功能啟用後啟用，以讓本服務單元可正常聯網。\n  \n  [Timer]\n  OnStartupSec=5ms\n  OnUnitInactiveSec=10s\n  OnCalendar=*-*-* *:*:00                 # 每分鐘0秒執行\n  Unit=<指定服務>                         # 指定的服務\n\n  [Service]\n  User=user                               # 使用者名稱\n  Group=group                             # 使用者群組\n  WorkingDirectory=/path/to/folder        # 工作目錄\n  Environment=\"VARIABLE_1=VALUE_1\" \"VARIABLE_2=VALUE_2\" # 直接定義多重環境變數\n  EnvironmentFile=/path/to/environment    # 環境變數\n  ExecStart=/path/to/program [arguments]  # 本服務單元啟動時要執行的應用程式\n  Restart=always                          # 設定執行程式在怎樣情況關閉時，再執行相同指令\n  RestartSec=3s                           # 關閉後到重啟間隔時間，預設100ms\n  \n  [Install]\n  WantedBy=multi-user.target              # 運行該systemd目標單元時，會同時運行本單元\n  ```\n  - `Restart`可設定為：\n    - `no`：不重啟。(預設值)\n    - `always`：不管什麼原因都會重啟。\n    - `on-success`：只在成功運行結束後(也就是行程回傳的Exit Status為0的時候)才進行重啟。(這蠻少用)\n    - `on-failure`：在運行失敗後(行程回傳的Exit Status非為0、被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。\n    - `on-abnormal`：在意外地運行失敗後(被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。\n    - `on-abort`：被使用Kill信號強制關閉時才進行重啟。\n    - `on-watchdog`：餵狗沒反應時才進行重啟。\n\n\n## 修改自動登出時間\n\n```bash\n$ echo $TMOUT     # 查詢自動登出時間\n```\n\n修改`/etc/profile`或`/etc/bashrc`或`~/.bash_profile`或`~/.bashrc`：\n\n```bash\nTMOUT=600   # 表示10分鐘之後自動登出\nTMOUT=      # 表示關閉自動登出\n```\n\n重新啟動bash配置：\n\n```\n$ source ~/.bash_profile\n```\n\n## 更換Shell\n\n```bash\n$ sudo apt install fish\n$ curl -L https://get.oh-my.fish | fish\n$ omf install bobthefish\n```\n\n```bash\n$ printf \"%s\\n\" $SHELL    # 印出當前shell\n$ cat /etc/shells         # 列出所有可用shell\n$ yum install zsh\n$ chsh -s $(which zsh) $(whoami)\n\n$ git config --global core.autocrlf false  # github儲存庫為Unix格式，若要離線安裝下載至Windows再上傳至Linux server，須取消自動轉換CRLF\n$ git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh     # 下載Oh-my-zsh獲得更多zsh樣式\n\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n修改主題，例如：\n\n```bash\n# ZSH_THEME=\"robbyrussell\"\nZSH_THEME=\"agnoster\"\n```\n\n## 效能分析\n\n```bash\n$ top           # 查看CPU、執行緒狀態\n$ uptime        # 僅顯示目前時間、主機開機時間、登入使用者數、負載情況\n$ w             # 顯示目前登入使用者相關資訊\n```\n\n- top按鍵功能\n  - 1：顯示單一/多cpu使用情形切換\n- load average\n  - 系統每1分鐘、5分鐘、15分鐘的負載情況\n  - 須除以邏輯CPU數量(`cat /proc/cpuinfo | grep \"processor\" | wc -l`)\n  - 數值1為飽和、0.7以上須注意\n- Tasks\n  - total - 行程總數\n  - running - 正在執行\n  - sleeping - 休眠狀態\n  - stopped - 已停止\n  - zombie - 僵屍狀態\n- CPU\n  - us - 用戶空間佔用CPU的百分比\n  - sy - 內核空間佔用CPU的百分比\n  - ni - 改變過優先順序的進程佔用CPU的百分比\n  - wa - IO等待佔用CPU的百分比\n  - hi - 硬中斷（Hardware IRQ）佔用CPU的百分比\n  - si - 軟中斷（Software Interrupts）佔用CPU的百分比\n- KiB Mem\n  - total - 實體記憶體容量\n  - free - 剩餘記憶體容量\n  - used - 已使用的記憶體容量\n  - buff/cache - 暫存記憶體容量\n- KiB Swap\n  - total - swap總容量\n  - free - 剩餘swap容量\n  - used - 已使用的swap容量\n  - avail Mem - 暫存記憶體容量\n- Process\n  - PID - 行程id（Process ID）\n  - USER - 使用者\n  - PR - 優先順序\n  - NI - nice值（值越小優先權越高）\n  - VIRT - 該行程使用的虛擬記憶體總量（單位：KB(VIRT=SWAP+RES)）\n  - RES - 該行程使用的、未被使用的實體記憶體大小（單位：KB(RES=CODE+DATA)）\n  - SHR - 共用記憶體大小（單位：KB）\n  - S - 行程狀態（D：不可中斷的睡眠狀態、R：運行、S：睡眠、T：跟蹤/停止、Z：僵屍進程）\n  - %CPU - 上次更新到現在的CPU時間佔用百分比\n  - %MEM - 行程使用的實體記憶體百分比\n  - TIME+ - 行程使用的CPU時間總計（單位：1/100秒）\n  - COMMAND - 行程名稱\n\n## Linux系統根目錄介紹\n\n- /bin\n  - binary程式所在目錄\n\n- /boot\n  - 系統啟動核心文件\n\n- /dev\n  - 系統設備文件\n\n- /etc\n  - 系統及應用軟體的配置文件\n  - /etc/passwd - 記錄用戶訊息\n\n- /home\n  - 所有使用者的個人文件\n\n- /lib\n  - 共享函式庫\n  - 類似Windows系統之動態函式庫(.dll)\n\n- /lib64\n  - 64位元系統之共享函式庫\n\n- /lost+found\n  - 保存遺失文件\n\n- /media\n  - 可移動設備的掛載目錄\n\n- /mnt\n  - 掛載設備目錄\n\n- /opt\n   - option - 目錄是給第三方的軟體放置的目錄，也就是給那些自行額外安裝的軟體放的目錄。\n\n# 參考資料\n- https://magiclen.org/linux-init-application-service/\n- https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A\n- https://blog.xuite.net/zerofirst/blog/147985077","slug":"Linux相關指令","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr19000uv47feuhm1fbq","content":"<h1 id=\"Linux-指令功能全集\"><a href=\"#Linux-指令功能全集\" class=\"headerlink\" title=\"Linux 指令功能全集\"></a>Linux 指令功能全集</h1><h2 id=\"系統啟動、管理、監看\"><a href=\"#系統啟動、管理、監看\" class=\"headerlink\" title=\"系統啟動、管理、監看\"></a>系統啟動、管理、監看</h2><h3 id=\"Systemctl：管理systemd服務\"><a href=\"#Systemctl：管理systemd服務\" class=\"headerlink\" title=\"Systemctl：管理systemd服務\"></a>Systemctl：管理systemd服務</h3><p>管理Systemd的各種服務，可利用 <code>systemctl</code> 來操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl 操作指令 服務名稱[.service]<br>$ systemctl                           <span class=\"hljs-comment\"># 查詢目前運行中服務</span><br>$ systemctl -n --lines=整數           <span class=\"hljs-comment\"># 顯示列數</span><br>$ systemctl start &lt;服務名稱&gt;          <span class=\"hljs-comment\"># 啟動服務</span><br>$ systemctl stop &lt;服務名稱&gt;           <span class=\"hljs-comment\"># 停止服務</span><br>$ systemctl restart &lt;服務名稱&gt;        <span class=\"hljs-comment\"># 重新啟動服務</span><br>$ systemctl status &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 顯示服務狀態</span><br>$ systemctl reload &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 重新載入服務配置(.conf)</span><br>$ systemctl daemon-reload &lt;服務名稱&gt;  <span class=\"hljs-comment\"># 重新載入systemd服務配置(.service)</span><br>$ systemctl <span class=\"hljs-built_in\">enable</span> &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 開機自動啟動服務</span><br>$ systemctl <span class=\"hljs-built_in\">disable</span> &lt;服務名稱&gt;        <span class=\"hljs-comment\"># 開機不自動啟動服務</span><br>$ systemctl is-active &lt;服務名稱&gt;      <span class=\"hljs-comment\"># 目前是否執行服務</span><br>$ systemctl is-enabled &lt;服務名稱&gt;     <span class=\"hljs-comment\"># 開機是否自動啟動服務</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl list-unit-files --<span class=\"hljs-built_in\">type</span> service --all   <span class=\"hljs-comment\"># 列出所有服務</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Journalctl：查詢systemd日誌\"><a href=\"#Journalctl：查詢systemd日誌\" class=\"headerlink\" title=\"Journalctl：查詢systemd日誌\"></a>Journalctl：查詢systemd日誌</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl status systemd-journald.service   <span class=\"hljs-comment\"># 顯示journal service狀態</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ journalctl -u &lt;服務名稱&gt;                      <span class=\"hljs-comment\"># 只顯示指定systemd單元的訊息</span><br>$ journalctl _SYSTEMD_UNIT=&lt;服務名稱&gt;           <span class=\"hljs-comment\"># 等同-u</span><br>$ journalctl -f                                 <span class=\"hljs-comment\"># 顯示並更新最近的日誌訊息</span><br>$ journalctl -p &lt;0~7&gt;                           <span class=\"hljs-comment\"># 要查看log的最高層級</span><br>$ journalctl --since &lt;YYYY-MM-DD[ HH:MM[:SS]]&gt;  <span class=\"hljs-comment\"># 列出自某時間點之日誌訊息</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>log層級：<ul>\n<li>0 - emerg</li>\n<li>1 - alert</li>\n<li>2 - crit</li>\n<li>3 - err</li>\n<li>4 - warning</li>\n<li>5 - notice</li>\n<li>6 - info</li>\n<li>7 - debug</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Systemd設定\"><a href=\"#Systemd設定\" class=\"headerlink\" title=\"Systemd設定\"></a>Systemd設定</h3><ul>\n<li><p>功能：</p>\n<ul>\n<li><code>.service</code> - 處理服務</li>\n<li><code>.target</code> - 處理runlevel</li>\n<li><code>.mount</code> - 處理檔案系統掛載</li>\n<li><code>.timer</code> - 處理工作排程</li>\n</ul>\n</li>\n<li><p>目錄：</p>\n<ul>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system - 權限最高</li>\n<li>&#x2F;run&#x2F;systemd&#x2F;system - 權限中等</li>\n<li>&#x2F;lib&#x2F;systemd&#x2F;system或&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system - 權限最低</li>\n</ul>\n</li>\n<li><p>範例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">[Unit]<br>Description=A description for this service unit.  # 該systemd服務單元設定檔案的描述<br>After=network.target  # 指定systemd目標單元，確保本單元在systemd目標單元運行後運行。本範例指在網路功能啟用後啟用，以讓本服務單元可正常聯網。<br><br>[Timer]<br>OnStartupSec=5ms<br>OnUnitInactiveSec=10s<br>OnCalendar=*-*-* *:*:00                 # 每分鐘0秒執行<br>Unit=&lt;指定服務&gt;                         # 指定的服務<br><br>[Service]<br>User=user                               # 使用者名稱<br>Group=group                             # 使用者群組<br>WorkingDirectory=/path/to/folder        # 工作目錄<br>Environment=&quot;VARIABLE_1=VALUE_1&quot; &quot;VARIABLE_2=VALUE_2&quot; # 直接定義多重環境變數<br>EnvironmentFile=/path/to/environment    # 環境變數<br>ExecStart=/path/to/program [arguments]  # 本服務單元啟動時要執行的應用程式<br>Restart=always                          # 設定執行程式在怎樣情況關閉時，再執行相同指令<br>RestartSec=3s                           # 關閉後到重啟間隔時間，預設100ms<br><br>[Install]<br>WantedBy=multi-user.target              # 運行該systemd目標單元時，會同時運行本單元<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>Restart</code>可設定為：<ul>\n<li><code>no</code>：不重啟。(預設值)</li>\n<li><code>always</code>：不管什麼原因都會重啟。</li>\n<li><code>on-success</code>：只在成功運行結束後(也就是行程回傳的Exit Status為0的時候)才進行重啟。(這蠻少用)</li>\n<li><code>on-failure</code>：在運行失敗後(行程回傳的Exit Status非為0、被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。</li>\n<li><code>on-abnormal</code>：在意外地運行失敗後(被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。</li>\n<li><code>on-abort</code>：被使用Kill信號強制關閉時才進行重啟。</li>\n<li><code>on-watchdog</code>：餵狗沒反應時才進行重啟。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"修改自動登出時間\"><a href=\"#修改自動登出時間\" class=\"headerlink\" title=\"修改自動登出時間\"></a>修改自動登出時間</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$TMOUT</span>     <span class=\"hljs-comment\"># 查詢自動登出時間</span><br></code></pre></td></tr></table></figure>\n\n<p>修改<code>/etc/profile</code>或<code>/etc/bashrc</code>或<code>~/.bash_profile</code>或<code>~/.bashrc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">TMOUT=600   <span class=\"hljs-comment\"># 表示10分鐘之後自動登出</span><br>TMOUT=      <span class=\"hljs-comment\"># 表示關閉自動登出</span><br></code></pre></td></tr></table></figure>\n\n<p>重新啟動bash配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">source</span> ~/.bash_profile</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"更換Shell\"><a href=\"#更換Shell\" class=\"headerlink\" title=\"更換Shell\"></a>更換Shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo apt install fish<br>$ curl -L https://get.oh-my.fish | fish<br>$ omf install bobthefish<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%s\\n&quot;</span> <span class=\"hljs-variable\">$SHELL</span>    <span class=\"hljs-comment\"># 印出當前shell</span><br>$ <span class=\"hljs-built_in\">cat</span> /etc/shells         <span class=\"hljs-comment\"># 列出所有可用shell</span><br>$ yum install zsh<br>$ chsh -s $(<span class=\"hljs-built_in\">which</span> zsh) $(<span class=\"hljs-built_in\">whoami</span>)<br><br>$ git config --global core.autocrlf <span class=\"hljs-literal\">false</span>  <span class=\"hljs-comment\"># github儲存庫為Unix格式，若要離線安裝下載至Windows再上傳至Linux server，須取消自動轉換CRLF</span><br>$ git <span class=\"hljs-built_in\">clone</span> https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh     <span class=\"hljs-comment\"># 下載Oh-my-zsh獲得更多zsh樣式</span><br><br><span class=\"hljs-built_in\">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>修改主題，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># ZSH_THEME=&quot;robbyrussell&quot;</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;agnoster&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"效能分析\"><a href=\"#效能分析\" class=\"headerlink\" title=\"效能分析\"></a>效能分析</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ top           <span class=\"hljs-comment\"># 查看CPU、執行緒狀態</span><br>$ <span class=\"hljs-built_in\">uptime</span>        <span class=\"hljs-comment\"># 僅顯示目前時間、主機開機時間、登入使用者數、負載情況</span><br>$ w             <span class=\"hljs-comment\"># 顯示目前登入使用者相關資訊</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>top按鍵功能<ul>\n<li>1：顯示單一&#x2F;多cpu使用情形切換</li>\n</ul>\n</li>\n<li>load average<ul>\n<li>系統每1分鐘、5分鐘、15分鐘的負載情況</li>\n<li>須除以邏輯CPU數量(<code>cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l</code>)</li>\n<li>數值1為飽和、0.7以上須注意</li>\n</ul>\n</li>\n<li>Tasks<ul>\n<li>total - 行程總數</li>\n<li>running - 正在執行</li>\n<li>sleeping - 休眠狀態</li>\n<li>stopped - 已停止</li>\n<li>zombie - 僵屍狀態</li>\n</ul>\n</li>\n<li>CPU<ul>\n<li>us - 用戶空間佔用CPU的百分比</li>\n<li>sy - 內核空間佔用CPU的百分比</li>\n<li>ni - 改變過優先順序的進程佔用CPU的百分比</li>\n<li>wa - IO等待佔用CPU的百分比</li>\n<li>hi - 硬中斷（Hardware IRQ）佔用CPU的百分比</li>\n<li>si - 軟中斷（Software Interrupts）佔用CPU的百分比</li>\n</ul>\n</li>\n<li>KiB Mem<ul>\n<li>total - 實體記憶體容量</li>\n<li>free - 剩餘記憶體容量</li>\n<li>used - 已使用的記憶體容量</li>\n<li>buff&#x2F;cache - 暫存記憶體容量</li>\n</ul>\n</li>\n<li>KiB Swap<ul>\n<li>total - swap總容量</li>\n<li>free - 剩餘swap容量</li>\n<li>used - 已使用的swap容量</li>\n<li>avail Mem - 暫存記憶體容量</li>\n</ul>\n</li>\n<li>Process<ul>\n<li>PID - 行程id（Process ID）</li>\n<li>USER - 使用者</li>\n<li>PR - 優先順序</li>\n<li>NI - nice值（值越小優先權越高）</li>\n<li>VIRT - 該行程使用的虛擬記憶體總量（單位：KB(VIRT&#x3D;SWAP+RES)）</li>\n<li>RES - 該行程使用的、未被使用的實體記憶體大小（單位：KB(RES&#x3D;CODE+DATA)）</li>\n<li>SHR - 共用記憶體大小（單位：KB）</li>\n<li>S - 行程狀態（D：不可中斷的睡眠狀態、R：運行、S：睡眠、T：跟蹤&#x2F;停止、Z：僵屍進程）</li>\n<li>%CPU - 上次更新到現在的CPU時間佔用百分比</li>\n<li>%MEM - 行程使用的實體記憶體百分比</li>\n<li>TIME+ - 行程使用的CPU時間總計（單位：1&#x2F;100秒）</li>\n<li>COMMAND - 行程名稱</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux系統根目錄介紹\"><a href=\"#Linux系統根目錄介紹\" class=\"headerlink\" title=\"Linux系統根目錄介紹\"></a>Linux系統根目錄介紹</h2><ul>\n<li><p>&#x2F;bin</p>\n<ul>\n<li>binary程式所在目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;boot</p>\n<ul>\n<li>系統啟動核心文件</li>\n</ul>\n</li>\n<li><p>&#x2F;dev</p>\n<ul>\n<li>系統設備文件</li>\n</ul>\n</li>\n<li><p>&#x2F;etc</p>\n<ul>\n<li>系統及應用軟體的配置文件</li>\n<li>&#x2F;etc&#x2F;passwd - 記錄用戶訊息</li>\n</ul>\n</li>\n<li><p>&#x2F;home</p>\n<ul>\n<li>所有使用者的個人文件</li>\n</ul>\n</li>\n<li><p>&#x2F;lib</p>\n<ul>\n<li>共享函式庫</li>\n<li>類似Windows系統之動態函式庫(.dll)</li>\n</ul>\n</li>\n<li><p>&#x2F;lib64</p>\n<ul>\n<li>64位元系統之共享函式庫</li>\n</ul>\n</li>\n<li><p>&#x2F;lost+found</p>\n<ul>\n<li>保存遺失文件</li>\n</ul>\n</li>\n<li><p>&#x2F;media</p>\n<ul>\n<li>可移動設備的掛載目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;mnt</p>\n<ul>\n<li>掛載設備目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;opt</p>\n<ul>\n<li>option - 目錄是給第三方的軟體放置的目錄，也就是給那些自行額外安裝的軟體放的目錄。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://magiclen.org/linux-init-application-service/\">https://magiclen.org/linux-init-application-service/</a></li>\n<li><a href=\"https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A\">https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A</a></li>\n<li><a href=\"https://blog.xuite.net/zerofirst/blog/147985077\">https://blog.xuite.net/zerofirst/blog/147985077</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Linux-指令功能全集\"><a href=\"#Linux-指令功能全集\" class=\"headerlink\" title=\"Linux 指令功能全集\"></a>Linux 指令功能全集</h1><h2 id=\"系統啟動、管理、監看\"><a href=\"#系統啟動、管理、監看\" class=\"headerlink\" title=\"系統啟動、管理、監看\"></a>系統啟動、管理、監看</h2><h3 id=\"Systemctl：管理systemd服務\"><a href=\"#Systemctl：管理systemd服務\" class=\"headerlink\" title=\"Systemctl：管理systemd服務\"></a>Systemctl：管理systemd服務</h3><p>管理Systemd的各種服務，可利用 <code>systemctl</code> 來操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl 操作指令 服務名稱[.service]<br>$ systemctl                           <span class=\"hljs-comment\"># 查詢目前運行中服務</span><br>$ systemctl -n --lines=整數           <span class=\"hljs-comment\"># 顯示列數</span><br>$ systemctl start &lt;服務名稱&gt;          <span class=\"hljs-comment\"># 啟動服務</span><br>$ systemctl stop &lt;服務名稱&gt;           <span class=\"hljs-comment\"># 停止服務</span><br>$ systemctl restart &lt;服務名稱&gt;        <span class=\"hljs-comment\"># 重新啟動服務</span><br>$ systemctl status &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 顯示服務狀態</span><br>$ systemctl reload &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 重新載入服務配置(.conf)</span><br>$ systemctl daemon-reload &lt;服務名稱&gt;  <span class=\"hljs-comment\"># 重新載入systemd服務配置(.service)</span><br>$ systemctl <span class=\"hljs-built_in\">enable</span> &lt;服務名稱&gt;         <span class=\"hljs-comment\"># 開機自動啟動服務</span><br>$ systemctl <span class=\"hljs-built_in\">disable</span> &lt;服務名稱&gt;        <span class=\"hljs-comment\"># 開機不自動啟動服務</span><br>$ systemctl is-active &lt;服務名稱&gt;      <span class=\"hljs-comment\"># 目前是否執行服務</span><br>$ systemctl is-enabled &lt;服務名稱&gt;     <span class=\"hljs-comment\"># 開機是否自動啟動服務</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl list-unit-files --<span class=\"hljs-built_in\">type</span> service --all   <span class=\"hljs-comment\"># 列出所有服務</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Journalctl：查詢systemd日誌\"><a href=\"#Journalctl：查詢systemd日誌\" class=\"headerlink\" title=\"Journalctl：查詢systemd日誌\"></a>Journalctl：查詢systemd日誌</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ systemctl status systemd-journald.service   <span class=\"hljs-comment\"># 顯示journal service狀態</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ journalctl -u &lt;服務名稱&gt;                      <span class=\"hljs-comment\"># 只顯示指定systemd單元的訊息</span><br>$ journalctl _SYSTEMD_UNIT=&lt;服務名稱&gt;           <span class=\"hljs-comment\"># 等同-u</span><br>$ journalctl -f                                 <span class=\"hljs-comment\"># 顯示並更新最近的日誌訊息</span><br>$ journalctl -p &lt;0~7&gt;                           <span class=\"hljs-comment\"># 要查看log的最高層級</span><br>$ journalctl --since &lt;YYYY-MM-DD[ HH:MM[:SS]]&gt;  <span class=\"hljs-comment\"># 列出自某時間點之日誌訊息</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>log層級：<ul>\n<li>0 - emerg</li>\n<li>1 - alert</li>\n<li>2 - crit</li>\n<li>3 - err</li>\n<li>4 - warning</li>\n<li>5 - notice</li>\n<li>6 - info</li>\n<li>7 - debug</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Systemd設定\"><a href=\"#Systemd設定\" class=\"headerlink\" title=\"Systemd設定\"></a>Systemd設定</h3><ul>\n<li><p>功能：</p>\n<ul>\n<li><code>.service</code> - 處理服務</li>\n<li><code>.target</code> - 處理runlevel</li>\n<li><code>.mount</code> - 處理檔案系統掛載</li>\n<li><code>.timer</code> - 處理工作排程</li>\n</ul>\n</li>\n<li><p>目錄：</p>\n<ul>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system - 權限最高</li>\n<li>&#x2F;run&#x2F;systemd&#x2F;system - 權限中等</li>\n<li>&#x2F;lib&#x2F;systemd&#x2F;system或&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system - 權限最低</li>\n</ul>\n</li>\n<li><p>範例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">[Unit]<br>Description=A description for this service unit.  # 該systemd服務單元設定檔案的描述<br>After=network.target  # 指定systemd目標單元，確保本單元在systemd目標單元運行後運行。本範例指在網路功能啟用後啟用，以讓本服務單元可正常聯網。<br><br>[Timer]<br>OnStartupSec=5ms<br>OnUnitInactiveSec=10s<br>OnCalendar=*-*-* *:*:00                 # 每分鐘0秒執行<br>Unit=&lt;指定服務&gt;                         # 指定的服務<br><br>[Service]<br>User=user                               # 使用者名稱<br>Group=group                             # 使用者群組<br>WorkingDirectory=/path/to/folder        # 工作目錄<br>Environment=&quot;VARIABLE_1=VALUE_1&quot; &quot;VARIABLE_2=VALUE_2&quot; # 直接定義多重環境變數<br>EnvironmentFile=/path/to/environment    # 環境變數<br>ExecStart=/path/to/program [arguments]  # 本服務單元啟動時要執行的應用程式<br>Restart=always                          # 設定執行程式在怎樣情況關閉時，再執行相同指令<br>RestartSec=3s                           # 關閉後到重啟間隔時間，預設100ms<br><br>[Install]<br>WantedBy=multi-user.target              # 運行該systemd目標單元時，會同時運行本單元<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>Restart</code>可設定為：<ul>\n<li><code>no</code>：不重啟。(預設值)</li>\n<li><code>always</code>：不管什麼原因都會重啟。</li>\n<li><code>on-success</code>：只在成功運行結束後(也就是行程回傳的Exit Status為0的時候)才進行重啟。(這蠻少用)</li>\n<li><code>on-failure</code>：在運行失敗後(行程回傳的Exit Status非為0、被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。</li>\n<li><code>on-abnormal</code>：在意外地運行失敗後(被使用Kill信號強制關閉、逾時或是餵狗沒反應時)才進行重啟。</li>\n<li><code>on-abort</code>：被使用Kill信號強制關閉時才進行重啟。</li>\n<li><code>on-watchdog</code>：餵狗沒反應時才進行重啟。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"修改自動登出時間\"><a href=\"#修改自動登出時間\" class=\"headerlink\" title=\"修改自動登出時間\"></a>修改自動登出時間</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$TMOUT</span>     <span class=\"hljs-comment\"># 查詢自動登出時間</span><br></code></pre></td></tr></table></figure>\n\n<p>修改<code>/etc/profile</code>或<code>/etc/bashrc</code>或<code>~/.bash_profile</code>或<code>~/.bashrc</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">TMOUT=600   <span class=\"hljs-comment\"># 表示10分鐘之後自動登出</span><br>TMOUT=      <span class=\"hljs-comment\"># 表示關閉自動登出</span><br></code></pre></td></tr></table></figure>\n\n<p>重新啟動bash配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">source</span> ~/.bash_profile</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"更換Shell\"><a href=\"#更換Shell\" class=\"headerlink\" title=\"更換Shell\"></a>更換Shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ sudo apt install fish<br>$ curl -L https://get.oh-my.fish | fish<br>$ omf install bobthefish<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%s\\n&quot;</span> <span class=\"hljs-variable\">$SHELL</span>    <span class=\"hljs-comment\"># 印出當前shell</span><br>$ <span class=\"hljs-built_in\">cat</span> /etc/shells         <span class=\"hljs-comment\"># 列出所有可用shell</span><br>$ yum install zsh<br>$ chsh -s $(<span class=\"hljs-built_in\">which</span> zsh) $(<span class=\"hljs-built_in\">whoami</span>)<br><br>$ git config --global core.autocrlf <span class=\"hljs-literal\">false</span>  <span class=\"hljs-comment\"># github儲存庫為Unix格式，若要離線安裝下載至Windows再上傳至Linux server，須取消自動轉換CRLF</span><br>$ git <span class=\"hljs-built_in\">clone</span> https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh     <span class=\"hljs-comment\"># 下載Oh-my-zsh獲得更多zsh樣式</span><br><br><span class=\"hljs-built_in\">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>修改主題，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># ZSH_THEME=&quot;robbyrussell&quot;</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;agnoster&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"效能分析\"><a href=\"#效能分析\" class=\"headerlink\" title=\"效能分析\"></a>效能分析</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ top           <span class=\"hljs-comment\"># 查看CPU、執行緒狀態</span><br>$ <span class=\"hljs-built_in\">uptime</span>        <span class=\"hljs-comment\"># 僅顯示目前時間、主機開機時間、登入使用者數、負載情況</span><br>$ w             <span class=\"hljs-comment\"># 顯示目前登入使用者相關資訊</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>top按鍵功能<ul>\n<li>1：顯示單一&#x2F;多cpu使用情形切換</li>\n</ul>\n</li>\n<li>load average<ul>\n<li>系統每1分鐘、5分鐘、15分鐘的負載情況</li>\n<li>須除以邏輯CPU數量(<code>cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l</code>)</li>\n<li>數值1為飽和、0.7以上須注意</li>\n</ul>\n</li>\n<li>Tasks<ul>\n<li>total - 行程總數</li>\n<li>running - 正在執行</li>\n<li>sleeping - 休眠狀態</li>\n<li>stopped - 已停止</li>\n<li>zombie - 僵屍狀態</li>\n</ul>\n</li>\n<li>CPU<ul>\n<li>us - 用戶空間佔用CPU的百分比</li>\n<li>sy - 內核空間佔用CPU的百分比</li>\n<li>ni - 改變過優先順序的進程佔用CPU的百分比</li>\n<li>wa - IO等待佔用CPU的百分比</li>\n<li>hi - 硬中斷（Hardware IRQ）佔用CPU的百分比</li>\n<li>si - 軟中斷（Software Interrupts）佔用CPU的百分比</li>\n</ul>\n</li>\n<li>KiB Mem<ul>\n<li>total - 實體記憶體容量</li>\n<li>free - 剩餘記憶體容量</li>\n<li>used - 已使用的記憶體容量</li>\n<li>buff&#x2F;cache - 暫存記憶體容量</li>\n</ul>\n</li>\n<li>KiB Swap<ul>\n<li>total - swap總容量</li>\n<li>free - 剩餘swap容量</li>\n<li>used - 已使用的swap容量</li>\n<li>avail Mem - 暫存記憶體容量</li>\n</ul>\n</li>\n<li>Process<ul>\n<li>PID - 行程id（Process ID）</li>\n<li>USER - 使用者</li>\n<li>PR - 優先順序</li>\n<li>NI - nice值（值越小優先權越高）</li>\n<li>VIRT - 該行程使用的虛擬記憶體總量（單位：KB(VIRT&#x3D;SWAP+RES)）</li>\n<li>RES - 該行程使用的、未被使用的實體記憶體大小（單位：KB(RES&#x3D;CODE+DATA)）</li>\n<li>SHR - 共用記憶體大小（單位：KB）</li>\n<li>S - 行程狀態（D：不可中斷的睡眠狀態、R：運行、S：睡眠、T：跟蹤&#x2F;停止、Z：僵屍進程）</li>\n<li>%CPU - 上次更新到現在的CPU時間佔用百分比</li>\n<li>%MEM - 行程使用的實體記憶體百分比</li>\n<li>TIME+ - 行程使用的CPU時間總計（單位：1&#x2F;100秒）</li>\n<li>COMMAND - 行程名稱</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux系統根目錄介紹\"><a href=\"#Linux系統根目錄介紹\" class=\"headerlink\" title=\"Linux系統根目錄介紹\"></a>Linux系統根目錄介紹</h2><ul>\n<li><p>&#x2F;bin</p>\n<ul>\n<li>binary程式所在目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;boot</p>\n<ul>\n<li>系統啟動核心文件</li>\n</ul>\n</li>\n<li><p>&#x2F;dev</p>\n<ul>\n<li>系統設備文件</li>\n</ul>\n</li>\n<li><p>&#x2F;etc</p>\n<ul>\n<li>系統及應用軟體的配置文件</li>\n<li>&#x2F;etc&#x2F;passwd - 記錄用戶訊息</li>\n</ul>\n</li>\n<li><p>&#x2F;home</p>\n<ul>\n<li>所有使用者的個人文件</li>\n</ul>\n</li>\n<li><p>&#x2F;lib</p>\n<ul>\n<li>共享函式庫</li>\n<li>類似Windows系統之動態函式庫(.dll)</li>\n</ul>\n</li>\n<li><p>&#x2F;lib64</p>\n<ul>\n<li>64位元系統之共享函式庫</li>\n</ul>\n</li>\n<li><p>&#x2F;lost+found</p>\n<ul>\n<li>保存遺失文件</li>\n</ul>\n</li>\n<li><p>&#x2F;media</p>\n<ul>\n<li>可移動設備的掛載目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;mnt</p>\n<ul>\n<li>掛載設備目錄</li>\n</ul>\n</li>\n<li><p>&#x2F;opt</p>\n<ul>\n<li>option - 目錄是給第三方的軟體放置的目錄，也就是給那些自行額外安裝的軟體放的目錄。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ul>\n<li><a href=\"https://magiclen.org/linux-init-application-service/\">https://magiclen.org/linux-init-application-service/</a></li>\n<li><a href=\"https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A\">https://david50.pixnet.net/blog/post/45252072-%5B%E7%AD%86%E8%A8%98%5Dlinux---top%E8%B3%87%E8%A8%8A</a></li>\n<li><a href=\"https://blog.xuite.net/zerofirst/blog/147985077\">https://blog.xuite.net/zerofirst/blog/147985077</a></li>\n</ul>\n"},{"title":"MySQL指令","date":"2023-04-20T09:04:00.000Z","updated":"2023-04-20T09:00:00.000Z","_content":"\n# MySQL常用指令\n\n```bash\n$ mysql -u <username> -p        # 登入\n```\n\n```sql\n> SHOW DATABASES;               -- 顯示資料庫(預設橫式顯示)\n> SHOW DATABASES \\g             -- 橫式顯示\n> SHOW DATABASES \\G             -- 直式顯示\n> CREATE DATABASE <name>;       -- 建立資料庫\n> DROP DATABASE <name>;         -- 刪除資料庫\n> USE <database>;               -- 使用資料庫\n> SELECT DATABASE();            -- 查看目前所在資料庫\n> SHOW TABLES;                  -- 顯示資料表\n> DELIMITER <結束符號>          -- 更改結束符號\n> SHOW WARNINGS;                -- 顯示錯誤訊息\n> CREATE TABLE <name>           -- 建立資料表\n(\n    <column1> VARCHAR(20),\n    <column2> INT\n);\n> SHOW COLUMNS FROM <table>;    -- 顯示資料表各欄位性質\n> DESC <table>;                 -- 顯示資料表各欄位性質\n> DROP TABLE <name>;            -- 刪除資料表\n> SELECT * FROM <table>;        -- 顯示資料表中所有欄位資料\n> SELECT <column> FROM <table>; -- 顯示資料表中欄位資料\n> INSERT INTO <table>(<column1>, <column2>) -- 新增資料列\nVALUES(<column1 data>, <column2 data>),\n      (<column1 data>, <column2 data>);\n\n```\n\n# 資料庫階層架構\n\n- 資料庫(database)\n  - 資料表(table)\n    - 欄位(column)\n\n# 資料類型\n\n## 數值類型\n\n- 整數 (Integer)\n  \n  形式：`<data type> [UNSIGNED] [ZEROFILL]`\n\n  |     類型      | Byte(s) |                    範圍                    |         UNSIGNED         |\n  | :-----------: | :-----: | :----------------------------------------- | :----------------------- |\n  |    TINYINT    |    1    | -128 ~ 127                                 | 0 ~ 255                  |\n  |   SMALLINT    |    2    | -32768 ~ 32767                             | 0 ~ 65535                |\n  |   MEDIUMINT   |    3    | -8388608 ~ 8388607                         | 0 ~ 16777215             |\n  | INTEGER (INT) |    4    | -2147483648 ~ 2147483647                   | 0 ~ 4294967295           |\n  |    BIGINT     |    8    | -9223372036854775808 ~ 9223372036854775807 | 0 ~ 18446744073709551615 |\n\n- 定點數 (Fixed-Point)\n  - DECIMAL(M, D)(=DEC,NUMERIC,FIXED)\n    - M：總共位數(最大65、預設30)；D：小數點後位數(最大30、預設0)\n    - 小數點後不足補0，多的四捨五入\n    - 可負數，不算位數\n\n- 浮點數 (Floating-Point)\n  - FLOAT(M, D)\n    - 範圍：-3.402823466E+38 ~ -1.175494351E-38, 0, 1.175494351E-38 ~ 3.402823466E+38\n\n- 雙精度浮點數\n  - DOUBLE(M, D)(=DOUBLE PRECISION=REAL)\n    - 範圍：-1.7976931348623157E+308 ~ -2.2250738585072014E-308, 0, 2.2250738585072014E-308 ~ 1.7976931348623157E+308\n\n- 位 (Bit-Value)\n  - BIT(M)\n  - M：總共位數(最小1、最大64、預設1)\n  - 儲存方式：b'1'\n  - 顯示方式：\n    - <column>+0 : 十進位\n    - bin(<column>+0) : 二進位\n    - oct(<column>+0) : 八進位\n    - hex(<column>+0) : 十六進位\n\n## 時間類型\n\n- DATE\n  - 日期：YYYY-MM-DD\n  - 範圍：1000-01-01 ~ 9999-12-31\n  - 可插入INT型，不需\"-\"\n\n- TIME\n  - 時間：HH:MM:SS 或 HH:MM 或 MMSS 或 SS\n  - 範圍：-838:59:59 ~ 838:59:59\n  - 可表示時間差\n  - 可插入INT型，不需\":\"\n\n- DATETIME\n  - 日期時間：YYYY-MM-DD HH:MM:SS\n  - 範圍：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59\n\n- YEAR\n  - 年：YYYY 或 YY\n  - 範圍：1901 ~ 2155\n  - 可插入INT型或STRING型(2位或4位)\n    - 1 ~ 69 或 \"0\" ~ \"69\" 表示 2001 ~ 2069\n    - 70 ~ 99 或 \"70\" ~ \"99\" 表示 1970 ~ 1999\n    - 0 表示 0000\n\n- TIMESTAMP\n  - 範圍 : 1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC\n  - 會隨著 timezone 改變\n  - 預設當前時間\n  - SELECT NOW()：查看系統當前時間\n  ```sql\n  > <column> TIMESTAMP\n  > <column> TIMESTAMP DEFAULT NOW() ON UPDATE NOW()    -- 同上\n  ```\n\n- 設定時區\n  - show variables LIKE \"%time_zone%\"：查看時區變量\n  - SET time_zone = \"+08:00\"：更改時區為 UTC+8 小時\n  - SET time_zone = \"system\"：更改時區為系統當前時區\n  - time_zone 也可用國家名稱設置\n\n# 過濾條件\n\n形式：`SELECT * FROM <table> WHERE <conditions>;`\n\n```sql\n> SELECT * FROM <table> WHERE <column1>=\"XXX\" <AND|OR> <NOT> <column2>=\"YYY\";\n> SELECT * FROM <table> WHERE <column1> IN (\"XXX\" , \"YYY\");     -- 等同於WHERE <column1>=\"XXX\" OR <column2>=\"YYY\"\n> SELECT * FROM <table> WHERE <column1> BETWEEN \"VAL1\" AND \"VAL2\"\n```\n\n- 模糊搜尋（例如：顯示包含i的資料，不區分大小寫）\n```sql\n> SELECT * FROM <table> WHERE <column> LIKE \"%i%\";      -- %代表任意字符\n> SELECT * FROM <table> WHERE <column> LIKE \"_i_\";      -- _代表1個任意字符\n> SELECT * FROM <table> WHERE <column> LIKE \"%\\%i%\";    -- 顯示包含%i的資料\n```\n\n# 新增資料表\n\n形式：`CREATE TABLE(<column> <data type>);`\n\n```sql\n> CREATE TABLE IF NOT EXISTS <name>             -- 判斷資料表是否存在而建立\n(\n    <column> <data type>                        -- 資料預設為NULL\n    <column> <data type> NOT NULL               -- 資料不可為NULL\n    <column> DEFAULT <value>                    -- 資料預設值(預設為NULL)\n    <column> <data type> PRIMARY KEY            -- 資料唯一性、不可重複、不可為NULL\n    PRIMARY KEY(<column1>, <column2>)           -- 設置聯合PRIMARY KEY\n    <column> <data type> UNIQUE                 -- 資料唯一性、不可重複、可為NULL\n    <column> <data type> <PRIMARY KEY|UNIQUE> AUTO_INCREMENT   -- 未填值時自動遞增\n);\n```\n\n# 取別名\n\n```sql\n> SELECT <column> AS <alias> FROM <table>;\n```\n\n# 更新及刪除資料\n\n```sql\n> UPDATE <table> SET <column> = \"XXX\" WHERE <conditions>;\n> DELETE FROM <table> WHERE <conditions>;\n```\n\n# 字串處理函式\n\n```sql\n> SELECT CONCAT(<column1>, <column2>) AS <別名> FROM <table>;   -- 串接字串(<column1><column2>)\n> SELECT CONCAT_WS(\"<間格符>\", <column1>, <column2>) AS <別名> FROM <table>;    -- 串接字串(<column1><間格符><column2>)\n> SELECT SUBSTRING(\"Hello World\", 7);               -- 修剪字串(World)\n> SELECT SUBSTRING(\"Hello World\", -3);              -- 修剪字串(rld)\n> SELECT SUBSTRING(\"Hello World\", 1, 4);            -- 修剪字串(Hell)\n> SELECT REPLACE(\"Hello World\", \"World\", \"MySQL\");  -- 替換字串(Hello MySQL)\n> SELECT REVERSE(\"Hello World\");                    -- 反轉字串(dlroW olleH)\n> SELECT LENGTH(\"Hello World\");                     -- 字串長度(11)\n> SELECT CHAR_LENGTH(\"Hello World\");                -- 字串長度(11)\n> SELECT CHARACTER_LENGTH(\"Hello World\");           -- 字串長度(11)\n> SELECT LOWER(\"Hello World\");                      -- 轉小寫(hello world)\n> SELECT UPPER(\"Hello World\");                      -- 轉大寫(HELLO WORLD)\n```\n\n# 排序篩選\n\n```sql\n> SELECT * FROM <table> ORDER BY <column>;          -- 依照column升序排序\n> SELECT * FROM <table> ORDER BY <column> DESC;     -- 依照column降序排序\n> SELECT <column1>, <column2>, <column3> FROM <table> ORDER BY 3, 1;    -- 依照column3、column1升序排序\n> SELECT * FROM <table> LIMIT 3;                    -- 顯示前3筆資料\n> SELECT * FROM <table> LIMIT 2, 4;                 -- 顯示第2筆後4筆資料\n```\n\n# 資料統計\n\n```sql\n> SELECT COUNT(*) FROM <table>;                     -- 計算資料數量\n> SELECT DISTINCT <column> FROM <table>;            -- 去除重複資料顯示唯一值\n> SELECT COUNT(<column>) FROM <table> GROUP BY <column>;   -- 將column分組後算出每組的資料數量\n> SELECT MIN(<column>) FROM <table>;                -- 計算column的最小值\n> SELECT MAX(<column>) FROM <table>;                -- 計算column的最大值\n> SELECT SUM(<column>) FROM <table>;                -- 計算column的和\n> SELECT AVG(<column>) FROM <table>;                -- 計算column的平均值\n> SELECT COUNT(<column>) FROM <table> GROUP BY <column> HAVING <column1> = \"XXX\";   -- 過濾GROUP BY後資料\n```\n\n# 更新欄位\n\n```sql\n> ALTER TABLE <name> ADD column3 INT PRIMARY KEY AUTO_INCREMENT;    -- 新增欄位\n> ALTER TABLE <name> DROP column3;                                  -- 刪除欄位\n> ALTER TABLE <name> CHANGE <column_old> <column_new> <data_type>;  -- 更改欄位名稱\n> ALTER TABLE <name> MODIFY <column> <data_type>;                   -- 更改欄位性質\n```\n\n\n# 參考資料\n1. https://hackmd.io/@kenny88881234/HJ_KDx1xS\n2. https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html","source":"_posts/MySQL指令.md","raw":"---\ntitle: MySQL指令\ncategories: [MySQL , SQL]\ntags: [MySQL , SQL]\ndate: 2023/04/20 17:04\nupdated: 2023/04/20 17:00\n---\n\n# MySQL常用指令\n\n```bash\n$ mysql -u <username> -p        # 登入\n```\n\n```sql\n> SHOW DATABASES;               -- 顯示資料庫(預設橫式顯示)\n> SHOW DATABASES \\g             -- 橫式顯示\n> SHOW DATABASES \\G             -- 直式顯示\n> CREATE DATABASE <name>;       -- 建立資料庫\n> DROP DATABASE <name>;         -- 刪除資料庫\n> USE <database>;               -- 使用資料庫\n> SELECT DATABASE();            -- 查看目前所在資料庫\n> SHOW TABLES;                  -- 顯示資料表\n> DELIMITER <結束符號>          -- 更改結束符號\n> SHOW WARNINGS;                -- 顯示錯誤訊息\n> CREATE TABLE <name>           -- 建立資料表\n(\n    <column1> VARCHAR(20),\n    <column2> INT\n);\n> SHOW COLUMNS FROM <table>;    -- 顯示資料表各欄位性質\n> DESC <table>;                 -- 顯示資料表各欄位性質\n> DROP TABLE <name>;            -- 刪除資料表\n> SELECT * FROM <table>;        -- 顯示資料表中所有欄位資料\n> SELECT <column> FROM <table>; -- 顯示資料表中欄位資料\n> INSERT INTO <table>(<column1>, <column2>) -- 新增資料列\nVALUES(<column1 data>, <column2 data>),\n      (<column1 data>, <column2 data>);\n\n```\n\n# 資料庫階層架構\n\n- 資料庫(database)\n  - 資料表(table)\n    - 欄位(column)\n\n# 資料類型\n\n## 數值類型\n\n- 整數 (Integer)\n  \n  形式：`<data type> [UNSIGNED] [ZEROFILL]`\n\n  |     類型      | Byte(s) |                    範圍                    |         UNSIGNED         |\n  | :-----------: | :-----: | :----------------------------------------- | :----------------------- |\n  |    TINYINT    |    1    | -128 ~ 127                                 | 0 ~ 255                  |\n  |   SMALLINT    |    2    | -32768 ~ 32767                             | 0 ~ 65535                |\n  |   MEDIUMINT   |    3    | -8388608 ~ 8388607                         | 0 ~ 16777215             |\n  | INTEGER (INT) |    4    | -2147483648 ~ 2147483647                   | 0 ~ 4294967295           |\n  |    BIGINT     |    8    | -9223372036854775808 ~ 9223372036854775807 | 0 ~ 18446744073709551615 |\n\n- 定點數 (Fixed-Point)\n  - DECIMAL(M, D)(=DEC,NUMERIC,FIXED)\n    - M：總共位數(最大65、預設30)；D：小數點後位數(最大30、預設0)\n    - 小數點後不足補0，多的四捨五入\n    - 可負數，不算位數\n\n- 浮點數 (Floating-Point)\n  - FLOAT(M, D)\n    - 範圍：-3.402823466E+38 ~ -1.175494351E-38, 0, 1.175494351E-38 ~ 3.402823466E+38\n\n- 雙精度浮點數\n  - DOUBLE(M, D)(=DOUBLE PRECISION=REAL)\n    - 範圍：-1.7976931348623157E+308 ~ -2.2250738585072014E-308, 0, 2.2250738585072014E-308 ~ 1.7976931348623157E+308\n\n- 位 (Bit-Value)\n  - BIT(M)\n  - M：總共位數(最小1、最大64、預設1)\n  - 儲存方式：b'1'\n  - 顯示方式：\n    - <column>+0 : 十進位\n    - bin(<column>+0) : 二進位\n    - oct(<column>+0) : 八進位\n    - hex(<column>+0) : 十六進位\n\n## 時間類型\n\n- DATE\n  - 日期：YYYY-MM-DD\n  - 範圍：1000-01-01 ~ 9999-12-31\n  - 可插入INT型，不需\"-\"\n\n- TIME\n  - 時間：HH:MM:SS 或 HH:MM 或 MMSS 或 SS\n  - 範圍：-838:59:59 ~ 838:59:59\n  - 可表示時間差\n  - 可插入INT型，不需\":\"\n\n- DATETIME\n  - 日期時間：YYYY-MM-DD HH:MM:SS\n  - 範圍：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59\n\n- YEAR\n  - 年：YYYY 或 YY\n  - 範圍：1901 ~ 2155\n  - 可插入INT型或STRING型(2位或4位)\n    - 1 ~ 69 或 \"0\" ~ \"69\" 表示 2001 ~ 2069\n    - 70 ~ 99 或 \"70\" ~ \"99\" 表示 1970 ~ 1999\n    - 0 表示 0000\n\n- TIMESTAMP\n  - 範圍 : 1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC\n  - 會隨著 timezone 改變\n  - 預設當前時間\n  - SELECT NOW()：查看系統當前時間\n  ```sql\n  > <column> TIMESTAMP\n  > <column> TIMESTAMP DEFAULT NOW() ON UPDATE NOW()    -- 同上\n  ```\n\n- 設定時區\n  - show variables LIKE \"%time_zone%\"：查看時區變量\n  - SET time_zone = \"+08:00\"：更改時區為 UTC+8 小時\n  - SET time_zone = \"system\"：更改時區為系統當前時區\n  - time_zone 也可用國家名稱設置\n\n# 過濾條件\n\n形式：`SELECT * FROM <table> WHERE <conditions>;`\n\n```sql\n> SELECT * FROM <table> WHERE <column1>=\"XXX\" <AND|OR> <NOT> <column2>=\"YYY\";\n> SELECT * FROM <table> WHERE <column1> IN (\"XXX\" , \"YYY\");     -- 等同於WHERE <column1>=\"XXX\" OR <column2>=\"YYY\"\n> SELECT * FROM <table> WHERE <column1> BETWEEN \"VAL1\" AND \"VAL2\"\n```\n\n- 模糊搜尋（例如：顯示包含i的資料，不區分大小寫）\n```sql\n> SELECT * FROM <table> WHERE <column> LIKE \"%i%\";      -- %代表任意字符\n> SELECT * FROM <table> WHERE <column> LIKE \"_i_\";      -- _代表1個任意字符\n> SELECT * FROM <table> WHERE <column> LIKE \"%\\%i%\";    -- 顯示包含%i的資料\n```\n\n# 新增資料表\n\n形式：`CREATE TABLE(<column> <data type>);`\n\n```sql\n> CREATE TABLE IF NOT EXISTS <name>             -- 判斷資料表是否存在而建立\n(\n    <column> <data type>                        -- 資料預設為NULL\n    <column> <data type> NOT NULL               -- 資料不可為NULL\n    <column> DEFAULT <value>                    -- 資料預設值(預設為NULL)\n    <column> <data type> PRIMARY KEY            -- 資料唯一性、不可重複、不可為NULL\n    PRIMARY KEY(<column1>, <column2>)           -- 設置聯合PRIMARY KEY\n    <column> <data type> UNIQUE                 -- 資料唯一性、不可重複、可為NULL\n    <column> <data type> <PRIMARY KEY|UNIQUE> AUTO_INCREMENT   -- 未填值時自動遞增\n);\n```\n\n# 取別名\n\n```sql\n> SELECT <column> AS <alias> FROM <table>;\n```\n\n# 更新及刪除資料\n\n```sql\n> UPDATE <table> SET <column> = \"XXX\" WHERE <conditions>;\n> DELETE FROM <table> WHERE <conditions>;\n```\n\n# 字串處理函式\n\n```sql\n> SELECT CONCAT(<column1>, <column2>) AS <別名> FROM <table>;   -- 串接字串(<column1><column2>)\n> SELECT CONCAT_WS(\"<間格符>\", <column1>, <column2>) AS <別名> FROM <table>;    -- 串接字串(<column1><間格符><column2>)\n> SELECT SUBSTRING(\"Hello World\", 7);               -- 修剪字串(World)\n> SELECT SUBSTRING(\"Hello World\", -3);              -- 修剪字串(rld)\n> SELECT SUBSTRING(\"Hello World\", 1, 4);            -- 修剪字串(Hell)\n> SELECT REPLACE(\"Hello World\", \"World\", \"MySQL\");  -- 替換字串(Hello MySQL)\n> SELECT REVERSE(\"Hello World\");                    -- 反轉字串(dlroW olleH)\n> SELECT LENGTH(\"Hello World\");                     -- 字串長度(11)\n> SELECT CHAR_LENGTH(\"Hello World\");                -- 字串長度(11)\n> SELECT CHARACTER_LENGTH(\"Hello World\");           -- 字串長度(11)\n> SELECT LOWER(\"Hello World\");                      -- 轉小寫(hello world)\n> SELECT UPPER(\"Hello World\");                      -- 轉大寫(HELLO WORLD)\n```\n\n# 排序篩選\n\n```sql\n> SELECT * FROM <table> ORDER BY <column>;          -- 依照column升序排序\n> SELECT * FROM <table> ORDER BY <column> DESC;     -- 依照column降序排序\n> SELECT <column1>, <column2>, <column3> FROM <table> ORDER BY 3, 1;    -- 依照column3、column1升序排序\n> SELECT * FROM <table> LIMIT 3;                    -- 顯示前3筆資料\n> SELECT * FROM <table> LIMIT 2, 4;                 -- 顯示第2筆後4筆資料\n```\n\n# 資料統計\n\n```sql\n> SELECT COUNT(*) FROM <table>;                     -- 計算資料數量\n> SELECT DISTINCT <column> FROM <table>;            -- 去除重複資料顯示唯一值\n> SELECT COUNT(<column>) FROM <table> GROUP BY <column>;   -- 將column分組後算出每組的資料數量\n> SELECT MIN(<column>) FROM <table>;                -- 計算column的最小值\n> SELECT MAX(<column>) FROM <table>;                -- 計算column的最大值\n> SELECT SUM(<column>) FROM <table>;                -- 計算column的和\n> SELECT AVG(<column>) FROM <table>;                -- 計算column的平均值\n> SELECT COUNT(<column>) FROM <table> GROUP BY <column> HAVING <column1> = \"XXX\";   -- 過濾GROUP BY後資料\n```\n\n# 更新欄位\n\n```sql\n> ALTER TABLE <name> ADD column3 INT PRIMARY KEY AUTO_INCREMENT;    -- 新增欄位\n> ALTER TABLE <name> DROP column3;                                  -- 刪除欄位\n> ALTER TABLE <name> CHANGE <column_old> <column_new> <data_type>;  -- 更改欄位名稱\n> ALTER TABLE <name> MODIFY <column> <data_type>;                   -- 更改欄位性質\n```\n\n\n# 參考資料\n1. https://hackmd.io/@kenny88881234/HJ_KDx1xS\n2. https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html","slug":"MySQL指令","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr19000vv47f721rdnhu","content":"<h1 id=\"MySQL常用指令\"><a href=\"#MySQL常用指令\" class=\"headerlink\" title=\"MySQL常用指令\"></a>MySQL常用指令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ mysql -u &lt;username&gt; -p        <span class=\"hljs-comment\"># 登入</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES;               <span class=\"hljs-comment\">-- 顯示資料庫(預設橫式顯示)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES \\g             <span class=\"hljs-comment\">-- 橫式顯示</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES \\G             <span class=\"hljs-comment\">-- 直式顯示</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> DATABASE <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;       <span class=\"hljs-comment\">-- 建立資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> DATABASE <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;         <span class=\"hljs-comment\">-- 刪除資料庫</span><br><span class=\"hljs-operator\">&gt;</span> USE <span class=\"hljs-operator\">&lt;</span>database<span class=\"hljs-operator\">&gt;</span>;               <span class=\"hljs-comment\">-- 使用資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> DATABASE();            <span class=\"hljs-comment\">-- 查看目前所在資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> TABLES;                  <span class=\"hljs-comment\">-- 顯示資料表</span><br><span class=\"hljs-operator\">&gt;</span> DELIMITER <span class=\"hljs-operator\">&lt;</span>結束符號<span class=\"hljs-operator\">&gt;</span>          <span class=\"hljs-comment\">-- 更改結束符號</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> WARNINGS;                <span class=\"hljs-comment\">-- 顯示錯誤訊息</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>           <span class=\"hljs-comment\">-- 建立資料表</span><br>(<br>    <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),<br>    <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">INT</span><br>);<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> COLUMNS <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;    <span class=\"hljs-comment\">-- 顯示資料表各欄位性質</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DESC</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                 <span class=\"hljs-comment\">-- 顯示資料表各欄位性質</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;            <span class=\"hljs-comment\">-- 刪除資料表</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;        <span class=\"hljs-comment\">-- 顯示資料表中所有欄位資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>; <span class=\"hljs-comment\">-- 顯示資料表中欄位資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-comment\">-- 新增資料列</span><br><span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-operator\">&lt;</span>column1 data<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2 data<span class=\"hljs-operator\">&gt;</span>),<br>      (<span class=\"hljs-operator\">&lt;</span>column1 data<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2 data<span class=\"hljs-operator\">&gt;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"資料庫階層架構\"><a href=\"#資料庫階層架構\" class=\"headerlink\" title=\"資料庫階層架構\"></a>資料庫階層架構</h1><ul>\n<li>資料庫(database)<ul>\n<li>資料表(table)<ul>\n<li>欄位(column)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"資料類型\"><a href=\"#資料類型\" class=\"headerlink\" title=\"資料類型\"></a>資料類型</h1><h2 id=\"數值類型\"><a href=\"#數值類型\" class=\"headerlink\" title=\"數值類型\"></a>數值類型</h2><ul>\n<li><p>整數 (Integer)</p>\n<p>形式：<code>&lt;data type&gt; [UNSIGNED] [ZEROFILL]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">類型</th>\n<th align=\"center\">Byte(s)</th>\n<th align=\"left\">範圍</th>\n<th align=\"left\">UNSIGNED</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">1</td>\n<td align=\"left\">-128 ~ 127</td>\n<td align=\"left\">0 ~ 255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">2</td>\n<td align=\"left\">-32768 ~ 32767</td>\n<td align=\"left\">0 ~ 65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">3</td>\n<td align=\"left\">-8388608 ~ 8388607</td>\n<td align=\"left\">0 ~ 16777215</td>\n</tr>\n<tr>\n<td align=\"center\">INTEGER (INT)</td>\n<td align=\"center\">4</td>\n<td align=\"left\">-2147483648 ~ 2147483647</td>\n<td align=\"left\">0 ~ 4294967295</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">8</td>\n<td align=\"left\">-9223372036854775808 ~ 9223372036854775807</td>\n<td align=\"left\">0 ~ 18446744073709551615</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>定點數 (Fixed-Point)</p>\n<ul>\n<li>DECIMAL(M, D)(&#x3D;DEC,NUMERIC,FIXED)<ul>\n<li>M：總共位數(最大65、預設30)；D：小數點後位數(最大30、預設0)</li>\n<li>小數點後不足補0，多的四捨五入</li>\n<li>可負數，不算位數</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>浮點數 (Floating-Point)</p>\n<ul>\n<li>FLOAT(M, D)<ul>\n<li>範圍：-3.402823466E+38 ~ -1.175494351E-38, 0, 1.175494351E-38 ~ 3.402823466E+38</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>雙精度浮點數</p>\n<ul>\n<li>DOUBLE(M, D)(&#x3D;DOUBLE PRECISION&#x3D;REAL)<ul>\n<li>範圍：-1.7976931348623157E+308 ~ -2.2250738585072014E-308, 0, 2.2250738585072014E-308 ~ 1.7976931348623157E+308</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>位 (Bit-Value)</p>\n<ul>\n<li>BIT(M)</li>\n<li>M：總共位數(最小1、最大64、預設1)</li>\n<li>儲存方式：b’1’</li>\n<li>顯示方式：<ul>\n<li><column>+0 : 十進位</li>\n<li>bin(<column>+0) : 二進位</li>\n<li>oct(<column>+0) : 八進位</li>\n<li>hex(<column>+0) : 十六進位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"時間類型\"><a href=\"#時間類型\" class=\"headerlink\" title=\"時間類型\"></a>時間類型</h2><ul>\n<li><p>DATE</p>\n<ul>\n<li>日期：YYYY-MM-DD</li>\n<li>範圍：1000-01-01 ~ 9999-12-31</li>\n<li>可插入INT型，不需”-“</li>\n</ul>\n</li>\n<li><p>TIME</p>\n<ul>\n<li>時間：HH:MM:SS 或 HH:MM 或 MMSS 或 SS</li>\n<li>範圍：-838:59:59 ~ 838:59:59</li>\n<li>可表示時間差</li>\n<li>可插入INT型，不需”:”</li>\n</ul>\n</li>\n<li><p>DATETIME</p>\n<ul>\n<li>日期時間：YYYY-MM-DD HH:MM:SS</li>\n<li>範圍：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</li>\n</ul>\n</li>\n<li><p>YEAR</p>\n<ul>\n<li>年：YYYY 或 YY</li>\n<li>範圍：1901 ~ 2155</li>\n<li>可插入INT型或STRING型(2位或4位)<ul>\n<li>1 ~ 69 或 “0” ~ “69” 表示 2001 ~ 2069</li>\n<li>70 ~ 99 或 “70” ~ “99” 表示 1970 ~ 1999</li>\n<li>0 表示 0000</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>TIMESTAMP</p>\n<ul>\n<li>範圍 : 1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</li>\n<li>會隨著 timezone 改變</li>\n<li>預設當前時間</li>\n<li>SELECT NOW()：查看系統當前時間<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">TIMESTAMP</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">TIMESTAMP</span> <span class=\"hljs-keyword\">DEFAULT</span> NOW() <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> NOW()    <span class=\"hljs-comment\">-- 同上</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定時區</p>\n<ul>\n<li>show variables LIKE “%time_zone%”：查看時區變量</li>\n<li>SET time_zone &#x3D; “+08:00”：更改時區為 UTC+8 小時</li>\n<li>SET time_zone &#x3D; “system”：更改時區為系統當前時區</li>\n<li>time_zone 也可用國家名稱設置</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"過濾條件\"><a href=\"#過濾條件\" class=\"headerlink\" title=\"過濾條件\"></a>過濾條件</h1><p>形式：<code>SELECT * FROM &lt;table&gt; WHERE &lt;conditions&gt;;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;=</span>&quot;XXX&quot; <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">AND</span><span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">OR</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">NOT</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;=</span>&quot;YYY&quot;;<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">IN</span> (&quot;XXX&quot; , &quot;YYY&quot;);     <span class=\"hljs-comment\">-- 等同於WHERE &lt;column1&gt;=&quot;XXX&quot; OR &lt;column2&gt;=&quot;YYY&quot;</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">BETWEEN</span> &quot;VAL1&quot; <span class=\"hljs-keyword\">AND</span> &quot;VAL2&quot;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>模糊搜尋（例如：顯示包含i的資料，不區分大小寫）<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;%i%&quot;;      <span class=\"hljs-comment\">-- %代表任意字符</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;_i_&quot;;      <span class=\"hljs-comment\">-- _代表1個任意字符</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;%\\%i%&quot;;    <span class=\"hljs-comment\">-- 顯示包含%i的資料</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"新增資料表\"><a href=\"#新增資料表\" class=\"headerlink\" title=\"新增資料表\"></a>新增資料表</h1><p>形式：<code>CREATE TABLE(&lt;column&gt; &lt;data type&gt;);</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>             <span class=\"hljs-comment\">-- 判斷資料表是否存在而建立</span><br>(<br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span>                        <span class=\"hljs-comment\">-- 資料預設為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>               <span class=\"hljs-comment\">-- 資料不可為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">&gt;</span>                    <span class=\"hljs-comment\">-- 資料預設值(預設為NULL)</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY            <span class=\"hljs-comment\">-- 資料唯一性、不可重複、不可為NULL</span><br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>)           <span class=\"hljs-comment\">-- 設置聯合PRIMARY KEY</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">UNIQUE</span>                 <span class=\"hljs-comment\">-- 資料唯一性、不可重複、可為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">PRIMARY</span> KEY<span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">UNIQUE</span><span class=\"hljs-operator\">&gt;</span> AUTO_INCREMENT   <span class=\"hljs-comment\">-- 未填值時自動遞增</span><br>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"取別名\"><a href=\"#取別名\" class=\"headerlink\" title=\"取別名\"></a>取別名</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>alias<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"更新及刪除資料\"><a href=\"#更新及刪除資料\" class=\"headerlink\" title=\"更新及刪除資料\"></a>更新及刪除資料</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span> &quot;XXX&quot; <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>conditions<span class=\"hljs-operator\">&gt;</span>;<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>conditions<span class=\"hljs-operator\">&gt;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"字串處理函式\"><a href=\"#字串處理函式\" class=\"headerlink\" title=\"字串處理函式\"></a>字串處理函式</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> CONCAT(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>別名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;   <span class=\"hljs-comment\">-- 串接字串(&lt;column1&gt;&lt;column2&gt;)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> CONCAT_WS(&quot;&lt;間格符&gt;&quot;, <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>別名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;    <span class=\"hljs-comment\">-- 串接字串(&lt;column1&gt;&lt;間格符&gt;&lt;column2&gt;)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">7</span>);               <span class=\"hljs-comment\">-- 修剪字串(World)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">-3</span>);              <span class=\"hljs-comment\">-- 修剪字串(rld)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);            <span class=\"hljs-comment\">-- 修剪字串(Hell)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> REPLACE(&quot;Hello World&quot;, &quot;World&quot;, &quot;MySQL&quot;);  <span class=\"hljs-comment\">-- 替換字串(Hello MySQL)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> REVERSE(&quot;Hello World&quot;);                    <span class=\"hljs-comment\">-- 反轉字串(dlroW olleH)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> LENGTH(&quot;Hello World&quot;);                     <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">CHAR_LENGTH</span>(&quot;Hello World&quot;);                <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">CHARACTER_LENGTH</span>(&quot;Hello World&quot;);           <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">LOWER</span>(&quot;Hello World&quot;);                      <span class=\"hljs-comment\">-- 轉小寫(hello world)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">UPPER</span>(&quot;Hello World&quot;);                      <span class=\"hljs-comment\">-- 轉大寫(HELLO WORLD)</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"排序篩選\"><a href=\"#排序篩選\" class=\"headerlink\" title=\"排序篩選\"></a>排序篩選</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>;          <span class=\"hljs-comment\">-- 依照column升序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DESC</span>;     <span class=\"hljs-comment\">-- 依照column降序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column3<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">-- 依照column3、column1升序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> LIMIT <span class=\"hljs-number\">3</span>;                    <span class=\"hljs-comment\">-- 顯示前3筆資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> LIMIT <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>;                 <span class=\"hljs-comment\">-- 顯示第2筆後4筆資料</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"資料統計\"><a href=\"#資料統計\" class=\"headerlink\" title=\"資料統計\"></a>資料統計</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                     <span class=\"hljs-comment\">-- 計算資料數量</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;            <span class=\"hljs-comment\">-- 去除重複資料顯示唯一值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>;   <span class=\"hljs-comment\">-- 將column分組後算出每組的資料數量</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MIN</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的最小值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MAX</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的最大值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUM</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的和</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的平均值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">HAVING</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span> &quot;XXX&quot;;   <span class=\"hljs-comment\">-- 過濾GROUP BY後資料</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"更新欄位\"><a href=\"#更新欄位\" class=\"headerlink\" title=\"更新欄位\"></a>更新欄位</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ADD</span> column3 <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY AUTO_INCREMENT;    <span class=\"hljs-comment\">-- 新增欄位</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> column3;                                  <span class=\"hljs-comment\">-- 刪除欄位</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> CHANGE <span class=\"hljs-operator\">&lt;</span>column_old<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>column_new<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span>;  <span class=\"hljs-comment\">-- 更改欄位名稱</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> MODIFY <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span>;                   <span class=\"hljs-comment\">-- 更改欄位性質</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ol>\n<li><a href=\"https://hackmd.io/@kenny88881234/HJ_KDx1xS\">https://hackmd.io/@kenny88881234/HJ_KDx1xS</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html\">https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"MySQL常用指令\"><a href=\"#MySQL常用指令\" class=\"headerlink\" title=\"MySQL常用指令\"></a>MySQL常用指令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ mysql -u &lt;username&gt; -p        <span class=\"hljs-comment\"># 登入</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES;               <span class=\"hljs-comment\">-- 顯示資料庫(預設橫式顯示)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES \\g             <span class=\"hljs-comment\">-- 橫式顯示</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> DATABASES \\G             <span class=\"hljs-comment\">-- 直式顯示</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> DATABASE <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;       <span class=\"hljs-comment\">-- 建立資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> DATABASE <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;         <span class=\"hljs-comment\">-- 刪除資料庫</span><br><span class=\"hljs-operator\">&gt;</span> USE <span class=\"hljs-operator\">&lt;</span>database<span class=\"hljs-operator\">&gt;</span>;               <span class=\"hljs-comment\">-- 使用資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> DATABASE();            <span class=\"hljs-comment\">-- 查看目前所在資料庫</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> TABLES;                  <span class=\"hljs-comment\">-- 顯示資料表</span><br><span class=\"hljs-operator\">&gt;</span> DELIMITER <span class=\"hljs-operator\">&lt;</span>結束符號<span class=\"hljs-operator\">&gt;</span>          <span class=\"hljs-comment\">-- 更改結束符號</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> WARNINGS;                <span class=\"hljs-comment\">-- 顯示錯誤訊息</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>           <span class=\"hljs-comment\">-- 建立資料表</span><br>(<br>    <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">VARCHAR</span>(<span class=\"hljs-number\">20</span>),<br>    <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">INT</span><br>);<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SHOW</span> COLUMNS <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;    <span class=\"hljs-comment\">-- 顯示資料表各欄位性質</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DESC</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                 <span class=\"hljs-comment\">-- 顯示資料表各欄位性質</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>;            <span class=\"hljs-comment\">-- 刪除資料表</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;        <span class=\"hljs-comment\">-- 顯示資料表中所有欄位資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>; <span class=\"hljs-comment\">-- 顯示資料表中欄位資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-comment\">-- 新增資料列</span><br><span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-operator\">&lt;</span>column1 data<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2 data<span class=\"hljs-operator\">&gt;</span>),<br>      (<span class=\"hljs-operator\">&lt;</span>column1 data<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2 data<span class=\"hljs-operator\">&gt;</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"資料庫階層架構\"><a href=\"#資料庫階層架構\" class=\"headerlink\" title=\"資料庫階層架構\"></a>資料庫階層架構</h1><ul>\n<li>資料庫(database)<ul>\n<li>資料表(table)<ul>\n<li>欄位(column)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"資料類型\"><a href=\"#資料類型\" class=\"headerlink\" title=\"資料類型\"></a>資料類型</h1><h2 id=\"數值類型\"><a href=\"#數值類型\" class=\"headerlink\" title=\"數值類型\"></a>數值類型</h2><ul>\n<li><p>整數 (Integer)</p>\n<p>形式：<code>&lt;data type&gt; [UNSIGNED] [ZEROFILL]</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">類型</th>\n<th align=\"center\">Byte(s)</th>\n<th align=\"left\">範圍</th>\n<th align=\"left\">UNSIGNED</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">1</td>\n<td align=\"left\">-128 ~ 127</td>\n<td align=\"left\">0 ~ 255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">2</td>\n<td align=\"left\">-32768 ~ 32767</td>\n<td align=\"left\">0 ~ 65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">3</td>\n<td align=\"left\">-8388608 ~ 8388607</td>\n<td align=\"left\">0 ~ 16777215</td>\n</tr>\n<tr>\n<td align=\"center\">INTEGER (INT)</td>\n<td align=\"center\">4</td>\n<td align=\"left\">-2147483648 ~ 2147483647</td>\n<td align=\"left\">0 ~ 4294967295</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">8</td>\n<td align=\"left\">-9223372036854775808 ~ 9223372036854775807</td>\n<td align=\"left\">0 ~ 18446744073709551615</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>定點數 (Fixed-Point)</p>\n<ul>\n<li>DECIMAL(M, D)(&#x3D;DEC,NUMERIC,FIXED)<ul>\n<li>M：總共位數(最大65、預設30)；D：小數點後位數(最大30、預設0)</li>\n<li>小數點後不足補0，多的四捨五入</li>\n<li>可負數，不算位數</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>浮點數 (Floating-Point)</p>\n<ul>\n<li>FLOAT(M, D)<ul>\n<li>範圍：-3.402823466E+38 ~ -1.175494351E-38, 0, 1.175494351E-38 ~ 3.402823466E+38</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>雙精度浮點數</p>\n<ul>\n<li>DOUBLE(M, D)(&#x3D;DOUBLE PRECISION&#x3D;REAL)<ul>\n<li>範圍：-1.7976931348623157E+308 ~ -2.2250738585072014E-308, 0, 2.2250738585072014E-308 ~ 1.7976931348623157E+308</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>位 (Bit-Value)</p>\n<ul>\n<li>BIT(M)</li>\n<li>M：總共位數(最小1、最大64、預設1)</li>\n<li>儲存方式：b’1’</li>\n<li>顯示方式：<ul>\n<li><column>+0 : 十進位</li>\n<li>bin(<column>+0) : 二進位</li>\n<li>oct(<column>+0) : 八進位</li>\n<li>hex(<column>+0) : 十六進位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"時間類型\"><a href=\"#時間類型\" class=\"headerlink\" title=\"時間類型\"></a>時間類型</h2><ul>\n<li><p>DATE</p>\n<ul>\n<li>日期：YYYY-MM-DD</li>\n<li>範圍：1000-01-01 ~ 9999-12-31</li>\n<li>可插入INT型，不需”-“</li>\n</ul>\n</li>\n<li><p>TIME</p>\n<ul>\n<li>時間：HH:MM:SS 或 HH:MM 或 MMSS 或 SS</li>\n<li>範圍：-838:59:59 ~ 838:59:59</li>\n<li>可表示時間差</li>\n<li>可插入INT型，不需”:”</li>\n</ul>\n</li>\n<li><p>DATETIME</p>\n<ul>\n<li>日期時間：YYYY-MM-DD HH:MM:SS</li>\n<li>範圍：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</li>\n</ul>\n</li>\n<li><p>YEAR</p>\n<ul>\n<li>年：YYYY 或 YY</li>\n<li>範圍：1901 ~ 2155</li>\n<li>可插入INT型或STRING型(2位或4位)<ul>\n<li>1 ~ 69 或 “0” ~ “69” 表示 2001 ~ 2069</li>\n<li>70 ~ 99 或 “70” ~ “99” 表示 1970 ~ 1999</li>\n<li>0 表示 0000</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>TIMESTAMP</p>\n<ul>\n<li>範圍 : 1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</li>\n<li>會隨著 timezone 改變</li>\n<li>預設當前時間</li>\n<li>SELECT NOW()：查看系統當前時間<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">TIMESTAMP</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-type\">TIMESTAMP</span> <span class=\"hljs-keyword\">DEFAULT</span> NOW() <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> NOW()    <span class=\"hljs-comment\">-- 同上</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>設定時區</p>\n<ul>\n<li>show variables LIKE “%time_zone%”：查看時區變量</li>\n<li>SET time_zone &#x3D; “+08:00”：更改時區為 UTC+8 小時</li>\n<li>SET time_zone &#x3D; “system”：更改時區為系統當前時區</li>\n<li>time_zone 也可用國家名稱設置</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"過濾條件\"><a href=\"#過濾條件\" class=\"headerlink\" title=\"過濾條件\"></a>過濾條件</h1><p>形式：<code>SELECT * FROM &lt;table&gt; WHERE &lt;conditions&gt;;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;=</span>&quot;XXX&quot; <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">AND</span><span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">OR</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">NOT</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;=</span>&quot;YYY&quot;;<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">IN</span> (&quot;XXX&quot; , &quot;YYY&quot;);     <span class=\"hljs-comment\">-- 等同於WHERE &lt;column1&gt;=&quot;XXX&quot; OR &lt;column2&gt;=&quot;YYY&quot;</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">BETWEEN</span> &quot;VAL1&quot; <span class=\"hljs-keyword\">AND</span> &quot;VAL2&quot;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>模糊搜尋（例如：顯示包含i的資料，不區分大小寫）<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;%i%&quot;;      <span class=\"hljs-comment\">-- %代表任意字符</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;_i_&quot;;      <span class=\"hljs-comment\">-- _代表1個任意字符</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">LIKE</span> &quot;%\\%i%&quot;;    <span class=\"hljs-comment\">-- 顯示包含%i的資料</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"新增資料表\"><a href=\"#新增資料表\" class=\"headerlink\" title=\"新增資料表\"></a>新增資料表</h1><p>形式：<code>CREATE TABLE(&lt;column&gt; &lt;data type&gt;);</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> IF <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span>             <span class=\"hljs-comment\">-- 判斷資料表是否存在而建立</span><br>(<br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span>                        <span class=\"hljs-comment\">-- 資料預設為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>               <span class=\"hljs-comment\">-- 資料不可為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">value</span><span class=\"hljs-operator\">&gt;</span>                    <span class=\"hljs-comment\">-- 資料預設值(預設為NULL)</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY            <span class=\"hljs-comment\">-- 資料唯一性、不可重複、不可為NULL</span><br>    <span class=\"hljs-keyword\">PRIMARY</span> KEY(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>)           <span class=\"hljs-comment\">-- 設置聯合PRIMARY KEY</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">UNIQUE</span>                 <span class=\"hljs-comment\">-- 資料唯一性、不可重複、可為NULL</span><br>    <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data type<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">PRIMARY</span> KEY<span class=\"hljs-operator\">|</span><span class=\"hljs-keyword\">UNIQUE</span><span class=\"hljs-operator\">&gt;</span> AUTO_INCREMENT   <span class=\"hljs-comment\">-- 未填值時自動遞增</span><br>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"取別名\"><a href=\"#取別名\" class=\"headerlink\" title=\"取別名\"></a>取別名</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>alias<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"更新及刪除資料\"><a href=\"#更新及刪除資料\" class=\"headerlink\" title=\"更新及刪除資料\"></a>更新及刪除資料</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SET</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span> &quot;XXX&quot; <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>conditions<span class=\"hljs-operator\">&gt;</span>;<br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-operator\">&lt;</span>conditions<span class=\"hljs-operator\">&gt;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"字串處理函式\"><a href=\"#字串處理函式\" class=\"headerlink\" title=\"字串處理函式\"></a>字串處理函式</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> CONCAT(<span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>別名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;   <span class=\"hljs-comment\">-- 串接字串(&lt;column1&gt;&lt;column2&gt;)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> CONCAT_WS(&quot;&lt;間格符&gt;&quot;, <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-operator\">&lt;</span>別名<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;    <span class=\"hljs-comment\">-- 串接字串(&lt;column1&gt;&lt;間格符&gt;&lt;column2&gt;)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">7</span>);               <span class=\"hljs-comment\">-- 修剪字串(World)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">-3</span>);              <span class=\"hljs-comment\">-- 修剪字串(rld)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUBSTRING</span>(&quot;Hello World&quot;, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);            <span class=\"hljs-comment\">-- 修剪字串(Hell)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> REPLACE(&quot;Hello World&quot;, &quot;World&quot;, &quot;MySQL&quot;);  <span class=\"hljs-comment\">-- 替換字串(Hello MySQL)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> REVERSE(&quot;Hello World&quot;);                    <span class=\"hljs-comment\">-- 反轉字串(dlroW olleH)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> LENGTH(&quot;Hello World&quot;);                     <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">CHAR_LENGTH</span>(&quot;Hello World&quot;);                <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">CHARACTER_LENGTH</span>(&quot;Hello World&quot;);           <span class=\"hljs-comment\">-- 字串長度(11)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">LOWER</span>(&quot;Hello World&quot;);                      <span class=\"hljs-comment\">-- 轉小寫(hello world)</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">UPPER</span>(&quot;Hello World&quot;);                      <span class=\"hljs-comment\">-- 轉大寫(HELLO WORLD)</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"排序篩選\"><a href=\"#排序篩選\" class=\"headerlink\" title=\"排序篩選\"></a>排序篩選</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>;          <span class=\"hljs-comment\">-- 依照column升序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DESC</span>;     <span class=\"hljs-comment\">-- 依照column降序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column2<span class=\"hljs-operator\">&gt;</span>, <span class=\"hljs-operator\">&lt;</span>column3<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">-- 依照column3、column1升序排序</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> LIMIT <span class=\"hljs-number\">3</span>;                    <span class=\"hljs-comment\">-- 顯示前3筆資料</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> LIMIT <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>;                 <span class=\"hljs-comment\">-- 顯示第2筆後4筆資料</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"資料統計\"><a href=\"#資料統計\" class=\"headerlink\" title=\"資料統計\"></a>資料統計</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">*</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                     <span class=\"hljs-comment\">-- 計算資料數量</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;            <span class=\"hljs-comment\">-- 去除重複資料顯示唯一值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>;   <span class=\"hljs-comment\">-- 將column分組後算出每組的資料數量</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MIN</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的最小值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">MAX</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的最大值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">SUM</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的和</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span>;                <span class=\"hljs-comment\">-- 計算column的平均值</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">COUNT</span>(<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span>) <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">HAVING</span> <span class=\"hljs-operator\">&lt;</span>column1<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span> &quot;XXX&quot;;   <span class=\"hljs-comment\">-- 過濾GROUP BY後資料</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"更新欄位\"><a href=\"#更新欄位\" class=\"headerlink\" title=\"更新欄位\"></a>更新欄位</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ADD</span> column3 <span class=\"hljs-type\">INT</span> <span class=\"hljs-keyword\">PRIMARY</span> KEY AUTO_INCREMENT;    <span class=\"hljs-comment\">-- 新增欄位</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">DROP</span> column3;                                  <span class=\"hljs-comment\">-- 刪除欄位</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> CHANGE <span class=\"hljs-operator\">&lt;</span>column_old<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>column_new<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span>;  <span class=\"hljs-comment\">-- 更改欄位名稱</span><br><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-operator\">&lt;</span>name<span class=\"hljs-operator\">&gt;</span> MODIFY <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">column</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">&lt;</span>data_type<span class=\"hljs-operator\">&gt;</span>;                   <span class=\"hljs-comment\">-- 更改欄位性質</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><ol>\n<li><a href=\"https://hackmd.io/@kenny88881234/HJ_KDx1xS\">https://hackmd.io/@kenny88881234/HJ_KDx1xS</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html\">https://dev.mysql.com/doc/refman/5.7/en/numeric-types.html</a></li>\n</ol>\n"},{"title":"利用JS撈網路資料","date":"2022-09-06T03:12:00.000Z","updated":"2022-09-26T03:17:00.000Z","_content":"\n## 跨來源資源共用（Cross-Origin Resource Sharing，CORS）\n\n![檢查流程](/img/blog/%E5%88%A9%E7%94%A8JS%E6%92%88%E7%B6%B2%E8%B7%AF%E8%B3%87%E6%96%99/CORS.png)","source":"_posts/利用JS撈網路資料.md","raw":"---\ntitle: 利用JS撈網路資料\ncategories: [HTML , JavaScript]\ntags: [HTML , JavaScript]\ndate: 2022/09/06 11:12\nupdated: 2022/09/26 11:17\n---\n\n## 跨來源資源共用（Cross-Origin Resource Sharing，CORS）\n\n![檢查流程](/img/blog/%E5%88%A9%E7%94%A8JS%E6%92%88%E7%B6%B2%E8%B7%AF%E8%B3%87%E6%96%99/CORS.png)","slug":"利用JS撈網路資料","published":1,"comments":1,"layout":"post","photos":[],"_id":"cloojhr1a000yv47f12k013pj","content":"<h2 id=\"跨來源資源共用（Cross-Origin-Resource-Sharing，CORS）\"><a href=\"#跨來源資源共用（Cross-Origin-Resource-Sharing，CORS）\" class=\"headerlink\" title=\"跨來源資源共用（Cross-Origin Resource Sharing，CORS）\"></a>跨來源資源共用（Cross-Origin Resource Sharing，CORS）</h2><p><img src=\"/blog/img/blog/%E5%88%A9%E7%94%A8JS%E6%92%88%E7%B6%B2%E8%B7%AF%E8%B3%87%E6%96%99/CORS.png\" alt=\"檢查流程\"></p>\n","excerpt":"","more":"<h2 id=\"跨來源資源共用（Cross-Origin-Resource-Sharing，CORS）\"><a href=\"#跨來源資源共用（Cross-Origin-Resource-Sharing，CORS）\" class=\"headerlink\" title=\"跨來源資源共用（Cross-Origin Resource Sharing，CORS）\"></a>跨來源資源共用（Cross-Origin Resource Sharing，CORS）</h2><p><img src=\"/blog/img/blog/%E5%88%A9%E7%94%A8JS%E6%92%88%E7%B6%B2%E8%B7%AF%E8%B3%87%E6%96%99/CORS.png\" alt=\"檢查流程\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cloojhr150006v47f0ygk2nw0","category_id":"cloojhr160009v47f1tpm1fon","_id":"cloojhr17000fv47f0motc9rf"},{"post_id":"cloojhr130002v47fg9ivgly0","category_id":"cloojhr140004v47fdupf4xx3","_id":"cloojhr17000kv47farlib6qx"},{"post_id":"cloojhr130002v47fg9ivgly0","category_id":"cloojhr16000dv47f8a4l3q93","_id":"cloojhr17000mv47f574c2dxk"},{"post_id":"cloojhr130003v47fb4y79hjz","category_id":"cloojhr150007v47f2t5kaavz","_id":"cloojhr17000nv47fchxgc4bn"},{"post_id":"cloojhr130003v47fb4y79hjz","category_id":"cloojhr17000hv47ffscy8tbi","_id":"cloojhr17000ov47f8exs1qfi"},{"post_id":"cloojhr19000uv47feuhm1fbq","category_id":"cloojhr1a0012v47fblz17kd1","_id":"cloojhr1b0017v47f5wqx0p0r"},{"post_id":"cloojhr18000pv47fajzi4xw7","category_id":"cloojhr18000rv47f6f3pgs6k","_id":"cloojhr1b001bv47f5eq5crjm"},{"post_id":"cloojhr18000pv47fajzi4xw7","category_id":"cloojhr1b0015v47f99z0hwmc","_id":"cloojhr1b001fv47fdh248e2b"},{"post_id":"cloojhr18000qv47fb7lld8jr","category_id":"cloojhr18000rv47f6f3pgs6k","_id":"cloojhr1c001pv47f3ovyho93"},{"post_id":"cloojhr18000qv47fb7lld8jr","category_id":"cloojhr1b001hv47f1fdxb7sk","_id":"cloojhr1c001rv47f3m9l3y9t"},{"post_id":"cloojhr19000tv47f95k046u5","category_id":"cloojhr18000rv47f6f3pgs6k","_id":"cloojhr1c001sv47f01bdghum"},{"post_id":"cloojhr19000tv47f95k046u5","category_id":"cloojhr1b001hv47f1fdxb7sk","_id":"cloojhr1c001vv47f6vmo9yya"},{"post_id":"cloojhr19000vv47f721rdnhu","category_id":"cloojhr1b0018v47fdxt5bzz1","_id":"cloojhr1c001xv47fd2eb0819"},{"post_id":"cloojhr19000vv47f721rdnhu","category_id":"cloojhr1c001ov47f9stvezcl","_id":"cloojhr1c0020v47f5r9tcpg0"},{"post_id":"cloojhr1a000yv47f12k013pj","category_id":"cloojhr1b001dv47fhanjcemu","_id":"cloojhr1c0021v47fe8abdlfb"},{"post_id":"cloojhr1a000yv47f12k013pj","category_id":"cloojhr1c001tv47fb8dy3jcm","_id":"cloojhr1c0022v47f01v53a0m"}],"PostTag":[{"post_id":"cloojhr130002v47fg9ivgly0","tag_id":"cloojhr150005v47f4sy14fe2","_id":"cloojhr16000bv47feeovdiot"},{"post_id":"cloojhr130002v47fg9ivgly0","tag_id":"cloojhr150008v47f37hd2vyk","_id":"cloojhr16000cv47fh5bg87os"},{"post_id":"cloojhr130003v47fb4y79hjz","tag_id":"cloojhr16000av47f9ddu0a68","_id":"cloojhr17000iv47fh83n3zfi"},{"post_id":"cloojhr130003v47fb4y79hjz","tag_id":"cloojhr150008v47f37hd2vyk","_id":"cloojhr17000jv47f0bjtca3u"},{"post_id":"cloojhr150006v47f0ygk2nw0","tag_id":"cloojhr17000gv47f6z6c39xx","_id":"cloojhr17000lv47f9ek33gl7"},{"post_id":"cloojhr18000pv47fajzi4xw7","tag_id":"cloojhr18000sv47f2ir2clct","_id":"cloojhr1a0011v47fcjcif2na"},{"post_id":"cloojhr18000pv47fajzi4xw7","tag_id":"cloojhr19000xv47f7new23sn","_id":"cloojhr1b0013v47f1gcme79m"},{"post_id":"cloojhr18000qv47fb7lld8jr","tag_id":"cloojhr18000sv47f2ir2clct","_id":"cloojhr1b001av47fav3dbqzf"},{"post_id":"cloojhr18000qv47fb7lld8jr","tag_id":"cloojhr1b0014v47f104x6ket","_id":"cloojhr1b001cv47fel8je45y"},{"post_id":"cloojhr18000qv47fb7lld8jr","tag_id":"cloojhr1b0016v47f6g9l5343","_id":"cloojhr1b001gv47ffae182ey"},{"post_id":"cloojhr19000tv47f95k046u5","tag_id":"cloojhr1b0019v47fbe0d6bhk","_id":"cloojhr1b001jv47f1hnt4p3x"},{"post_id":"cloojhr19000tv47f95k046u5","tag_id":"cloojhr1b001ev47f1pn7alos","_id":"cloojhr1b001kv47fdh5gg42g"},{"post_id":"cloojhr19000uv47feuhm1fbq","tag_id":"cloojhr1b001iv47ffyslg0q3","_id":"cloojhr1c001nv47fbtfvb68g"},{"post_id":"cloojhr19000vv47f721rdnhu","tag_id":"cloojhr1c001mv47f1jjk2q2q","_id":"cloojhr1c001wv47fft0q8ehm"},{"post_id":"cloojhr19000vv47f721rdnhu","tag_id":"cloojhr1c001qv47favmhdltj","_id":"cloojhr1c001yv47f131h3t4y"},{"post_id":"cloojhr1a000yv47f12k013pj","tag_id":"cloojhr1c001uv47f5o227g8d","_id":"cloojhr1c0023v47f7p1u7c29"},{"post_id":"cloojhr1a000yv47f12k013pj","tag_id":"cloojhr1c001zv47fgyhqbr85","_id":"cloojhr1c0024v47f7e257f1e"}],"Tag":[{"name":"Anaconda","_id":"cloojhr150005v47f4sy14fe2"},{"name":"Python","_id":"cloojhr150008v47f37hd2vyk"},{"name":"Django","_id":"cloojhr16000av47f9ddu0a68"},{"name":"Docker","_id":"cloojhr17000gv47f6z6c39xx"},{"name":"GitHub","_id":"cloojhr18000sv47f2ir2clct"},{"name":"Git","_id":"cloojhr19000xv47f7new23sn"},{"name":"Hexo","_id":"cloojhr1b0014v47f104x6ket"},{"name":"Node.js","_id":"cloojhr1b0016v47f6g9l5343"},{"name":"hexo","_id":"cloojhr1b0019v47fbe0d6bhk"},{"name":"git","_id":"cloojhr1b001ev47f1pn7alos"},{"name":"Linux","_id":"cloojhr1b001iv47ffyslg0q3"},{"name":"MySQL","_id":"cloojhr1c001mv47f1jjk2q2q"},{"name":"SQL","_id":"cloojhr1c001qv47favmhdltj"},{"name":"HTML","_id":"cloojhr1c001uv47f5o227g8d"},{"name":"JavaScript","_id":"cloojhr1c001zv47fgyhqbr85"}]}}